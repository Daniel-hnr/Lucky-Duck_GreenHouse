
Lucky-Duck_GreenHouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee8  08004ee8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef0  08004ef0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  2000008c  08004f84  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08004f84  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f956  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b4  00000000  00000000  0002fa55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00032010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b70  00000000  00000000  00032ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001883f  00000000  00000000  00033a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001264d  00000000  00000000  0004c27f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a383  00000000  00000000  0005e8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042c8  00000000  00000000  000f8c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000fcf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046cc 	.word	0x080046cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	080046cc 	.word	0x080046cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000580:	f001 f948 	bl	8001814 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000584:	f000 f866 	bl	8000654 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000588:	f000 f99c 	bl	80008c4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800058c:	f000 f8cc 	bl	8000728 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000590:	f000 f91e 	bl	80007d0 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000594:	f000 f94a 	bl	800082c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc1);
 8000598:	4827      	ldr	r0, [pc, #156]	; (8000638 <main+0xbc>)
 800059a:	f001 fa15 	bl	80019c8 <HAL_ADC_Start>
	ssd1306_Init();
 800059e:	f000 ff39 	bl	8001414 <ssd1306_Init>
	init_dht11(&dht, &htim2, DHT11_GPIO_Port, DHT11_Pin);
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	4a25      	ldr	r2, [pc, #148]	; (800063c <main+0xc0>)
 80005a8:	4925      	ldr	r1, [pc, #148]	; (8000640 <main+0xc4>)
 80005aa:	4826      	ldr	r0, [pc, #152]	; (8000644 <main+0xc8>)
 80005ac:	f000 fd2f 	bl	800100e <init_dht11>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (state) {
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <main+0xcc>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <main+0x42>
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d032      	beq.n	8000622 <main+0xa6>
 80005bc:	e038      	b.n	8000630 <main+0xb4>
		case work_state:
			if (state == work_state && flag_t != 10) {
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <main+0xcc>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d10e      	bne.n	80005e4 <main+0x68>
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <main+0xd0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b0a      	cmp	r3, #10
 80005cc:	d00a      	beq.n	80005e4 <main+0x68>
				HAL_Delay(500);
 80005ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d2:	f001 f991 	bl	80018f8 <HAL_Delay>
				flag_t++;
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <main+0xd0>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <main+0xd0>)
 80005e0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, 1);
				} else if (dht.temperature < temp.set_val) {
					HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, 0);
				}
			}
			break;
 80005e2:	e024      	b.n	800062e <main+0xb2>
				flag_t = 0;
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <main+0xd0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
				main_show();
 80005ea:	f000 fa39 	bl	8000a60 <main_show>
				if (dht.temperature > temp.set_val) {
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <main+0xc8>)
 80005f0:	7b1b      	ldrb	r3, [r3, #12]
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <main+0xd4>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	dd05      	ble.n	8000608 <main+0x8c>
					HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2120      	movs	r1, #32
 8000600:	480e      	ldr	r0, [pc, #56]	; (800063c <main+0xc0>)
 8000602:	f001 ff6f 	bl	80024e4 <HAL_GPIO_WritePin>
			break;
 8000606:	e012      	b.n	800062e <main+0xb2>
				} else if (dht.temperature < temp.set_val) {
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <main+0xc8>)
 800060a:	7b1b      	ldrb	r3, [r3, #12]
 800060c:	461a      	mov	r2, r3
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <main+0xd4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	429a      	cmp	r2, r3
 8000614:	da0b      	bge.n	800062e <main+0xb2>
					HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <main+0xc0>)
 800061c:	f001 ff62 	bl	80024e4 <HAL_GPIO_WritePin>
			break;
 8000620:	e005      	b.n	800062e <main+0xb2>
		case menu_state:
			menu_show();
 8000622:	f000 fa79 	bl	8000b18 <menu_show>
			HAL_Delay(100);
 8000626:	2064      	movs	r0, #100	; 0x64
 8000628:	f001 f966 	bl	80018f8 <HAL_Delay>
			break;
 800062c:	e000      	b.n	8000630 <main+0xb4>
			break;
 800062e:	bf00      	nop
		}
		ssd1306_UpdateScreen();
 8000630:	f000 ff72 	bl	8001518 <ssd1306_UpdateScreen>
		switch (state) {
 8000634:	e7bc      	b.n	80005b0 <main+0x34>
 8000636:	bf00      	nop
 8000638:	200000a8 	.word	0x200000a8
 800063c:	40020000 	.word	0x40020000
 8000640:	20000144 	.word	0x20000144
 8000644:	200001ac 	.word	0x200001ac
 8000648:	200001bc 	.word	0x200001bc
 800064c:	200001aa 	.word	0x200001aa
 8000650:	20000000 	.word	0x20000000

08000654 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fbc8 	bl	8003df8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a27      	ldr	r2, [pc, #156]	; (8000720 <SystemClock_Config+0xcc>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a20      	ldr	r2, [pc, #128]	; (8000724 <SystemClock_Config+0xd0>)
 80006a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80006c8:	2319      	movs	r3, #25
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006cc:	23a8      	movs	r3, #168	; 0xa8
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fbe1 	bl	8002ea4 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x98>
		Error_Handler();
 80006e8:	f000 f9b4 	bl	8000a54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fe43 	bl	8003394 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc4>
		Error_Handler();
 8000714:	f000 f99e 	bl	8000a54 <Error_Handler>
	}
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800073c:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <MX_ADC1_Init+0xa0>)
 800073e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000742:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000746:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800074a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800074e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000758:	2201      	movs	r2, #1
 800075a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000766:	2200      	movs	r2, #0
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800076c:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_ADC1_Init+0xa4>)
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800078c:	f001 f8d8 	bl	8001940 <HAL_ADC_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x72>
		Error_Handler();
 8000796:	f000 f95d 	bl	8000a54 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800079a:	2301      	movs	r3, #1
 800079c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80007a2:	2303      	movs	r3, #3
 80007a4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_ADC1_Init+0x9c>)
 80007ac:	f001 f9ce 	bl	8001b4c <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x92>
		Error_Handler();
 80007b6:	f000 f94d 	bl	8000a54 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000a8 	.word	0x200000a8
 80007c8:	40012000 	.word	0x40012000
 80007cc:	0f000001 	.word	0x0f000001

080007d0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C1_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_I2C1_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C1_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_I2C1_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_I2C1_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_I2C1_Init+0x50>)
 800080e:	f001 fe9b 	bl	8002548 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000818:	f000 f91c 	bl	8000a54 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000f0 	.word	0x200000f0
 8000824:	40005400 	.word	0x40005400
 8000828:	000186a0 	.word	0x000186a0

0800082c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_TIM2_Init+0x94>)
 800084a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 84 - 1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000852:	2253      	movs	r2, #83	; 0x53
 8000854:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff - 1;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_TIM2_Init+0x94>)
 800085e:	f06f 0201 	mvn.w	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM2_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000872:	f002 ff5b 	bl	800372c <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x54>
		Error_Handler();
 800087c:	f000 f8ea 	bl	8000a54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000884:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_TIM2_Init+0x94>)
 800088e:	f003 f81e 	bl	80038ce <HAL_TIM_ConfigClockSource>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x70>
		Error_Handler();
 8000898:	f000 f8dc 	bl	8000a54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_TIM2_Init+0x94>)
 80008aa:	f003 f9fd 	bl	8003ca8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80008b4:	f000 f8ce 	bl	8000a54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000144 	.word	0x20000144

080008c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <MX_GPIO_Init+0x110>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a3c      	ldr	r2, [pc, #240]	; (80009d4 <MX_GPIO_Init+0x110>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <MX_GPIO_Init+0x110>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <MX_GPIO_Init+0x110>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a35      	ldr	r2, [pc, #212]	; (80009d4 <MX_GPIO_Init+0x110>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x110>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <MX_GPIO_Init+0x110>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a2e      	ldr	r2, [pc, #184]	; (80009d4 <MX_GPIO_Init+0x110>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <MX_GPIO_Init+0x110>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	4829      	ldr	r0, [pc, #164]	; (80009d8 <MX_GPIO_Init+0x114>)
 8000934:	f001 fdd6 	bl	80024e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : fan_Pin */
	GPIO_InitStruct.Pin = fan_Pin;
 8000938:	2320      	movs	r3, #32
 800093a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000944:	2301      	movs	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(fan_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4619      	mov	r1, r3
 800094e:	4822      	ldr	r0, [pc, #136]	; (80009d8 <MX_GPIO_Init+0x114>)
 8000950:	f001 fc2c 	bl	80021ac <HAL_GPIO_Init>

	/*Configure GPIO pins : btn1_Pin btn6_Pin */
	GPIO_InitStruct.Pin = btn1_Pin | btn6_Pin;
 8000954:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000958:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	481b      	ldr	r0, [pc, #108]	; (80009d8 <MX_GPIO_Init+0x114>)
 800096a:	f001 fc1f 	bl	80021ac <HAL_GPIO_Init>

	/*Configure GPIO pin : btn2_Pin */
	GPIO_InitStruct.Pin = btn2_Pin;
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000976:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000978:	2301      	movs	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(btn2_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <MX_GPIO_Init+0x114>)
 8000984:	f001 fc12 	bl	80021ac <HAL_GPIO_Init>

	/*Configure GPIO pins : btn3_Pin btn5_Pin btn4_Pin */
	GPIO_InitStruct.Pin = btn3_Pin | btn5_Pin | btn4_Pin;
 8000988:	2331      	movs	r3, #49	; 0x31
 800098a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000990:	2301      	movs	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4619      	mov	r1, r3
 800099a:	4810      	ldr	r0, [pc, #64]	; (80009dc <MX_GPIO_Init+0x118>)
 800099c:	f001 fc06 	bl	80021ac <HAL_GPIO_Init>

	/*Configure GPIO pin : DHT11_Pin */
	GPIO_InitStruct.Pin = DHT11_Pin;
 80009a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <MX_GPIO_Init+0x114>)
 80009b6:	f001 fbf9 	bl	80021ac <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2101      	movs	r1, #1
 80009be:	2017      	movs	r0, #23
 80009c0:	f001 fbbd 	bl	800213e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009c4:	2017      	movs	r0, #23
 80009c6:	f001 fbd6 	bl	8002176 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == btn2_Pin) {
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	2b80      	cmp	r3, #128	; 0x80
 80009ee:	d126      	bne.n	8000a3e <HAL_GPIO_EXTI_Callback+0x5e>
        state = (state == work_state ? menu_state : work_state);
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x68>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	bf0c      	ite	eq
 80009f8:	2301      	moveq	r3, #1
 80009fa:	2300      	movne	r3, #0
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a02:	701a      	strb	r2, [r3, #0]
        ssd1306_Fill(Black);    // Clear the screen
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fd6f 	bl	80014e8 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000a0a:	f000 fd85 	bl	8001518 <ssd1306_UpdateScreen>
        HAL_Delay(100);
 8000a0e:	2064      	movs	r0, #100	; 0x64
 8000a10:	f000 ff72 	bl	80018f8 <HAL_Delay>
        if (state == menu_state) {
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d102      	bne.n	8000a22 <HAL_GPIO_EXTI_Callback+0x42>
            menu_show();
 8000a1c:	f000 f87c 	bl	8000b18 <menu_show>
 8000a20:	e005      	b.n	8000a2e <HAL_GPIO_EXTI_Callback+0x4e>
        } else if (state == work_state) {
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <HAL_GPIO_EXTI_Callback+0x4e>
            main_show();
 8000a2a:	f000 f819 	bl	8000a60 <main_show>
        }
        flag_t = 10;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a30:	220a      	movs	r2, #10
 8000a32:	701a      	strb	r2, [r3, #0]
        ssd1306_UpdateScreen();  // Update the screen once after drawing
 8000a34:	f000 fd70 	bl	8001518 <ssd1306_UpdateScreen>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a38:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	6153      	str	r3, [r2, #20]
    }
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200001bc 	.word	0x200001bc
 8000a4c:	200001aa 	.word	0x200001aa
 8000a50:	40013c00 	.word	0x40013c00

08000a54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <main_show>:
extern struct info temp;
extern struct info light;
extern char state;

bool page = false;
void main_show() {
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af02      	add	r7, sp, #8
	get_temp_humidity();
 8000a66:	f000 f947 	bl	8000cf8 <get_temp_humidity>
	HAL_Delay(10);
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f000 ff44 	bl	80018f8 <HAL_Delay>
	ssd1306_SetCursor(0, 1);
 8000a70:	2101      	movs	r1, #1
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 fe84 	bl	8001780 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 fd35 	bl	80014e8 <ssd1306_Fill>
	sprintf(menu, "temp:%-3dlight:%-3d", dht.temperature, get_light());
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <main_show+0xa0>)
 8000a80:	7b1b      	ldrb	r3, [r3, #12]
 8000a82:	461c      	mov	r4, r3
 8000a84:	f000 f942 	bl	8000d0c <get_light>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4622      	mov	r2, r4
 8000a8c:	491d      	ldr	r1, [pc, #116]	; (8000b04 <main_show+0xa4>)
 8000a8e:	481e      	ldr	r0, [pc, #120]	; (8000b08 <main_show+0xa8>)
 8000a90:	f003 f978 	bl	8003d84 <siprintf>
	ssd1306_WriteString(menu, Font_7x10, White);
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <main_show+0xac>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	9200      	str	r2, [sp, #0]
 8000a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a9c:	481a      	ldr	r0, [pc, #104]	; (8000b08 <main_show+0xa8>)
 8000a9e:	f000 fe49 	bl	8001734 <ssd1306_WriteString>
	menu[0] = '\0';
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <main_show+0xa8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(0, 11);
 8000aa8:	210b      	movs	r1, #11
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 fe68 	bl	8001780 <ssd1306_SetCursor>
	sprintf(menu, "humidity:%-3d", dht.humidty);
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <main_show+0xa0>)
 8000ab2:	7b5b      	ldrb	r3, [r3, #13]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4916      	ldr	r1, [pc, #88]	; (8000b10 <main_show+0xb0>)
 8000ab8:	4813      	ldr	r0, [pc, #76]	; (8000b08 <main_show+0xa8>)
 8000aba:	f003 f963 	bl	8003d84 <siprintf>
	ssd1306_WriteString(menu, Font_7x10, White);
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <main_show+0xac>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	9200      	str	r2, [sp, #0]
 8000ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ac6:	4810      	ldr	r0, [pc, #64]	; (8000b08 <main_show+0xa8>)
 8000ac8:	f000 fe34 	bl	8001734 <ssd1306_WriteString>
	menu[0] = '\0';
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <main_show+0xa8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(0, 21);
 8000ad2:	2115      	movs	r1, #21
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 fe53 	bl	8001780 <ssd1306_SetCursor>
	sprintf(menu, "fans:%-2d", 18);
 8000ada:	2212      	movs	r2, #18
 8000adc:	490d      	ldr	r1, [pc, #52]	; (8000b14 <main_show+0xb4>)
 8000ade:	480a      	ldr	r0, [pc, #40]	; (8000b08 <main_show+0xa8>)
 8000ae0:	f003 f950 	bl	8003d84 <siprintf>
	ssd1306_WriteString(menu, Font_7x10, White);
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <main_show+0xac>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	9200      	str	r2, [sp, #0]
 8000aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aec:	4806      	ldr	r0, [pc, #24]	; (8000b08 <main_show+0xa8>)
 8000aee:	f000 fe21 	bl	8001734 <ssd1306_WriteString>
	HAL_Delay(10);
 8000af2:	200a      	movs	r0, #10
 8000af4:	f000 ff00 	bl	80018f8 <HAL_Delay>
}
 8000af8:	bf00      	nop
 8000afa:	3704      	adds	r7, #4
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	200001ac 	.word	0x200001ac
 8000b04:	080046e4 	.word	0x080046e4
 8000b08:	2000018c 	.word	0x2000018c
 8000b0c:	08004ea8 	.word	0x08004ea8
 8000b10:	080046f8 	.word	0x080046f8
 8000b14:	08004708 	.word	0x08004708

08000b18 <menu_show>:
void menu_show() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af02      	add	r7, sp, #8
	if(state == menu_state)
 8000b1e:	4b6c      	ldr	r3, [pc, #432]	; (8000cd0 <menu_show+0x1b8>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	f040 80d0 	bne.w	8000cc8 <menu_show+0x1b0>
	{
		switch (page) {
 8000b28:	4b6a      	ldr	r3, [pc, #424]	; (8000cd4 <menu_show+0x1bc>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d04d      	beq.n	8000bcc <menu_show+0xb4>
		case 0:
			get_temp_humidity();
 8000b30:	f000 f8e2 	bl	8000cf8 <get_temp_humidity>
			ssd1306_Fill(Black);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 fcd7 	bl	80014e8 <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 fe1f 	bl	8001780 <ssd1306_SetCursor>
			ssd1306_WriteString(temp.infoName, Font_7x10, White);
 8000b42:	4b65      	ldr	r3, [pc, #404]	; (8000cd8 <menu_show+0x1c0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	9200      	str	r2, [sp, #0]
 8000b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4a:	4864      	ldr	r0, [pc, #400]	; (8000cdc <menu_show+0x1c4>)
 8000b4c:	f000 fdf2 	bl	8001734 <ssd1306_WriteString>
			sprintf(menu, "val:%-3d|v:%-3d", dht.temperature, temp.set_val);
 8000b50:	4b63      	ldr	r3, [pc, #396]	; (8000ce0 <menu_show+0x1c8>)
 8000b52:	7b1b      	ldrb	r3, [r3, #12]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b61      	ldr	r3, [pc, #388]	; (8000cdc <menu_show+0x1c4>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4962      	ldr	r1, [pc, #392]	; (8000ce4 <menu_show+0x1cc>)
 8000b5c:	4862      	ldr	r0, [pc, #392]	; (8000ce8 <menu_show+0x1d0>)
 8000b5e:	f003 f911 	bl	8003d84 <siprintf>
			ssd1306_SetCursor(0, 14);
 8000b62:	210e      	movs	r1, #14
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 fe0b 	bl	8001780 <ssd1306_SetCursor>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000b6a:	4b5b      	ldr	r3, [pc, #364]	; (8000cd8 <menu_show+0x1c0>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	9200      	str	r2, [sp, #0]
 8000b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b72:	485d      	ldr	r0, [pc, #372]	; (8000ce8 <menu_show+0x1d0>)
 8000b74:	f000 fdde 	bl	8001734 <ssd1306_WriteString>

			if (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false) {
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	485c      	ldr	r0, [pc, #368]	; (8000cec <menu_show+0x1d4>)
 8000b7c:	f001 fc9a 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d10d      	bne.n	8000ba2 <menu_show+0x8a>
				temp.set_val -= 1;
 8000b86:	4b55      	ldr	r3, [pc, #340]	; (8000cdc <menu_show+0x1c4>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	4a53      	ldr	r2, [pc, #332]	; (8000cdc <menu_show+0x1c4>)
 8000b8e:	6153      	str	r3, [r2, #20]
				while (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false)
 8000b90:	bf00      	nop
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	4855      	ldr	r0, [pc, #340]	; (8000cec <menu_show+0x1d4>)
 8000b96:	f001 fc8d 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0f8      	beq.n	8000b92 <menu_show+0x7a>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
				temp.set_val += 1;
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
					;
			}
			break;
 8000ba0:	e060      	b.n	8000c64 <menu_show+0x14c>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4852      	ldr	r0, [pc, #328]	; (8000cf0 <menu_show+0x1d8>)
 8000ba6:	f001 fc85 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d159      	bne.n	8000c64 <menu_show+0x14c>
				temp.set_val += 1;
 8000bb0:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <menu_show+0x1c4>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a49      	ldr	r2, [pc, #292]	; (8000cdc <menu_show+0x1c4>)
 8000bb8:	6153      	str	r3, [r2, #20]
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
 8000bba:	bf00      	nop
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	484c      	ldr	r0, [pc, #304]	; (8000cf0 <menu_show+0x1d8>)
 8000bc0:	f001 fc78 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f8      	beq.n	8000bbc <menu_show+0xa4>
			break;
 8000bca:	e04b      	b.n	8000c64 <menu_show+0x14c>
		case 1:
			ssd1306_Fill(Black);
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 fc8b 	bl	80014e8 <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 fdd3 	bl	8001780 <ssd1306_SetCursor>
			ssd1306_WriteString(light.infoName, Font_7x10, White);
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <menu_show+0x1c0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be2:	4844      	ldr	r0, [pc, #272]	; (8000cf4 <menu_show+0x1dc>)
 8000be4:	f000 fda6 	bl	8001734 <ssd1306_WriteString>
			sprintf(menu, "val:%-3d|v:%-3d", get_light(), light.set_val);
 8000be8:	f000 f890 	bl	8000d0c <get_light>
 8000bec:	4602      	mov	r2, r0
 8000bee:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <menu_show+0x1dc>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	493c      	ldr	r1, [pc, #240]	; (8000ce4 <menu_show+0x1cc>)
 8000bf4:	483c      	ldr	r0, [pc, #240]	; (8000ce8 <menu_show+0x1d0>)
 8000bf6:	f003 f8c5 	bl	8003d84 <siprintf>
			ssd1306_SetCursor(0, 14);
 8000bfa:	210e      	movs	r1, #14
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 fdbf 	bl	8001780 <ssd1306_SetCursor>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000c02:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <menu_show+0x1c0>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	9200      	str	r2, [sp, #0]
 8000c08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0a:	4837      	ldr	r0, [pc, #220]	; (8000ce8 <menu_show+0x1d0>)
 8000c0c:	f000 fd92 	bl	8001734 <ssd1306_WriteString>

			if (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false) {
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	4836      	ldr	r0, [pc, #216]	; (8000cec <menu_show+0x1d4>)
 8000c14:	f001 fc4e 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10d      	bne.n	8000c3a <menu_show+0x122>
				light.set_val -= 1;
 8000c1e:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <menu_show+0x1dc>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4a33      	ldr	r2, [pc, #204]	; (8000cf4 <menu_show+0x1dc>)
 8000c26:	6153      	str	r3, [r2, #20]
				while (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false)
 8000c28:	bf00      	nop
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	482f      	ldr	r0, [pc, #188]	; (8000cec <menu_show+0x1d4>)
 8000c2e:	f001 fc41 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f8      	beq.n	8000c2a <menu_show+0x112>
 8000c38:	e015      	b.n	8000c66 <menu_show+0x14e>
					;
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	482c      	ldr	r0, [pc, #176]	; (8000cf0 <menu_show+0x1d8>)
 8000c3e:	f001 fc39 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10e      	bne.n	8000c66 <menu_show+0x14e>
				light.set_val += 1;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <menu_show+0x1dc>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <menu_show+0x1dc>)
 8000c50:	6153      	str	r3, [r2, #20]
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
 8000c52:	bf00      	nop
 8000c54:	2101      	movs	r1, #1
 8000c56:	4826      	ldr	r0, [pc, #152]	; (8000cf0 <menu_show+0x1d8>)
 8000c58:	f001 fc2c 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f8      	beq.n	8000c54 <menu_show+0x13c>
 8000c62:	e000      	b.n	8000c66 <menu_show+0x14e>
			break;
 8000c64:	bf00      	nop
					;
			}
		}
		if(HAL_GPIO_ReadPin(btn6_GPIO_Port, btn6_Pin) == false)
 8000c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6a:	4820      	ldr	r0, [pc, #128]	; (8000cec <menu_show+0x1d4>)
 8000c6c:	f001 fc22 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10f      	bne.n	8000c96 <menu_show+0x17e>
		{
			page = !page;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <menu_show+0x1bc>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf14      	ite	ne
 8000c7e:	2301      	movne	r3, #1
 8000c80:	2300      	moveq	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	f083 0301 	eor.w	r3, r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <menu_show+0x1bc>)
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e015      	b.n	8000cc2 <menu_show+0x1aa>
		}
		else if(HAL_GPIO_ReadPin(btn4_GPIO_Port, btn4_Pin) == false)
 8000c96:	2120      	movs	r1, #32
 8000c98:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <menu_show+0x1d8>)
 8000c9a:	f001 fc0b 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10e      	bne.n	8000cc2 <menu_show+0x1aa>
		{
			page = !page;
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <menu_show+0x1bc>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f083 0301 	eor.w	r3, r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <menu_show+0x1bc>)
 8000cc0:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f000 fe18 	bl	80018f8 <HAL_Delay>
	}

}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001bc 	.word	0x200001bc
 8000cd4:	200001bd 	.word	0x200001bd
 8000cd8:	08004ea8 	.word	0x08004ea8
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	200001ac 	.word	0x200001ac
 8000ce4:	08004714 	.word	0x08004714
 8000ce8:	2000018c 	.word	0x2000018c
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	20000018 	.word	0x20000018

08000cf8 <get_temp_humidity>:
#include "sensors.h"



void get_temp_humidity() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	readDHT11(&dht);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <get_temp_humidity+0x10>)
 8000cfe:	f000 f9d7 	bl	80010b0 <readDHT11>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200001ac 	.word	0x200001ac

08000d0c <get_light>:

int get_light() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <get_light+0x10>)
 8000d12:	f000 ff0d 	bl	8001b30 <HAL_ADC_GetValue>
 8000d16:	4603      	mov	r3, r0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000a8 	.word	0x200000a8

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_ADC_MspInit+0x7c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d127      	bne.n	8000de2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_ADC_MspInit+0x80>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <HAL_ADC_MspInit+0x80>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_ADC_MspInit+0x80>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_ADC_MspInit+0x80>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_ADC_MspInit+0x80>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_ADC_MspInit+0x80>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000dde:	f001 f9e5 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40012000 	.word	0x40012000
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000

08000df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_I2C_MspInit+0x84>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12b      	bne.n	8000e72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e36:	23c0      	movs	r3, #192	; 0xc0
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3a:	2312      	movs	r3, #18
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e46:	2304      	movs	r3, #4
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <HAL_I2C_MspInit+0x8c>)
 8000e52:	f001 f9ab 	bl	80021ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020400 	.word	0x40020400

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e98:	d10d      	bne.n	8000eb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_TIM_Base_MspInit+0x3c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 fcd0 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn2_Pin);
 8000f20:	2080      	movs	r0, #128	; 0x80
 8000f22:	f001 faf9 	bl	8002518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f002 ff54 	bl	8003e08 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20010000 	.word	0x20010000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	200001c0 	.word	0x200001c0
 8000f94:	20000518 	.word	0x20000518

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fc0:	f7ff ffea 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f002 ff13 	bl	8003e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fac5 	bl	800057c <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001000:	08004ef8 	.word	0x08004ef8
  ldr r2, =_sbss
 8001004:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001008:	20000518 	.word	0x20000518

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>

0800100e <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	809a      	strh	r2, [r3, #4]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b088      	sub	sp, #32
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d111      	bne.n	8001080 <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f001 f897 	bl	80021ac <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 800107e:	e013      	b.n	80010a8 <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d110      	bne.n	80010a8 <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	889b      	ldrh	r3, [r3, #4]
 800108a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f107 020c 	add.w	r2, r7, #12
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 f882 	bl	80021ac <HAL_GPIO_Init>
}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 80010bc:	2300      	movs	r3, #0
 80010be:	86bb      	strh	r3, [r7, #52]	; 0x34
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 80010de:	2101      	movs	r1, #1
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffaa 	bl	800103a <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	889b      	ldrh	r3, [r3, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	4619      	mov	r1, r3
 80010f2:	f001 f9f7 	bl	80024e4 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 80010f6:	2012      	movs	r0, #18
 80010f8:	f000 fbfe 	bl	80018f8 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fb61 	bl	80037cc <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 800110a:	2100      	movs	r1, #0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff94 	bl	800103a <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800111c:	e00b      	b.n	8001136 <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	b29b      	uxth	r3, r3
 8001128:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800112c:	d903      	bls.n	8001136 <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 800112e:	b662      	cpsie	i
}
 8001130:	bf00      	nop
			__enable_irq();
			return 0;
 8001132:	2300      	movs	r3, #0
 8001134:	e130      	b.n	8001398 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	4619      	mov	r1, r3
 8001140:	4610      	mov	r0, r2
 8001142:	f001 f9b7 	bl	80024b4 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b01      	cmp	r3, #1
 800114a:	d0e8      	beq.n	800111e <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001156:	e00b      	b.n	8001170 <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	b29b      	uxth	r3, r3
 8001162:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001166:	d903      	bls.n	8001170 <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001168:	b662      	cpsie	i
}
 800116a:	bf00      	nop
			__enable_irq();
			return 0;
 800116c:	2300      	movs	r3, #0
 800116e:	e113      	b.n	8001398 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	889b      	ldrh	r3, [r3, #4]
 8001178:	4619      	mov	r1, r3
 800117a:	4610      	mov	r0, r2
 800117c:	f001 f99a 	bl	80024b4 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0e8      	beq.n	8001158 <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800119a:	e00b      	b.n	80011b4 <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011aa:	d903      	bls.n	80011b4 <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 80011ac:	b662      	cpsie	i
}
 80011ae:	bf00      	nop
			__enable_irq();
			return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e0f1      	b.n	8001398 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	4619      	mov	r1, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	f001 f978 	bl	80024b4 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d0e8      	beq.n	800119c <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 80011d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011d6:	2b4a      	cmp	r3, #74	; 0x4a
 80011d8:	d80c      	bhi.n	80011f4 <readDHT11+0x144>
 80011da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011dc:	2b55      	cmp	r3, #85	; 0x55
 80011de:	d909      	bls.n	80011f4 <readDHT11+0x144>
 80011e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011e2:	2b4a      	cmp	r3, #74	; 0x4a
 80011e4:	d806      	bhi.n	80011f4 <readDHT11+0x144>
 80011e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011e8:	2b55      	cmp	r3, #85	; 0x55
 80011ea:	d903      	bls.n	80011f4 <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 80011ec:	b662      	cpsie	i
}
 80011ee:	bf00      	nop
	{
		__enable_irq();
		return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e0d1      	b.n	8001398 <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
 80011f8:	e05d      	b.n	80012b6 <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001204:	e00b      	b.n	800121e <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	b29b      	uxth	r3, r3
 8001210:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001214:	d903      	bls.n	800121e <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 8001216:	b662      	cpsie	i
}
 8001218:	bf00      	nop
				__enable_irq();
				return 0;
 800121a:	2300      	movs	r3, #0
 800121c:	e0bc      	b.n	8001398 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	889b      	ldrh	r3, [r3, #4]
 8001226:	4619      	mov	r1, r3
 8001228:	4610      	mov	r0, r2
 800122a:	f001 f943 	bl	80024b4 <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0e8      	beq.n	8001206 <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800123e:	e00b      	b.n	8001258 <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	b29b      	uxth	r3, r3
 800124a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800124e:	d903      	bls.n	8001258 <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 8001250:	b662      	cpsie	i
}
 8001252:	bf00      	nop
				__enable_irq();
				return 0;
 8001254:	2300      	movs	r3, #0
 8001256:	e09f      	b.n	8001398 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	889b      	ldrh	r3, [r3, #4]
 8001260:	4619      	mov	r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	f001 f926 	bl	80024b4 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d0e8      	beq.n	8001240 <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 8001278:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800127a:	2b14      	cmp	r3, #20
 800127c:	d906      	bls.n	800128c <readDHT11+0x1dc>
 800127e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001280:	2b1d      	cmp	r3, #29
 8001282:	d803      	bhi.n	800128c <readDHT11+0x1dc>
		{
			mBit = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800128a:	e008      	b.n	800129e <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 800128c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800128e:	2b3c      	cmp	r3, #60	; 0x3c
 8001290:	d905      	bls.n	800129e <readDHT11+0x1ee>
 8001292:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001294:	2b4f      	cmp	r3, #79	; 0x4f
 8001296:	d802      	bhi.n	800129e <readDHT11+0x1ee>
		{
			 mBit = 1;
 8001298:	2301      	movs	r3, #1
 800129a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 800129e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012a2:	b2d9      	uxtb	r1, r3
 80012a4:	f107 0208 	add.w	r2, r7, #8
 80012a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012aa:	4413      	add	r3, r2
 80012ac:	460a      	mov	r2, r1
 80012ae:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 80012b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b2:	3301      	adds	r3, #1
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
 80012b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b8:	2b27      	cmp	r3, #39	; 0x27
 80012ba:	dd9e      	ble.n	80011fa <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 fadd 	bl	8003880 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 80012c6:	b662      	cpsie	i
}
 80012c8:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
 80012ce:	e011      	b.n	80012f4 <readDHT11+0x244>
	{
		humVal += mData[i];
 80012d0:	f107 0208 	add.w	r2, r7, #8
 80012d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012d6:	4413      	add	r3, r2
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012de:	4413      	add	r3, r2
 80012e0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 80012e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 80012ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012f0:	3301      	adds	r3, #1
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
 80012f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	ddea      	ble.n	80012d0 <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 80012fa:	2310      	movs	r3, #16
 80012fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012fe:	e011      	b.n	8001324 <readDHT11+0x274>
	{
		tempVal += mData[i];
 8001300:	f107 0208 	add.w	r2, r7, #8
 8001304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001306:	4413      	add	r3, r2
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800130e:	4413      	add	r3, r2
 8001310:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 8001314:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 800131e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001320:	3301      	adds	r3, #1
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001326:	2b17      	cmp	r3, #23
 8001328:	ddea      	ble.n	8001300 <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 800132a:	2320      	movs	r3, #32
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
 800132e:	e011      	b.n	8001354 <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 8001330:	f107 0208 	add.w	r2, r7, #8
 8001334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001336:	4413      	add	r3, r2
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800133e:	4413      	add	r3, r2
 8001340:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 8001344:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 800134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001350:	3301      	adds	r3, #1
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
 8001354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001356:	2b27      	cmp	r3, #39	; 0x27
 8001358:	ddea      	ble.n	8001330 <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 800135a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800135e:	085b      	lsrs	r3, r3, #1
 8001360:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 8001364:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 800136e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	genParity = humVal + tempVal;
 8001378:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800137c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001380:	4413      	add	r3, r2
 8001382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800138c:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001394:	735a      	strb	r2, [r3, #13]


	return 1;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3750      	adds	r7, #80	; 0x50
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2301      	movs	r3, #1
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	2200      	movs	r2, #0
 80013cc:	2178      	movs	r1, #120	; 0x78
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <ssd1306_WriteCommand+0x2c>)
 80013d0:	f001 f9fe 	bl	80027d0 <HAL_I2C_Mem_Write>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000f0 	.word	0x200000f0

080013e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f2:	9202      	str	r2, [sp, #8]
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	2240      	movs	r2, #64	; 0x40
 80013fe:	2178      	movs	r1, #120	; 0x78
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <ssd1306_WriteData+0x30>)
 8001402:	f001 f9e5 	bl	80027d0 <HAL_I2C_Mem_Write>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200000f0 	.word	0x200000f0

08001414 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001418:	f7ff ffc2 	bl	80013a0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	f000 fa6b 	bl	80018f8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f9d8 	bl	80017d8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001428:	2020      	movs	r0, #32
 800142a:	f7ff ffc1 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff ffbe 	bl	80013b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001434:	20b0      	movs	r0, #176	; 0xb0
 8001436:	f7ff ffbb 	bl	80013b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800143a:	20c8      	movs	r0, #200	; 0xc8
 800143c:	f7ff ffb8 	bl	80013b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ffb5 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001446:	2010      	movs	r0, #16
 8001448:	f7ff ffb2 	bl	80013b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800144c:	2040      	movs	r0, #64	; 0x40
 800144e:	f7ff ffaf 	bl	80013b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001452:	20ff      	movs	r0, #255	; 0xff
 8001454:	f000 f9ac 	bl	80017b0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001458:	20a1      	movs	r0, #161	; 0xa1
 800145a:	f7ff ffa9 	bl	80013b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800145e:	20a6      	movs	r0, #166	; 0xa6
 8001460:	f7ff ffa6 	bl	80013b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001464:	20a8      	movs	r0, #168	; 0xa8
 8001466:	f7ff ffa3 	bl	80013b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800146a:	201f      	movs	r0, #31
 800146c:	f7ff ffa0 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001470:	20a4      	movs	r0, #164	; 0xa4
 8001472:	f7ff ff9d 	bl	80013b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001476:	20d3      	movs	r0, #211	; 0xd3
 8001478:	f7ff ff9a 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ff97 	bl	80013b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001482:	20d5      	movs	r0, #213	; 0xd5
 8001484:	f7ff ff94 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001488:	20f0      	movs	r0, #240	; 0xf0
 800148a:	f7ff ff91 	bl	80013b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800148e:	20d9      	movs	r0, #217	; 0xd9
 8001490:	f7ff ff8e 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001494:	2022      	movs	r0, #34	; 0x22
 8001496:	f7ff ff8b 	bl	80013b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800149a:	20da      	movs	r0, #218	; 0xda
 800149c:	f7ff ff88 	bl	80013b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80014a0:	2002      	movs	r0, #2
 80014a2:	f7ff ff85 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80014a6:	20db      	movs	r0, #219	; 0xdb
 80014a8:	f7ff ff82 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80014ac:	2020      	movs	r0, #32
 80014ae:	f7ff ff7f 	bl	80013b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80014b2:	208d      	movs	r0, #141	; 0x8d
 80014b4:	f7ff ff7c 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80014b8:	2014      	movs	r0, #20
 80014ba:	f7ff ff79 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 f98a 	bl	80017d8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 f80f 	bl	80014e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80014ca:	f000 f825 	bl	8001518 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <ssd1306_Init+0xd0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <ssd1306_Init+0xd0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80014da:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <ssd1306_Init+0xd0>)
 80014dc:	2201      	movs	r2, #1
 80014de:	711a      	strb	r2, [r3, #4]
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200003c4 	.word	0x200003c4

080014e8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <ssd1306_Fill+0x14>
 80014f8:	2300      	movs	r3, #0
 80014fa:	e000      	b.n	80014fe <ssd1306_Fill+0x16>
 80014fc:	23ff      	movs	r3, #255	; 0xff
 80014fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001502:	4619      	mov	r1, r3
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <ssd1306_Fill+0x2c>)
 8001506:	f002 fc77 	bl	8003df8 <memset>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200001c4 	.word	0x200001c4

08001518 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800151e:	2300      	movs	r3, #0
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	e016      	b.n	8001552 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	3b50      	subs	r3, #80	; 0x50
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff40 	bl	80013b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff ff3d 	bl	80013b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001536:	2010      	movs	r0, #16
 8001538:	f7ff ff3a 	bl	80013b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	01db      	lsls	r3, r3, #7
 8001540:	4a08      	ldr	r2, [pc, #32]	; (8001564 <ssd1306_UpdateScreen+0x4c>)
 8001542:	4413      	add	r3, r2
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff4a 	bl	80013e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3301      	adds	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d9e5      	bls.n	8001524 <ssd1306_UpdateScreen+0xc>
    }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001c4 	.word	0x200001c4

08001568 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	460b      	mov	r3, r1
 8001574:	71bb      	strb	r3, [r7, #6]
 8001576:	4613      	mov	r3, r2
 8001578:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db3d      	blt.n	80015fe <ssd1306_DrawPixel+0x96>
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	2b1f      	cmp	r3, #31
 8001586:	d83a      	bhi.n	80015fe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001588:	797b      	ldrb	r3, [r7, #5]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d11a      	bne.n	80015c4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800158e:	79fa      	ldrb	r2, [r7, #7]
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	b2d8      	uxtb	r0, r3
 8001596:	4603      	mov	r3, r0
 8001598:	01db      	lsls	r3, r3, #7
 800159a:	4413      	add	r3, r2
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <ssd1306_DrawPixel+0xa4>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b259      	sxtb	r1, r3
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	4603      	mov	r3, r0
 80015b8:	01db      	lsls	r3, r3, #7
 80015ba:	4413      	add	r3, r2
 80015bc:	b2c9      	uxtb	r1, r1
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <ssd1306_DrawPixel+0xa4>)
 80015c0:	54d1      	strb	r1, [r2, r3]
 80015c2:	e01d      	b.n	8001600 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	b2d8      	uxtb	r0, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	4413      	add	r3, r2
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <ssd1306_DrawPixel+0xa4>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4013      	ands	r3, r2
 80015ec:	b259      	sxtb	r1, r3
 80015ee:	79fa      	ldrb	r2, [r7, #7]
 80015f0:	4603      	mov	r3, r0
 80015f2:	01db      	lsls	r3, r3, #7
 80015f4:	4413      	add	r3, r2
 80015f6:	b2c9      	uxtb	r1, r1
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <ssd1306_DrawPixel+0xa4>)
 80015fa:	54d1      	strb	r1, [r2, r3]
 80015fc:	e000      	b.n	8001600 <ssd1306_DrawPixel+0x98>
        return;
 80015fe:	bf00      	nop
    }
}
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200001c4 	.word	0x200001c4

08001610 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	4604      	mov	r4, r0
 8001618:	4638      	mov	r0, r7
 800161a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800161e:	4623      	mov	r3, r4
 8001620:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b1f      	cmp	r3, #31
 8001626:	d902      	bls.n	800162e <ssd1306_WriteChar+0x1e>
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b7e      	cmp	r3, #126	; 0x7e
 800162c:	d901      	bls.n	8001632 <ssd1306_WriteChar+0x22>
        return 0;
 800162e:	2300      	movs	r3, #0
 8001630:	e079      	b.n	8001726 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <ssd1306_WriteChar+0x120>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	783b      	ldrb	r3, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	2b80      	cmp	r3, #128	; 0x80
 800163e:	dc06      	bgt.n	800164e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <ssd1306_WriteChar+0x120>)
 8001642:	885b      	ldrh	r3, [r3, #2]
 8001644:	461a      	mov	r2, r3
 8001646:	787b      	ldrb	r3, [r7, #1]
 8001648:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800164a:	2b20      	cmp	r3, #32
 800164c:	dd01      	ble.n	8001652 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800164e:	2300      	movs	r3, #0
 8001650:	e069      	b.n	8001726 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e04e      	b.n	80016f6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	3b20      	subs	r3, #32
 800165e:	7879      	ldrb	r1, [r7, #1]
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4619      	mov	r1, r3
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	440b      	add	r3, r1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	e036      	b.n	80016e6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <ssd1306_WriteChar+0x120>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4413      	add	r3, r2
 8001694:	b2d8      	uxtb	r0, r3
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <ssd1306_WriteChar+0x120>)
 8001698:	885b      	ldrh	r3, [r3, #2]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff ff5d 	bl	8001568 <ssd1306_DrawPixel>
 80016ae:	e017      	b.n	80016e0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <ssd1306_WriteChar+0x120>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	b2d8      	uxtb	r0, r3
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <ssd1306_WriteChar+0x120>)
 80016c0:	885b      	ldrh	r3, [r3, #2]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b2d9      	uxtb	r1, r3
 80016cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf0c      	ite	eq
 80016d4:	2301      	moveq	r3, #1
 80016d6:	2300      	movne	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	f7ff ff44 	bl	8001568 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	3301      	adds	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	783b      	ldrb	r3, [r7, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d3c3      	bcc.n	8001678 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	3301      	adds	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	787b      	ldrb	r3, [r7, #1]
 80016f8:	461a      	mov	r2, r3
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d3ab      	bcc.n	8001658 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <ssd1306_WriteChar+0x120>)
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <ssd1306_WriteChar+0x108>
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	3b20      	subs	r3, #32
 8001710:	440b      	add	r3, r1
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	e001      	b.n	800171c <ssd1306_WriteChar+0x10c>
 8001718:	783b      	ldrb	r3, [r7, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4413      	add	r3, r2
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <ssd1306_WriteChar+0x120>)
 8001722:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	bf00      	nop
 8001730:	200003c4 	.word	0x200003c4

08001734 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af02      	add	r7, sp, #8
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	4638      	mov	r0, r7
 800173e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001742:	e013      	b.n	800176c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	7818      	ldrb	r0, [r3, #0]
 8001748:	7e3b      	ldrb	r3, [r7, #24]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	463b      	mov	r3, r7
 800174e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001750:	f7ff ff5e 	bl	8001610 <ssd1306_WriteChar>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d002      	beq.n	8001766 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	e008      	b.n	8001778 <ssd1306_WriteString+0x44>
        }
        str++;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e7      	bne.n	8001744 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	781b      	ldrb	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	460a      	mov	r2, r1
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4613      	mov	r3, r2
 800178e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <ssd1306_SetCursor+0x2c>)
 8001796:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001798:	79bb      	ldrb	r3, [r7, #6]
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <ssd1306_SetCursor+0x2c>)
 800179e:	805a      	strh	r2, [r3, #2]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	200003c4 	.word	0x200003c4

080017b0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80017ba:	2381      	movs	r3, #129	; 0x81
 80017bc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fdf5 	bl	80013b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fdf1 	bl	80013b0 <ssd1306_WriteCommand>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80017e8:	23af      	movs	r3, #175	; 0xaf
 80017ea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <ssd1306_SetDisplayOn+0x38>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	715a      	strb	r2, [r3, #5]
 80017f2:	e004      	b.n	80017fe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80017f4:	23ae      	movs	r3, #174	; 0xae
 80017f6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <ssd1306_SetDisplayOn+0x38>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fdd5 	bl	80013b0 <ssd1306_WriteCommand>
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200003c4 	.word	0x200003c4

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 fc73 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fa6a 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fc8b 	bl	8002192 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001894:	f000 fc53 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000030 	.word	0x20000030
 80018b0:	20000038 	.word	0x20000038
 80018b4:	20000034 	.word	0x20000034

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000038 	.word	0x20000038
 80018dc:	200003cc 	.word	0x200003cc

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200003cc 	.word	0x200003cc

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000038 	.word	0x20000038

08001940 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e033      	b.n	80019be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fa06 	bl	8000d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001986:	f023 0302 	bic.w	r3, r3, #2
 800198a:	f043 0202 	orr.w	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f9fc 	bl	8001d90 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f023 0303 	bic.w	r3, r3, #3
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
 80019ae:	e001      	b.n	80019b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Start+0x1a>
 80019de:	2302      	movs	r3, #2
 80019e0:	e097      	b.n	8001b12 <HAL_ADC_Start+0x14a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d018      	beq.n	8001a2a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a08:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <HAL_ADC_Start+0x158>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a45      	ldr	r2, [pc, #276]	; (8001b24 <HAL_ADC_Start+0x15c>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0c9a      	lsrs	r2, r3, #18
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d15f      	bne.n	8001af8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a76:	d106      	bne.n	8001a86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f023 0206 	bic.w	r2, r3, #6
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_ADC_Start+0x160>)
 8001a96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aa0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d129      	bne.n	8001b10 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	e020      	b.n	8001b10 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_ADC_Start+0x164>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d11b      	bne.n	8001b10 <HAL_ADC_Start+0x148>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d114      	bne.n	8001b10 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	e00b      	b.n	8001b10 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0210 	orr.w	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000030 	.word	0x20000030
 8001b24:	431bde83 	.word	0x431bde83
 8001b28:	40012300 	.word	0x40012300
 8001b2c:	40012000 	.word	0x40012000

08001b30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1c>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e105      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x228>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b09      	cmp	r3, #9
 8001b76:	d925      	bls.n	8001bc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68d9      	ldr	r1, [r3, #12]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b1e      	subs	r3, #30
 8001b8e:	2207      	movs	r2, #7
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43da      	mvns	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68d9      	ldr	r1, [r3, #12]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4403      	add	r3, r0
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	e022      	b.n	8001c0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	2207      	movs	r2, #7
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	400a      	ands	r2, r1
 8001be6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6919      	ldr	r1, [r3, #16]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4403      	add	r3, r0
 8001c00:	409a      	lsls	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d824      	bhi.n	8001c5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3b05      	subs	r3, #5
 8001c24:	221f      	movs	r2, #31
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	400a      	ands	r2, r1
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b05      	subs	r3, #5
 8001c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
 8001c5a:	e04c      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d824      	bhi.n	8001cae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	3b23      	subs	r3, #35	; 0x23
 8001c76:	221f      	movs	r2, #31
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	400a      	ands	r2, r1
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b23      	subs	r3, #35	; 0x23
 8001ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
 8001cac:	e023      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b41      	subs	r3, #65	; 0x41
 8001cc0:	221f      	movs	r2, #31
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	400a      	ands	r2, r1
 8001cce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b41      	subs	r3, #65	; 0x41
 8001cea:	fa00 f203 	lsl.w	r2, r0, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_ADC_ConfigChannel+0x234>)
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_ADC_ConfigChannel+0x238>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d109      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1cc>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b12      	cmp	r3, #18
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_ADC_ConfigChannel+0x238>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d123      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d003      	beq.n	8001d32 <HAL_ADC_ConfigChannel+0x1e6>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b11      	cmp	r3, #17
 8001d30:	d11b      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d111      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_ADC_ConfigChannel+0x23c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_ADC_ConfigChannel+0x240>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	0c9a      	lsrs	r2, r3, #18
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40012300 	.word	0x40012300
 8001d84:	40012000 	.word	0x40012000
 8001d88:	20000030 	.word	0x20000030
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d98:	4b79      	ldr	r3, [pc, #484]	; (8001f80 <ADC_Init+0x1f0>)
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	021a      	lsls	r2, r3, #8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6899      	ldr	r1, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <ADC_Init+0x1f4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d022      	beq.n	8001e6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6899      	ldr	r1, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e00f      	b.n	8001e8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0202 	bic.w	r2, r2, #2
 8001e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7e1b      	ldrb	r3, [r3, #24]
 8001ea8:	005a      	lsls	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	035a      	lsls	r2, r3, #13
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	e007      	b.n	8001f04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f02:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	051a      	lsls	r2, r3, #20
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6899      	ldr	r1, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f46:	025a      	lsls	r2, r3, #9
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	029a      	lsls	r2, r3, #10
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40012300 	.word	0x40012300
 8001f84:	0f000001 	.word	0x0f000001

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff3e 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff8e 	bl	800207c <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff31 	bl	8001fec <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e159      	b.n	800247c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 8148 	bne.w	8002476 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d005      	beq.n	80021fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d130      	bne.n	8002260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 0201 	and.w	r2, r3, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b03      	cmp	r3, #3
 800226a:	d017      	beq.n	800229c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d123      	bne.n	80022f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0203 	and.w	r2, r3, #3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a2 	beq.w	8002476 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b57      	ldr	r3, [pc, #348]	; (8002494 <HAL_GPIO_Init+0x2e8>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a56      	ldr	r2, [pc, #344]	; (8002494 <HAL_GPIO_Init+0x2e8>)
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b54      	ldr	r3, [pc, #336]	; (8002494 <HAL_GPIO_Init+0x2e8>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234e:	4a52      	ldr	r2, [pc, #328]	; (8002498 <HAL_GPIO_Init+0x2ec>)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a49      	ldr	r2, [pc, #292]	; (800249c <HAL_GPIO_Init+0x2f0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d019      	beq.n	80023ae <HAL_GPIO_Init+0x202>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a48      	ldr	r2, [pc, #288]	; (80024a0 <HAL_GPIO_Init+0x2f4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0x1fe>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a47      	ldr	r2, [pc, #284]	; (80024a4 <HAL_GPIO_Init+0x2f8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00d      	beq.n	80023a6 <HAL_GPIO_Init+0x1fa>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a46      	ldr	r2, [pc, #280]	; (80024a8 <HAL_GPIO_Init+0x2fc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x1f6>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a45      	ldr	r2, [pc, #276]	; (80024ac <HAL_GPIO_Init+0x300>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_GPIO_Init+0x1f2>
 800239a:	2304      	movs	r3, #4
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 800239e:	2307      	movs	r3, #7
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x204>
 80023ae:	2300      	movs	r3, #0
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c0:	4935      	ldr	r1, [pc, #212]	; (8002498 <HAL_GPIO_Init+0x2ec>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_GPIO_Init+0x304>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f2:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <HAL_GPIO_Init+0x304>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_GPIO_Init+0x304>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800241c:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <HAL_GPIO_Init+0x304>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_GPIO_Init+0x304>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002446:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_GPIO_Init+0x304>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_GPIO_Init+0x304>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002470:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <HAL_GPIO_Init+0x304>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3301      	adds	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	f67f aea2 	bls.w	80021c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	40013800 	.word	0x40013800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40020400 	.word	0x40020400
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40020c00 	.word	0x40020c00
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40013c00 	.word	0x40013c00

080024b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e001      	b.n	80024d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002500:	e003      	b.n	800250a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	041a      	lsls	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	619a      	str	r2, [r3, #24]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fa52 	bl	80009e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40013c00 	.word	0x40013c00

08002548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e12b      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fc42 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800259a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025ac:	f001 f8aa 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 80025b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a81      	ldr	r2, [pc, #516]	; (80027bc <HAL_I2C_Init+0x274>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d807      	bhi.n	80025cc <HAL_I2C_Init+0x84>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a80      	ldr	r2, [pc, #512]	; (80027c0 <HAL_I2C_Init+0x278>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e006      	b.n	80025da <HAL_I2C_Init+0x92>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a7d      	ldr	r2, [pc, #500]	; (80027c4 <HAL_I2C_Init+0x27c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0e7      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4a78      	ldr	r2, [pc, #480]	; (80027c8 <HAL_I2C_Init+0x280>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0c9b      	lsrs	r3, r3, #18
 80025ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a6a      	ldr	r2, [pc, #424]	; (80027bc <HAL_I2C_Init+0x274>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d802      	bhi.n	800261c <HAL_I2C_Init+0xd4>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	e009      	b.n	8002630 <HAL_I2C_Init+0xe8>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_I2C_Init+0x284>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	3301      	adds	r3, #1
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	430b      	orrs	r3, r1
 8002636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002642:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	495c      	ldr	r1, [pc, #368]	; (80027bc <HAL_I2C_Init+0x274>)
 800264c:	428b      	cmp	r3, r1
 800264e:	d819      	bhi.n	8002684 <HAL_I2C_Init+0x13c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e59      	subs	r1, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fbb1 f3f3 	udiv	r3, r1, r3
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002664:	400b      	ands	r3, r1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_I2C_Init+0x138>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e59      	subs	r1, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fbb1 f3f3 	udiv	r3, r1, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267e:	e051      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002680:	2304      	movs	r3, #4
 8002682:	e04f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d111      	bne.n	80026b0 <HAL_I2C_Init+0x168>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e58      	subs	r0, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e012      	b.n	80026d6 <HAL_I2C_Init+0x18e>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e58      	subs	r0, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	0099      	lsls	r1, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Init+0x196>
 80026da:	2301      	movs	r3, #1
 80026dc:	e022      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10e      	bne.n	8002704 <HAL_I2C_Init+0x1bc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1e58      	subs	r0, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	440b      	add	r3, r1
 80026f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002702:	e00f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	0099      	lsls	r1, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	fbb0 f3f3 	udiv	r3, r0, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	6809      	ldr	r1, [r1, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6911      	ldr	r1, [r2, #16]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	430b      	orrs	r3, r1
 8002766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	000186a0 	.word	0x000186a0
 80027c0:	001e847f 	.word	0x001e847f
 80027c4:	003d08ff 	.word	0x003d08ff
 80027c8:	431bde83 	.word	0x431bde83
 80027cc:	10624dd3 	.word	0x10624dd3

080027d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	817b      	strh	r3, [r7, #10]
 80027e2:	460b      	mov	r3, r1
 80027e4:	813b      	strh	r3, [r7, #8]
 80027e6:	4613      	mov	r3, r2
 80027e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ea:	f7ff f879 	bl	80018e0 <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	f040 80d9 	bne.w	80029b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2319      	movs	r3, #25
 8002804:	2201      	movs	r2, #1
 8002806:	496d      	ldr	r1, [pc, #436]	; (80029bc <HAL_I2C_Mem_Write+0x1ec>)
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f971 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	e0cc      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Mem_Write+0x56>
 8002822:	2302      	movs	r3, #2
 8002824:	e0c5      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d007      	beq.n	800284c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2221      	movs	r2, #33	; 0x21
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a4d      	ldr	r2, [pc, #308]	; (80029c0 <HAL_I2C_Mem_Write+0x1f0>)
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800288e:	88f8      	ldrh	r0, [r7, #6]
 8002890:	893a      	ldrh	r2, [r7, #8]
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4603      	mov	r3, r0
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f890 	bl	80029c4 <I2C_RequestMemoryWrite>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d052      	beq.n	8002950 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e081      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fa36 	bl	8002d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00d      	beq.n	80028da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d107      	bne.n	80028d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06b      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d11b      	bne.n	8002950 <HAL_I2C_Mem_Write+0x180>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d017      	beq.n	8002950 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1aa      	bne.n	80028ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fa29 	bl	8002db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b04      	cmp	r3, #4
 800296e:	d107      	bne.n	8002980 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e016      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	00100002 	.word	0x00100002
 80029c0:	ffff0000 	.word	0xffff0000

080029c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f878 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a14:	d103      	bne.n	8002a1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e05f      	b.n	8002ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	6a3a      	ldr	r2, [r7, #32]
 8002a36:	492d      	ldr	r1, [pc, #180]	; (8002aec <I2C_RequestMemoryWrite+0x128>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f8d3 	bl	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e04c      	b.n	8002ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	6a39      	ldr	r1, [r7, #32]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f95e 	bl	8002d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00d      	beq.n	8002a8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d107      	bne.n	8002a86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e02b      	b.n	8002ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d105      	bne.n	8002a9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a90:	893b      	ldrh	r3, [r7, #8]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]
 8002a9a:	e021      	b.n	8002ae0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a9c:	893b      	ldrh	r3, [r7, #8]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f938 	bl	8002d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e005      	b.n	8002ae2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad6:	893b      	ldrh	r3, [r7, #8]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	00010002 	.word	0x00010002

08002af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b00:	e048      	b.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b08:	d044      	beq.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7fe fee9 	bl	80018e0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d139      	bne.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d10d      	bne.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	43da      	mvns	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4013      	ands	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	e00c      	b.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d116      	bne.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e023      	b.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	0c1b      	lsrs	r3, r3, #16
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10d      	bne.n	8002bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	e00c      	b.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d093      	beq.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf2:	e071      	b.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c02:	d123      	bne.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0204 	orr.w	r2, r3, #4
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e067      	b.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c52:	d041      	beq.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c54:	f7fe fe44 	bl	80018e0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d302      	bcc.n	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d136      	bne.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10c      	bne.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	e00b      	b.n	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e021      	b.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10c      	bne.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e00b      	b.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4013      	ands	r3, r2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f47f af6d 	bne.w	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d30:	e034      	b.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f886 	bl	8002e44 <I2C_IsAcknowledgeFailed>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e034      	b.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d48:	d028      	beq.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fe fdc9 	bl	80018e0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d11d      	bne.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b80      	cmp	r3, #128	; 0x80
 8002d6c:	d016      	beq.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e007      	b.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b80      	cmp	r3, #128	; 0x80
 8002da8:	d1c3      	bne.n	8002d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc0:	e034      	b.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f83e 	bl	8002e44 <I2C_IsAcknowledgeFailed>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e034      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d028      	beq.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7fe fd81 	bl	80018e0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11d      	bne.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d016      	beq.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e007      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d1c3      	bne.n	8002dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5a:	d11b      	bne.n	8002e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f043 0204 	orr.w	r2, r3, #4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e267      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d075      	beq.n	8002fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ec2:	4b88      	ldr	r3, [pc, #544]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d00c      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ece:	4b85      	ldr	r3, [pc, #532]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d112      	bne.n	8002f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eda:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee6:	d10b      	bne.n	8002f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	4b7e      	ldr	r3, [pc, #504]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d05b      	beq.n	8002fac <HAL_RCC_OscConfig+0x108>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d157      	bne.n	8002fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e242      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f08:	d106      	bne.n	8002f18 <HAL_RCC_OscConfig+0x74>
 8002f0a:	4b76      	ldr	r3, [pc, #472]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a75      	ldr	r2, [pc, #468]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e01d      	b.n	8002f54 <HAL_RCC_OscConfig+0xb0>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x98>
 8002f22:	4b70      	ldr	r3, [pc, #448]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6f      	ldr	r2, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b6d      	ldr	r3, [pc, #436]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6c      	ldr	r2, [pc, #432]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0xb0>
 8002f3c:	4b69      	ldr	r3, [pc, #420]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a68      	ldr	r2, [pc, #416]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a65      	ldr	r2, [pc, #404]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fcc0 	bl	80018e0 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fcbc 	bl	80018e0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e207      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0xc0>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fcac 	bl	80018e0 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fca8 	bl	80018e0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e1f3      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	4b51      	ldr	r3, [pc, #324]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0xe8>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d063      	beq.n	8003082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00b      	beq.n	8002fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d11c      	bne.n	800300c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd2:	4b44      	ldr	r3, [pc, #272]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d116      	bne.n	800300c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fde:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x152>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d001      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e1c7      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4937      	ldr	r1, [pc, #220]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	e03a      	b.n	8003082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003014:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <HAL_RCC_OscConfig+0x244>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7fe fc61 	bl	80018e0 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003022:	f7fe fc5d 	bl	80018e0 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1a8      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003040:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4925      	ldr	r1, [pc, #148]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003050:	4313      	orrs	r3, r2
 8003052:	600b      	str	r3, [r1, #0]
 8003054:	e015      	b.n	8003082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003056:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCC_OscConfig+0x244>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fc40 	bl	80018e0 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003064:	f7fe fc3c 	bl	80018e0 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e187      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d036      	beq.n	80030fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_RCC_OscConfig+0x248>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe fc20 	bl	80018e0 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a4:	f7fe fc1c 	bl	80018e0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e167      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_OscConfig+0x240>)
 80030b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x200>
 80030c2:	e01b      	b.n	80030fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_OscConfig+0x248>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fc09 	bl	80018e0 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	e00e      	b.n	80030f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fe fc05 	bl	80018e0 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d907      	bls.n	80030f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e150      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
 80030e4:	40023800 	.word	0x40023800
 80030e8:	42470000 	.word	0x42470000
 80030ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	4b88      	ldr	r3, [pc, #544]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ea      	bne.n	80030d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 8097 	beq.w	8003238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310e:	4b81      	ldr	r3, [pc, #516]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	4b7d      	ldr	r3, [pc, #500]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a7c      	ldr	r2, [pc, #496]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
 800312a:	4b7a      	ldr	r3, [pc, #488]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003136:	2301      	movs	r3, #1
 8003138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313a:	4b77      	ldr	r3, [pc, #476]	; (8003318 <HAL_RCC_OscConfig+0x474>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d118      	bne.n	8003178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003146:	4b74      	ldr	r3, [pc, #464]	; (8003318 <HAL_RCC_OscConfig+0x474>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a73      	ldr	r2, [pc, #460]	; (8003318 <HAL_RCC_OscConfig+0x474>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003152:	f7fe fbc5 	bl	80018e0 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315a:	f7fe fbc1 	bl	80018e0 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e10c      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	4b6a      	ldr	r3, [pc, #424]	; (8003318 <HAL_RCC_OscConfig+0x474>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d106      	bne.n	800318e <HAL_RCC_OscConfig+0x2ea>
 8003180:	4b64      	ldr	r3, [pc, #400]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003184:	4a63      	ldr	r2, [pc, #396]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6713      	str	r3, [r2, #112]	; 0x70
 800318c:	e01c      	b.n	80031c8 <HAL_RCC_OscConfig+0x324>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b05      	cmp	r3, #5
 8003194:	d10c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x30c>
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a5e      	ldr	r2, [pc, #376]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 800319c:	f043 0304 	orr.w	r3, r3, #4
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	4a5b      	ldr	r2, [pc, #364]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70
 80031ae:	e00b      	b.n	80031c8 <HAL_RCC_OscConfig+0x324>
 80031b0:	4b58      	ldr	r3, [pc, #352]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a57      	ldr	r2, [pc, #348]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	6713      	str	r3, [r2, #112]	; 0x70
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	4a54      	ldr	r2, [pc, #336]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f023 0304 	bic.w	r3, r3, #4
 80031c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d015      	beq.n	80031fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d0:	f7fe fb86 	bl	80018e0 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fe fb82 	bl	80018e0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e0cb      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ee:	4b49      	ldr	r3, [pc, #292]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0ee      	beq.n	80031d8 <HAL_RCC_OscConfig+0x334>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fc:	f7fe fb70 	bl	80018e0 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fe fb6c 	bl	80018e0 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0b5      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321a:	4b3e      	ldr	r3, [pc, #248]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1ee      	bne.n	8003204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003226:	7dfb      	ldrb	r3, [r7, #23]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d105      	bne.n	8003238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322c:	4b39      	ldr	r3, [pc, #228]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	4a38      	ldr	r2, [pc, #224]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 8003232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003236:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80a1 	beq.w	8003384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003242:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b08      	cmp	r3, #8
 800324c:	d05c      	beq.n	8003308 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d141      	bne.n	80032da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCC_OscConfig+0x478>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe fb40 	bl	80018e0 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe fb3c 	bl	80018e0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e087      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	019b      	lsls	r3, r3, #6
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	3b01      	subs	r3, #1
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	491b      	ldr	r1, [pc, #108]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ac:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x478>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fe fb15 	bl	80018e0 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fe fb11 	bl	80018e0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e05c      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x416>
 80032d8:	e054      	b.n	8003384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_RCC_OscConfig+0x478>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fafe 	bl	80018e0 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe fafa 	bl	80018e0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e045      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_OscConfig+0x470>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x444>
 8003306:	e03d      	b.n	8003384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e038      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
 8003314:	40023800 	.word	0x40023800
 8003318:	40007000 	.word	0x40007000
 800331c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_RCC_OscConfig+0x4ec>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d028      	beq.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d121      	bne.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d11a      	bne.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003358:	4293      	cmp	r3, r2
 800335a:	d111      	bne.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	3b01      	subs	r3, #1
 800336a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d107      	bne.n	8003380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800

08003394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0cc      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b68      	ldr	r3, [pc, #416]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d90c      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b65      	ldr	r3, [pc, #404]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b63      	ldr	r3, [pc, #396]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0b8      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e8:	4b59      	ldr	r3, [pc, #356]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4a58      	ldr	r2, [pc, #352]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003400:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a52      	ldr	r2, [pc, #328]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800340a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b50      	ldr	r3, [pc, #320]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	494d      	ldr	r1, [pc, #308]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d044      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d119      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e07f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d003      	beq.n	8003452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344e:	2b03      	cmp	r3, #3
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e06f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003462:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e067      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003472:	4b37      	ldr	r3, [pc, #220]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 0203 	bic.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4934      	ldr	r1, [pc, #208]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	4313      	orrs	r3, r2
 8003482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003484:	f7fe fa2c 	bl	80018e0 <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348c:	f7fe fa28 	bl	80018e0 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e04f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 020c 	and.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1eb      	bne.n	800348c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d20c      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b20      	ldr	r3, [pc, #128]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e032      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4916      	ldr	r1, [pc, #88]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	490e      	ldr	r1, [pc, #56]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800351a:	f000 f821 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 800351e:	4602      	mov	r2, r0
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	490a      	ldr	r1, [pc, #40]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	5ccb      	ldrb	r3, [r1, r3]
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe f98c 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023c00 	.word	0x40023c00
 8003550:	40023800 	.word	0x40023800
 8003554:	08004724 	.word	0x08004724
 8003558:	20000030 	.word	0x20000030
 800355c:	20000034 	.word	0x20000034

08003560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003564:	b090      	sub	sp, #64	; 0x40
 8003566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
 800356c:	2300      	movs	r3, #0
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003570:	2300      	movs	r3, #0
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003578:	4b59      	ldr	r3, [pc, #356]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d00d      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003584:	2b08      	cmp	r3, #8
 8003586:	f200 80a1 	bhi.w	80036cc <HAL_RCC_GetSysClockFreq+0x16c>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x34>
 800358e:	2b04      	cmp	r3, #4
 8003590:	d003      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x3a>
 8003592:	e09b      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003596:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003598:	e09b      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800359a:	4b53      	ldr	r3, [pc, #332]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800359e:	e098      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a0:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035aa:	4b4d      	ldr	r3, [pc, #308]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d028      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b6:	4b4a      	ldr	r3, [pc, #296]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	099b      	lsrs	r3, r3, #6
 80035bc:	2200      	movs	r2, #0
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	627a      	str	r2, [r7, #36]	; 0x24
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035c8:	2100      	movs	r1, #0
 80035ca:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035cc:	fb03 f201 	mul.w	r2, r3, r1
 80035d0:	2300      	movs	r3, #0
 80035d2:	fb00 f303 	mul.w	r3, r0, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	4a43      	ldr	r2, [pc, #268]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035da:	fba0 1202 	umull	r1, r2, r0, r2
 80035de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e0:	460a      	mov	r2, r1
 80035e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80035e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e6:	4413      	add	r3, r2
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ec:	2200      	movs	r2, #0
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	61fa      	str	r2, [r7, #28]
 80035f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035fa:	f7fc fe41 	bl	8000280 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4613      	mov	r3, r2
 8003604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003606:	e053      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	2200      	movs	r2, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	617a      	str	r2, [r7, #20]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800361a:	f04f 0b00 	mov.w	fp, #0
 800361e:	4652      	mov	r2, sl
 8003620:	465b      	mov	r3, fp
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	0159      	lsls	r1, r3, #5
 800362c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003630:	0150      	lsls	r0, r2, #5
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	ebb2 080a 	subs.w	r8, r2, sl
 800363a:	eb63 090b 	sbc.w	r9, r3, fp
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800364a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800364e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003652:	ebb2 0408 	subs.w	r4, r2, r8
 8003656:	eb63 0509 	sbc.w	r5, r3, r9
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	00eb      	lsls	r3, r5, #3
 8003664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003668:	00e2      	lsls	r2, r4, #3
 800366a:	4614      	mov	r4, r2
 800366c:	461d      	mov	r5, r3
 800366e:	eb14 030a 	adds.w	r3, r4, sl
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	eb45 030b 	adc.w	r3, r5, fp
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003686:	4629      	mov	r1, r5
 8003688:	028b      	lsls	r3, r1, #10
 800368a:	4621      	mov	r1, r4
 800368c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003690:	4621      	mov	r1, r4
 8003692:	028a      	lsls	r2, r1, #10
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369a:	2200      	movs	r2, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	60fa      	str	r2, [r7, #12]
 80036a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a4:	f7fc fdec 	bl	8000280 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3740      	adds	r7, #64	; 0x40
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	017d7840 	.word	0x017d7840

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000030 	.word	0x20000030

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a9b      	lsrs	r3, r3, #10
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	08004734 	.word	0x08004734

0800372c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e041      	b.n	80037c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd fb98 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 f976 	bl	8003a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d001      	beq.n	80037e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e03c      	b.n	800385e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_TIM_Base_Start+0xa0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d018      	beq.n	8003828 <HAL_TIM_Base_Start+0x5c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d013      	beq.n	8003828 <HAL_TIM_Base_Start+0x5c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <HAL_TIM_Base_Start+0xa4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00e      	beq.n	8003828 <HAL_TIM_Base_Start+0x5c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_TIM_Base_Start+0xa8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d009      	beq.n	8003828 <HAL_TIM_Base_Start+0x5c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a17      	ldr	r2, [pc, #92]	; (8003878 <HAL_TIM_Base_Start+0xac>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_TIM_Base_Start+0x5c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a16      	ldr	r2, [pc, #88]	; (800387c <HAL_TIM_Base_Start+0xb0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d111      	bne.n	800384c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d010      	beq.n	800385c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	e007      	b.n	800385c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800
 8003878:	40000c00 	.word	0x40000c00
 800387c:	40014000 	.word	0x40014000

08003880 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10f      	bne.n	80038b8 <HAL_TIM_Base_Stop+0x38>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a1a      	ldr	r2, [r3, #32]
 800389e:	f240 4344 	movw	r3, #1092	; 0x444
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d107      	bne.n	80038b8 <HAL_TIM_Base_Stop+0x38>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_ConfigClockSource+0x1c>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e0b4      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x186>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003908:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003910:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003922:	d03e      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0xd4>
 8003924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003928:	f200 8087 	bhi.w	8003a3a <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003930:	f000 8086 	beq.w	8003a40 <HAL_TIM_ConfigClockSource+0x172>
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	d87f      	bhi.n	8003a3a <HAL_TIM_ConfigClockSource+0x16c>
 800393a:	2b70      	cmp	r3, #112	; 0x70
 800393c:	d01a      	beq.n	8003974 <HAL_TIM_ConfigClockSource+0xa6>
 800393e:	2b70      	cmp	r3, #112	; 0x70
 8003940:	d87b      	bhi.n	8003a3a <HAL_TIM_ConfigClockSource+0x16c>
 8003942:	2b60      	cmp	r3, #96	; 0x60
 8003944:	d050      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x11a>
 8003946:	2b60      	cmp	r3, #96	; 0x60
 8003948:	d877      	bhi.n	8003a3a <HAL_TIM_ConfigClockSource+0x16c>
 800394a:	2b50      	cmp	r3, #80	; 0x50
 800394c:	d03c      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0xfa>
 800394e:	2b50      	cmp	r3, #80	; 0x50
 8003950:	d873      	bhi.n	8003a3a <HAL_TIM_ConfigClockSource+0x16c>
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d058      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0x13a>
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d86f      	bhi.n	8003a3a <HAL_TIM_ConfigClockSource+0x16c>
 800395a:	2b30      	cmp	r3, #48	; 0x30
 800395c:	d064      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x15a>
 800395e:	2b30      	cmp	r3, #48	; 0x30
 8003960:	d86b      	bhi.n	8003a3a <HAL_TIM_ConfigClockSource+0x16c>
 8003962:	2b20      	cmp	r3, #32
 8003964:	d060      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x15a>
 8003966:	2b20      	cmp	r3, #32
 8003968:	d867      	bhi.n	8003a3a <HAL_TIM_ConfigClockSource+0x16c>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d05c      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x15a>
 800396e:	2b10      	cmp	r3, #16
 8003970:	d05a      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x15a>
 8003972:	e062      	b.n	8003a3a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003984:	f000 f970 	bl	8003c68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003996:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	609a      	str	r2, [r3, #8]
      break;
 80039a0:	e04f      	b.n	8003a42 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039b2:	f000 f959 	bl	8003c68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039c4:	609a      	str	r2, [r3, #8]
      break;
 80039c6:	e03c      	b.n	8003a42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d4:	461a      	mov	r2, r3
 80039d6:	f000 f8cd 	bl	8003b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2150      	movs	r1, #80	; 0x50
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f926 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039e6:	e02c      	b.n	8003a42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039f4:	461a      	mov	r2, r3
 80039f6:	f000 f8ec 	bl	8003bd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2160      	movs	r1, #96	; 0x60
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f916 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a06:	e01c      	b.n	8003a42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a14:	461a      	mov	r2, r3
 8003a16:	f000 f8ad 	bl	8003b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f906 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a26:	e00c      	b.n	8003a42 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 f8fd 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a38:	e003      	b.n	8003a42 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3e:	e000      	b.n	8003a42 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <TIM_Base_SetConfig+0xfc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00f      	beq.n	8003a94 <TIM_Base_SetConfig+0x38>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d00b      	beq.n	8003a94 <TIM_Base_SetConfig+0x38>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a37      	ldr	r2, [pc, #220]	; (8003b5c <TIM_Base_SetConfig+0x100>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_Base_SetConfig+0x38>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a36      	ldr	r2, [pc, #216]	; (8003b60 <TIM_Base_SetConfig+0x104>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0x38>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a35      	ldr	r2, [pc, #212]	; (8003b64 <TIM_Base_SetConfig+0x108>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d108      	bne.n	8003aa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2b      	ldr	r2, [pc, #172]	; (8003b58 <TIM_Base_SetConfig+0xfc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01b      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d017      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <TIM_Base_SetConfig+0x100>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <TIM_Base_SetConfig+0x104>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <TIM_Base_SetConfig+0x108>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <TIM_Base_SetConfig+0x10c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <TIM_Base_SetConfig+0x110>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_Base_SetConfig+0x8a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <TIM_Base_SetConfig+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <TIM_Base_SetConfig+0xfc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d103      	bne.n	8003b2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f023 0201 	bic.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40014800 	.word	0x40014800

08003b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0201 	bic.w	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 030a 	bic.w	r3, r3, #10
 8003bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 0210 	bic.w	r2, r3, #16
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	031b      	lsls	r3, r3, #12
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f043 0307 	orr.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e050      	b.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d013      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a15      	ldr	r2, [pc, #84]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10c      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40014000 	.word	0x40014000

08003d84 <siprintf>:
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	b500      	push	{lr}
 8003d88:	b09c      	sub	sp, #112	; 0x70
 8003d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d8c:	9002      	str	r0, [sp, #8]
 8003d8e:	9006      	str	r0, [sp, #24]
 8003d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d94:	4809      	ldr	r0, [pc, #36]	; (8003dbc <siprintf+0x38>)
 8003d96:	9107      	str	r1, [sp, #28]
 8003d98:	9104      	str	r1, [sp, #16]
 8003d9a:	4909      	ldr	r1, [pc, #36]	; (8003dc0 <siprintf+0x3c>)
 8003d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	a902      	add	r1, sp, #8
 8003da8:	f000 f9ba 	bl	8004120 <_svfiprintf_r>
 8003dac:	9b02      	ldr	r3, [sp, #8]
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	b01c      	add	sp, #112	; 0x70
 8003db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db8:	b003      	add	sp, #12
 8003dba:	4770      	bx	lr
 8003dbc:	20000088 	.word	0x20000088
 8003dc0:	ffff0208 	.word	0xffff0208

08003dc4 <memmove>:
 8003dc4:	4288      	cmp	r0, r1
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	eb01 0402 	add.w	r4, r1, r2
 8003dcc:	d902      	bls.n	8003dd4 <memmove+0x10>
 8003dce:	4284      	cmp	r4, r0
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	d807      	bhi.n	8003de4 <memmove+0x20>
 8003dd4:	1e43      	subs	r3, r0, #1
 8003dd6:	42a1      	cmp	r1, r4
 8003dd8:	d008      	beq.n	8003dec <memmove+0x28>
 8003dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003de2:	e7f8      	b.n	8003dd6 <memmove+0x12>
 8003de4:	4402      	add	r2, r0
 8003de6:	4601      	mov	r1, r0
 8003de8:	428a      	cmp	r2, r1
 8003dea:	d100      	bne.n	8003dee <memmove+0x2a>
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003df6:	e7f7      	b.n	8003de8 <memmove+0x24>

08003df8 <memset>:
 8003df8:	4402      	add	r2, r0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d100      	bne.n	8003e02 <memset+0xa>
 8003e00:	4770      	bx	lr
 8003e02:	f803 1b01 	strb.w	r1, [r3], #1
 8003e06:	e7f9      	b.n	8003dfc <memset+0x4>

08003e08 <__errno>:
 8003e08:	4b01      	ldr	r3, [pc, #4]	; (8003e10 <__errno+0x8>)
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20000088 	.word	0x20000088

08003e14 <__libc_init_array>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	4d0d      	ldr	r5, [pc, #52]	; (8003e4c <__libc_init_array+0x38>)
 8003e18:	4c0d      	ldr	r4, [pc, #52]	; (8003e50 <__libc_init_array+0x3c>)
 8003e1a:	1b64      	subs	r4, r4, r5
 8003e1c:	10a4      	asrs	r4, r4, #2
 8003e1e:	2600      	movs	r6, #0
 8003e20:	42a6      	cmp	r6, r4
 8003e22:	d109      	bne.n	8003e38 <__libc_init_array+0x24>
 8003e24:	4d0b      	ldr	r5, [pc, #44]	; (8003e54 <__libc_init_array+0x40>)
 8003e26:	4c0c      	ldr	r4, [pc, #48]	; (8003e58 <__libc_init_array+0x44>)
 8003e28:	f000 fc50 	bl	80046cc <_init>
 8003e2c:	1b64      	subs	r4, r4, r5
 8003e2e:	10a4      	asrs	r4, r4, #2
 8003e30:	2600      	movs	r6, #0
 8003e32:	42a6      	cmp	r6, r4
 8003e34:	d105      	bne.n	8003e42 <__libc_init_array+0x2e>
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
 8003e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3c:	4798      	blx	r3
 8003e3e:	3601      	adds	r6, #1
 8003e40:	e7ee      	b.n	8003e20 <__libc_init_array+0xc>
 8003e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e46:	4798      	blx	r3
 8003e48:	3601      	adds	r6, #1
 8003e4a:	e7f2      	b.n	8003e32 <__libc_init_array+0x1e>
 8003e4c:	08004ef0 	.word	0x08004ef0
 8003e50:	08004ef0 	.word	0x08004ef0
 8003e54:	08004ef0 	.word	0x08004ef0
 8003e58:	08004ef4 	.word	0x08004ef4

08003e5c <__retarget_lock_acquire_recursive>:
 8003e5c:	4770      	bx	lr

08003e5e <__retarget_lock_release_recursive>:
 8003e5e:	4770      	bx	lr

08003e60 <memcpy>:
 8003e60:	440a      	add	r2, r1
 8003e62:	4291      	cmp	r1, r2
 8003e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e68:	d100      	bne.n	8003e6c <memcpy+0xc>
 8003e6a:	4770      	bx	lr
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e76:	4291      	cmp	r1, r2
 8003e78:	d1f9      	bne.n	8003e6e <memcpy+0xe>
 8003e7a:	bd10      	pop	{r4, pc}

08003e7c <_free_r>:
 8003e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	d044      	beq.n	8003f0c <_free_r+0x90>
 8003e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e86:	9001      	str	r0, [sp, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e8e:	bfb8      	it	lt
 8003e90:	18e4      	addlt	r4, r4, r3
 8003e92:	f000 f8df 	bl	8004054 <__malloc_lock>
 8003e96:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <_free_r+0x94>)
 8003e98:	9801      	ldr	r0, [sp, #4]
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	b933      	cbnz	r3, 8003eac <_free_r+0x30>
 8003e9e:	6063      	str	r3, [r4, #4]
 8003ea0:	6014      	str	r4, [r2, #0]
 8003ea2:	b003      	add	sp, #12
 8003ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ea8:	f000 b8da 	b.w	8004060 <__malloc_unlock>
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d908      	bls.n	8003ec2 <_free_r+0x46>
 8003eb0:	6825      	ldr	r5, [r4, #0]
 8003eb2:	1961      	adds	r1, r4, r5
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	bf01      	itttt	eq
 8003eb8:	6819      	ldreq	r1, [r3, #0]
 8003eba:	685b      	ldreq	r3, [r3, #4]
 8003ebc:	1949      	addeq	r1, r1, r5
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	e7ed      	b.n	8003e9e <_free_r+0x22>
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b10b      	cbz	r3, 8003ecc <_free_r+0x50>
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	d9fa      	bls.n	8003ec2 <_free_r+0x46>
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	1855      	adds	r5, r2, r1
 8003ed0:	42a5      	cmp	r5, r4
 8003ed2:	d10b      	bne.n	8003eec <_free_r+0x70>
 8003ed4:	6824      	ldr	r4, [r4, #0]
 8003ed6:	4421      	add	r1, r4
 8003ed8:	1854      	adds	r4, r2, r1
 8003eda:	42a3      	cmp	r3, r4
 8003edc:	6011      	str	r1, [r2, #0]
 8003ede:	d1e0      	bne.n	8003ea2 <_free_r+0x26>
 8003ee0:	681c      	ldr	r4, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	6053      	str	r3, [r2, #4]
 8003ee6:	440c      	add	r4, r1
 8003ee8:	6014      	str	r4, [r2, #0]
 8003eea:	e7da      	b.n	8003ea2 <_free_r+0x26>
 8003eec:	d902      	bls.n	8003ef4 <_free_r+0x78>
 8003eee:	230c      	movs	r3, #12
 8003ef0:	6003      	str	r3, [r0, #0]
 8003ef2:	e7d6      	b.n	8003ea2 <_free_r+0x26>
 8003ef4:	6825      	ldr	r5, [r4, #0]
 8003ef6:	1961      	adds	r1, r4, r5
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	bf04      	itt	eq
 8003efc:	6819      	ldreq	r1, [r3, #0]
 8003efe:	685b      	ldreq	r3, [r3, #4]
 8003f00:	6063      	str	r3, [r4, #4]
 8003f02:	bf04      	itt	eq
 8003f04:	1949      	addeq	r1, r1, r5
 8003f06:	6021      	streq	r1, [r4, #0]
 8003f08:	6054      	str	r4, [r2, #4]
 8003f0a:	e7ca      	b.n	8003ea2 <_free_r+0x26>
 8003f0c:	b003      	add	sp, #12
 8003f0e:	bd30      	pop	{r4, r5, pc}
 8003f10:	20000510 	.word	0x20000510

08003f14 <sbrk_aligned>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	4e0e      	ldr	r6, [pc, #56]	; (8003f50 <sbrk_aligned+0x3c>)
 8003f18:	460c      	mov	r4, r1
 8003f1a:	6831      	ldr	r1, [r6, #0]
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	b911      	cbnz	r1, 8003f26 <sbrk_aligned+0x12>
 8003f20:	f000 fb8c 	bl	800463c <_sbrk_r>
 8003f24:	6030      	str	r0, [r6, #0]
 8003f26:	4621      	mov	r1, r4
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 fb87 	bl	800463c <_sbrk_r>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	d00a      	beq.n	8003f48 <sbrk_aligned+0x34>
 8003f32:	1cc4      	adds	r4, r0, #3
 8003f34:	f024 0403 	bic.w	r4, r4, #3
 8003f38:	42a0      	cmp	r0, r4
 8003f3a:	d007      	beq.n	8003f4c <sbrk_aligned+0x38>
 8003f3c:	1a21      	subs	r1, r4, r0
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f000 fb7c 	bl	800463c <_sbrk_r>
 8003f44:	3001      	adds	r0, #1
 8003f46:	d101      	bne.n	8003f4c <sbrk_aligned+0x38>
 8003f48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	20000514 	.word	0x20000514

08003f54 <_malloc_r>:
 8003f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f58:	1ccd      	adds	r5, r1, #3
 8003f5a:	f025 0503 	bic.w	r5, r5, #3
 8003f5e:	3508      	adds	r5, #8
 8003f60:	2d0c      	cmp	r5, #12
 8003f62:	bf38      	it	cc
 8003f64:	250c      	movcc	r5, #12
 8003f66:	2d00      	cmp	r5, #0
 8003f68:	4607      	mov	r7, r0
 8003f6a:	db01      	blt.n	8003f70 <_malloc_r+0x1c>
 8003f6c:	42a9      	cmp	r1, r5
 8003f6e:	d905      	bls.n	8003f7c <_malloc_r+0x28>
 8003f70:	230c      	movs	r3, #12
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	2600      	movs	r6, #0
 8003f76:	4630      	mov	r0, r6
 8003f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004050 <_malloc_r+0xfc>
 8003f80:	f000 f868 	bl	8004054 <__malloc_lock>
 8003f84:	f8d8 3000 	ldr.w	r3, [r8]
 8003f88:	461c      	mov	r4, r3
 8003f8a:	bb5c      	cbnz	r4, 8003fe4 <_malloc_r+0x90>
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	4638      	mov	r0, r7
 8003f90:	f7ff ffc0 	bl	8003f14 <sbrk_aligned>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	4604      	mov	r4, r0
 8003f98:	d155      	bne.n	8004046 <_malloc_r+0xf2>
 8003f9a:	f8d8 4000 	ldr.w	r4, [r8]
 8003f9e:	4626      	mov	r6, r4
 8003fa0:	2e00      	cmp	r6, #0
 8003fa2:	d145      	bne.n	8004030 <_malloc_r+0xdc>
 8003fa4:	2c00      	cmp	r4, #0
 8003fa6:	d048      	beq.n	800403a <_malloc_r+0xe6>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	4631      	mov	r1, r6
 8003fac:	4638      	mov	r0, r7
 8003fae:	eb04 0903 	add.w	r9, r4, r3
 8003fb2:	f000 fb43 	bl	800463c <_sbrk_r>
 8003fb6:	4581      	cmp	r9, r0
 8003fb8:	d13f      	bne.n	800403a <_malloc_r+0xe6>
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	1a6d      	subs	r5, r5, r1
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	f7ff ffa7 	bl	8003f14 <sbrk_aligned>
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d037      	beq.n	800403a <_malloc_r+0xe6>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	442b      	add	r3, r5
 8003fce:	6023      	str	r3, [r4, #0]
 8003fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d038      	beq.n	800404a <_malloc_r+0xf6>
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	42a2      	cmp	r2, r4
 8003fdc:	d12b      	bne.n	8004036 <_malloc_r+0xe2>
 8003fde:	2200      	movs	r2, #0
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	e00f      	b.n	8004004 <_malloc_r+0xb0>
 8003fe4:	6822      	ldr	r2, [r4, #0]
 8003fe6:	1b52      	subs	r2, r2, r5
 8003fe8:	d41f      	bmi.n	800402a <_malloc_r+0xd6>
 8003fea:	2a0b      	cmp	r2, #11
 8003fec:	d917      	bls.n	800401e <_malloc_r+0xca>
 8003fee:	1961      	adds	r1, r4, r5
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	6025      	str	r5, [r4, #0]
 8003ff4:	bf18      	it	ne
 8003ff6:	6059      	strne	r1, [r3, #4]
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	bf08      	it	eq
 8003ffc:	f8c8 1000 	streq.w	r1, [r8]
 8004000:	5162      	str	r2, [r4, r5]
 8004002:	604b      	str	r3, [r1, #4]
 8004004:	4638      	mov	r0, r7
 8004006:	f104 060b 	add.w	r6, r4, #11
 800400a:	f000 f829 	bl	8004060 <__malloc_unlock>
 800400e:	f026 0607 	bic.w	r6, r6, #7
 8004012:	1d23      	adds	r3, r4, #4
 8004014:	1af2      	subs	r2, r6, r3
 8004016:	d0ae      	beq.n	8003f76 <_malloc_r+0x22>
 8004018:	1b9b      	subs	r3, r3, r6
 800401a:	50a3      	str	r3, [r4, r2]
 800401c:	e7ab      	b.n	8003f76 <_malloc_r+0x22>
 800401e:	42a3      	cmp	r3, r4
 8004020:	6862      	ldr	r2, [r4, #4]
 8004022:	d1dd      	bne.n	8003fe0 <_malloc_r+0x8c>
 8004024:	f8c8 2000 	str.w	r2, [r8]
 8004028:	e7ec      	b.n	8004004 <_malloc_r+0xb0>
 800402a:	4623      	mov	r3, r4
 800402c:	6864      	ldr	r4, [r4, #4]
 800402e:	e7ac      	b.n	8003f8a <_malloc_r+0x36>
 8004030:	4634      	mov	r4, r6
 8004032:	6876      	ldr	r6, [r6, #4]
 8004034:	e7b4      	b.n	8003fa0 <_malloc_r+0x4c>
 8004036:	4613      	mov	r3, r2
 8004038:	e7cc      	b.n	8003fd4 <_malloc_r+0x80>
 800403a:	230c      	movs	r3, #12
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4638      	mov	r0, r7
 8004040:	f000 f80e 	bl	8004060 <__malloc_unlock>
 8004044:	e797      	b.n	8003f76 <_malloc_r+0x22>
 8004046:	6025      	str	r5, [r4, #0]
 8004048:	e7dc      	b.n	8004004 <_malloc_r+0xb0>
 800404a:	605b      	str	r3, [r3, #4]
 800404c:	deff      	udf	#255	; 0xff
 800404e:	bf00      	nop
 8004050:	20000510 	.word	0x20000510

08004054 <__malloc_lock>:
 8004054:	4801      	ldr	r0, [pc, #4]	; (800405c <__malloc_lock+0x8>)
 8004056:	f7ff bf01 	b.w	8003e5c <__retarget_lock_acquire_recursive>
 800405a:	bf00      	nop
 800405c:	2000050c 	.word	0x2000050c

08004060 <__malloc_unlock>:
 8004060:	4801      	ldr	r0, [pc, #4]	; (8004068 <__malloc_unlock+0x8>)
 8004062:	f7ff befc 	b.w	8003e5e <__retarget_lock_release_recursive>
 8004066:	bf00      	nop
 8004068:	2000050c 	.word	0x2000050c

0800406c <__ssputs_r>:
 800406c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	688e      	ldr	r6, [r1, #8]
 8004072:	461f      	mov	r7, r3
 8004074:	42be      	cmp	r6, r7
 8004076:	680b      	ldr	r3, [r1, #0]
 8004078:	4682      	mov	sl, r0
 800407a:	460c      	mov	r4, r1
 800407c:	4690      	mov	r8, r2
 800407e:	d82c      	bhi.n	80040da <__ssputs_r+0x6e>
 8004080:	898a      	ldrh	r2, [r1, #12]
 8004082:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004086:	d026      	beq.n	80040d6 <__ssputs_r+0x6a>
 8004088:	6965      	ldr	r5, [r4, #20]
 800408a:	6909      	ldr	r1, [r1, #16]
 800408c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004090:	eba3 0901 	sub.w	r9, r3, r1
 8004094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004098:	1c7b      	adds	r3, r7, #1
 800409a:	444b      	add	r3, r9
 800409c:	106d      	asrs	r5, r5, #1
 800409e:	429d      	cmp	r5, r3
 80040a0:	bf38      	it	cc
 80040a2:	461d      	movcc	r5, r3
 80040a4:	0553      	lsls	r3, r2, #21
 80040a6:	d527      	bpl.n	80040f8 <__ssputs_r+0x8c>
 80040a8:	4629      	mov	r1, r5
 80040aa:	f7ff ff53 	bl	8003f54 <_malloc_r>
 80040ae:	4606      	mov	r6, r0
 80040b0:	b360      	cbz	r0, 800410c <__ssputs_r+0xa0>
 80040b2:	6921      	ldr	r1, [r4, #16]
 80040b4:	464a      	mov	r2, r9
 80040b6:	f7ff fed3 	bl	8003e60 <memcpy>
 80040ba:	89a3      	ldrh	r3, [r4, #12]
 80040bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	6126      	str	r6, [r4, #16]
 80040c8:	6165      	str	r5, [r4, #20]
 80040ca:	444e      	add	r6, r9
 80040cc:	eba5 0509 	sub.w	r5, r5, r9
 80040d0:	6026      	str	r6, [r4, #0]
 80040d2:	60a5      	str	r5, [r4, #8]
 80040d4:	463e      	mov	r6, r7
 80040d6:	42be      	cmp	r6, r7
 80040d8:	d900      	bls.n	80040dc <__ssputs_r+0x70>
 80040da:	463e      	mov	r6, r7
 80040dc:	6820      	ldr	r0, [r4, #0]
 80040de:	4632      	mov	r2, r6
 80040e0:	4641      	mov	r1, r8
 80040e2:	f7ff fe6f 	bl	8003dc4 <memmove>
 80040e6:	68a3      	ldr	r3, [r4, #8]
 80040e8:	1b9b      	subs	r3, r3, r6
 80040ea:	60a3      	str	r3, [r4, #8]
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	4433      	add	r3, r6
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	2000      	movs	r0, #0
 80040f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f8:	462a      	mov	r2, r5
 80040fa:	f000 faaf 	bl	800465c <_realloc_r>
 80040fe:	4606      	mov	r6, r0
 8004100:	2800      	cmp	r0, #0
 8004102:	d1e0      	bne.n	80040c6 <__ssputs_r+0x5a>
 8004104:	6921      	ldr	r1, [r4, #16]
 8004106:	4650      	mov	r0, sl
 8004108:	f7ff feb8 	bl	8003e7c <_free_r>
 800410c:	230c      	movs	r3, #12
 800410e:	f8ca 3000 	str.w	r3, [sl]
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800411e:	e7e9      	b.n	80040f4 <__ssputs_r+0x88>

08004120 <_svfiprintf_r>:
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	4698      	mov	r8, r3
 8004126:	898b      	ldrh	r3, [r1, #12]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	b09d      	sub	sp, #116	; 0x74
 800412c:	4607      	mov	r7, r0
 800412e:	460d      	mov	r5, r1
 8004130:	4614      	mov	r4, r2
 8004132:	d50e      	bpl.n	8004152 <_svfiprintf_r+0x32>
 8004134:	690b      	ldr	r3, [r1, #16]
 8004136:	b963      	cbnz	r3, 8004152 <_svfiprintf_r+0x32>
 8004138:	2140      	movs	r1, #64	; 0x40
 800413a:	f7ff ff0b 	bl	8003f54 <_malloc_r>
 800413e:	6028      	str	r0, [r5, #0]
 8004140:	6128      	str	r0, [r5, #16]
 8004142:	b920      	cbnz	r0, 800414e <_svfiprintf_r+0x2e>
 8004144:	230c      	movs	r3, #12
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414c:	e0d0      	b.n	80042f0 <_svfiprintf_r+0x1d0>
 800414e:	2340      	movs	r3, #64	; 0x40
 8004150:	616b      	str	r3, [r5, #20]
 8004152:	2300      	movs	r3, #0
 8004154:	9309      	str	r3, [sp, #36]	; 0x24
 8004156:	2320      	movs	r3, #32
 8004158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800415c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004160:	2330      	movs	r3, #48	; 0x30
 8004162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004308 <_svfiprintf_r+0x1e8>
 8004166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800416a:	f04f 0901 	mov.w	r9, #1
 800416e:	4623      	mov	r3, r4
 8004170:	469a      	mov	sl, r3
 8004172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004176:	b10a      	cbz	r2, 800417c <_svfiprintf_r+0x5c>
 8004178:	2a25      	cmp	r2, #37	; 0x25
 800417a:	d1f9      	bne.n	8004170 <_svfiprintf_r+0x50>
 800417c:	ebba 0b04 	subs.w	fp, sl, r4
 8004180:	d00b      	beq.n	800419a <_svfiprintf_r+0x7a>
 8004182:	465b      	mov	r3, fp
 8004184:	4622      	mov	r2, r4
 8004186:	4629      	mov	r1, r5
 8004188:	4638      	mov	r0, r7
 800418a:	f7ff ff6f 	bl	800406c <__ssputs_r>
 800418e:	3001      	adds	r0, #1
 8004190:	f000 80a9 	beq.w	80042e6 <_svfiprintf_r+0x1c6>
 8004194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004196:	445a      	add	r2, fp
 8004198:	9209      	str	r2, [sp, #36]	; 0x24
 800419a:	f89a 3000 	ldrb.w	r3, [sl]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80a1 	beq.w	80042e6 <_svfiprintf_r+0x1c6>
 80041a4:	2300      	movs	r3, #0
 80041a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ae:	f10a 0a01 	add.w	sl, sl, #1
 80041b2:	9304      	str	r3, [sp, #16]
 80041b4:	9307      	str	r3, [sp, #28]
 80041b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041ba:	931a      	str	r3, [sp, #104]	; 0x68
 80041bc:	4654      	mov	r4, sl
 80041be:	2205      	movs	r2, #5
 80041c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c4:	4850      	ldr	r0, [pc, #320]	; (8004308 <_svfiprintf_r+0x1e8>)
 80041c6:	f7fc f80b 	bl	80001e0 <memchr>
 80041ca:	9a04      	ldr	r2, [sp, #16]
 80041cc:	b9d8      	cbnz	r0, 8004206 <_svfiprintf_r+0xe6>
 80041ce:	06d0      	lsls	r0, r2, #27
 80041d0:	bf44      	itt	mi
 80041d2:	2320      	movmi	r3, #32
 80041d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041d8:	0711      	lsls	r1, r2, #28
 80041da:	bf44      	itt	mi
 80041dc:	232b      	movmi	r3, #43	; 0x2b
 80041de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041e2:	f89a 3000 	ldrb.w	r3, [sl]
 80041e6:	2b2a      	cmp	r3, #42	; 0x2a
 80041e8:	d015      	beq.n	8004216 <_svfiprintf_r+0xf6>
 80041ea:	9a07      	ldr	r2, [sp, #28]
 80041ec:	4654      	mov	r4, sl
 80041ee:	2000      	movs	r0, #0
 80041f0:	f04f 0c0a 	mov.w	ip, #10
 80041f4:	4621      	mov	r1, r4
 80041f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041fa:	3b30      	subs	r3, #48	; 0x30
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d94d      	bls.n	800429c <_svfiprintf_r+0x17c>
 8004200:	b1b0      	cbz	r0, 8004230 <_svfiprintf_r+0x110>
 8004202:	9207      	str	r2, [sp, #28]
 8004204:	e014      	b.n	8004230 <_svfiprintf_r+0x110>
 8004206:	eba0 0308 	sub.w	r3, r0, r8
 800420a:	fa09 f303 	lsl.w	r3, r9, r3
 800420e:	4313      	orrs	r3, r2
 8004210:	9304      	str	r3, [sp, #16]
 8004212:	46a2      	mov	sl, r4
 8004214:	e7d2      	b.n	80041bc <_svfiprintf_r+0x9c>
 8004216:	9b03      	ldr	r3, [sp, #12]
 8004218:	1d19      	adds	r1, r3, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	9103      	str	r1, [sp, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	bfbb      	ittet	lt
 8004222:	425b      	neglt	r3, r3
 8004224:	f042 0202 	orrlt.w	r2, r2, #2
 8004228:	9307      	strge	r3, [sp, #28]
 800422a:	9307      	strlt	r3, [sp, #28]
 800422c:	bfb8      	it	lt
 800422e:	9204      	strlt	r2, [sp, #16]
 8004230:	7823      	ldrb	r3, [r4, #0]
 8004232:	2b2e      	cmp	r3, #46	; 0x2e
 8004234:	d10c      	bne.n	8004250 <_svfiprintf_r+0x130>
 8004236:	7863      	ldrb	r3, [r4, #1]
 8004238:	2b2a      	cmp	r3, #42	; 0x2a
 800423a:	d134      	bne.n	80042a6 <_svfiprintf_r+0x186>
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	9203      	str	r2, [sp, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	bfb8      	it	lt
 8004248:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800424c:	3402      	adds	r4, #2
 800424e:	9305      	str	r3, [sp, #20]
 8004250:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004318 <_svfiprintf_r+0x1f8>
 8004254:	7821      	ldrb	r1, [r4, #0]
 8004256:	2203      	movs	r2, #3
 8004258:	4650      	mov	r0, sl
 800425a:	f7fb ffc1 	bl	80001e0 <memchr>
 800425e:	b138      	cbz	r0, 8004270 <_svfiprintf_r+0x150>
 8004260:	9b04      	ldr	r3, [sp, #16]
 8004262:	eba0 000a 	sub.w	r0, r0, sl
 8004266:	2240      	movs	r2, #64	; 0x40
 8004268:	4082      	lsls	r2, r0
 800426a:	4313      	orrs	r3, r2
 800426c:	3401      	adds	r4, #1
 800426e:	9304      	str	r3, [sp, #16]
 8004270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004274:	4825      	ldr	r0, [pc, #148]	; (800430c <_svfiprintf_r+0x1ec>)
 8004276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800427a:	2206      	movs	r2, #6
 800427c:	f7fb ffb0 	bl	80001e0 <memchr>
 8004280:	2800      	cmp	r0, #0
 8004282:	d038      	beq.n	80042f6 <_svfiprintf_r+0x1d6>
 8004284:	4b22      	ldr	r3, [pc, #136]	; (8004310 <_svfiprintf_r+0x1f0>)
 8004286:	bb1b      	cbnz	r3, 80042d0 <_svfiprintf_r+0x1b0>
 8004288:	9b03      	ldr	r3, [sp, #12]
 800428a:	3307      	adds	r3, #7
 800428c:	f023 0307 	bic.w	r3, r3, #7
 8004290:	3308      	adds	r3, #8
 8004292:	9303      	str	r3, [sp, #12]
 8004294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004296:	4433      	add	r3, r6
 8004298:	9309      	str	r3, [sp, #36]	; 0x24
 800429a:	e768      	b.n	800416e <_svfiprintf_r+0x4e>
 800429c:	fb0c 3202 	mla	r2, ip, r2, r3
 80042a0:	460c      	mov	r4, r1
 80042a2:	2001      	movs	r0, #1
 80042a4:	e7a6      	b.n	80041f4 <_svfiprintf_r+0xd4>
 80042a6:	2300      	movs	r3, #0
 80042a8:	3401      	adds	r4, #1
 80042aa:	9305      	str	r3, [sp, #20]
 80042ac:	4619      	mov	r1, r3
 80042ae:	f04f 0c0a 	mov.w	ip, #10
 80042b2:	4620      	mov	r0, r4
 80042b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b8:	3a30      	subs	r2, #48	; 0x30
 80042ba:	2a09      	cmp	r2, #9
 80042bc:	d903      	bls.n	80042c6 <_svfiprintf_r+0x1a6>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0c6      	beq.n	8004250 <_svfiprintf_r+0x130>
 80042c2:	9105      	str	r1, [sp, #20]
 80042c4:	e7c4      	b.n	8004250 <_svfiprintf_r+0x130>
 80042c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042ca:	4604      	mov	r4, r0
 80042cc:	2301      	movs	r3, #1
 80042ce:	e7f0      	b.n	80042b2 <_svfiprintf_r+0x192>
 80042d0:	ab03      	add	r3, sp, #12
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	462a      	mov	r2, r5
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <_svfiprintf_r+0x1f4>)
 80042d8:	a904      	add	r1, sp, #16
 80042da:	4638      	mov	r0, r7
 80042dc:	f3af 8000 	nop.w
 80042e0:	1c42      	adds	r2, r0, #1
 80042e2:	4606      	mov	r6, r0
 80042e4:	d1d6      	bne.n	8004294 <_svfiprintf_r+0x174>
 80042e6:	89ab      	ldrh	r3, [r5, #12]
 80042e8:	065b      	lsls	r3, r3, #25
 80042ea:	f53f af2d 	bmi.w	8004148 <_svfiprintf_r+0x28>
 80042ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042f0:	b01d      	add	sp, #116	; 0x74
 80042f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f6:	ab03      	add	r3, sp, #12
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	462a      	mov	r2, r5
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <_svfiprintf_r+0x1f4>)
 80042fe:	a904      	add	r1, sp, #16
 8004300:	4638      	mov	r0, r7
 8004302:	f000 f879 	bl	80043f8 <_printf_i>
 8004306:	e7eb      	b.n	80042e0 <_svfiprintf_r+0x1c0>
 8004308:	08004eb4 	.word	0x08004eb4
 800430c:	08004ebe 	.word	0x08004ebe
 8004310:	00000000 	.word	0x00000000
 8004314:	0800406d 	.word	0x0800406d
 8004318:	08004eba 	.word	0x08004eba

0800431c <_printf_common>:
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	4616      	mov	r6, r2
 8004322:	4699      	mov	r9, r3
 8004324:	688a      	ldr	r2, [r1, #8]
 8004326:	690b      	ldr	r3, [r1, #16]
 8004328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800432c:	4293      	cmp	r3, r2
 800432e:	bfb8      	it	lt
 8004330:	4613      	movlt	r3, r2
 8004332:	6033      	str	r3, [r6, #0]
 8004334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004338:	4607      	mov	r7, r0
 800433a:	460c      	mov	r4, r1
 800433c:	b10a      	cbz	r2, 8004342 <_printf_common+0x26>
 800433e:	3301      	adds	r3, #1
 8004340:	6033      	str	r3, [r6, #0]
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	0699      	lsls	r1, r3, #26
 8004346:	bf42      	ittt	mi
 8004348:	6833      	ldrmi	r3, [r6, #0]
 800434a:	3302      	addmi	r3, #2
 800434c:	6033      	strmi	r3, [r6, #0]
 800434e:	6825      	ldr	r5, [r4, #0]
 8004350:	f015 0506 	ands.w	r5, r5, #6
 8004354:	d106      	bne.n	8004364 <_printf_common+0x48>
 8004356:	f104 0a19 	add.w	sl, r4, #25
 800435a:	68e3      	ldr	r3, [r4, #12]
 800435c:	6832      	ldr	r2, [r6, #0]
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	42ab      	cmp	r3, r5
 8004362:	dc26      	bgt.n	80043b2 <_printf_common+0x96>
 8004364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004368:	1e13      	subs	r3, r2, #0
 800436a:	6822      	ldr	r2, [r4, #0]
 800436c:	bf18      	it	ne
 800436e:	2301      	movne	r3, #1
 8004370:	0692      	lsls	r2, r2, #26
 8004372:	d42b      	bmi.n	80043cc <_printf_common+0xb0>
 8004374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004378:	4649      	mov	r1, r9
 800437a:	4638      	mov	r0, r7
 800437c:	47c0      	blx	r8
 800437e:	3001      	adds	r0, #1
 8004380:	d01e      	beq.n	80043c0 <_printf_common+0xa4>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	6922      	ldr	r2, [r4, #16]
 8004386:	f003 0306 	and.w	r3, r3, #6
 800438a:	2b04      	cmp	r3, #4
 800438c:	bf02      	ittt	eq
 800438e:	68e5      	ldreq	r5, [r4, #12]
 8004390:	6833      	ldreq	r3, [r6, #0]
 8004392:	1aed      	subeq	r5, r5, r3
 8004394:	68a3      	ldr	r3, [r4, #8]
 8004396:	bf0c      	ite	eq
 8004398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800439c:	2500      	movne	r5, #0
 800439e:	4293      	cmp	r3, r2
 80043a0:	bfc4      	itt	gt
 80043a2:	1a9b      	subgt	r3, r3, r2
 80043a4:	18ed      	addgt	r5, r5, r3
 80043a6:	2600      	movs	r6, #0
 80043a8:	341a      	adds	r4, #26
 80043aa:	42b5      	cmp	r5, r6
 80043ac:	d11a      	bne.n	80043e4 <_printf_common+0xc8>
 80043ae:	2000      	movs	r0, #0
 80043b0:	e008      	b.n	80043c4 <_printf_common+0xa8>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4652      	mov	r2, sl
 80043b6:	4649      	mov	r1, r9
 80043b8:	4638      	mov	r0, r7
 80043ba:	47c0      	blx	r8
 80043bc:	3001      	adds	r0, #1
 80043be:	d103      	bne.n	80043c8 <_printf_common+0xac>
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c8:	3501      	adds	r5, #1
 80043ca:	e7c6      	b.n	800435a <_printf_common+0x3e>
 80043cc:	18e1      	adds	r1, r4, r3
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	2030      	movs	r0, #48	; 0x30
 80043d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043d6:	4422      	add	r2, r4
 80043d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043e0:	3302      	adds	r3, #2
 80043e2:	e7c7      	b.n	8004374 <_printf_common+0x58>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4622      	mov	r2, r4
 80043e8:	4649      	mov	r1, r9
 80043ea:	4638      	mov	r0, r7
 80043ec:	47c0      	blx	r8
 80043ee:	3001      	adds	r0, #1
 80043f0:	d0e6      	beq.n	80043c0 <_printf_common+0xa4>
 80043f2:	3601      	adds	r6, #1
 80043f4:	e7d9      	b.n	80043aa <_printf_common+0x8e>
	...

080043f8 <_printf_i>:
 80043f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	7e0f      	ldrb	r7, [r1, #24]
 80043fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004400:	2f78      	cmp	r7, #120	; 0x78
 8004402:	4691      	mov	r9, r2
 8004404:	4680      	mov	r8, r0
 8004406:	460c      	mov	r4, r1
 8004408:	469a      	mov	sl, r3
 800440a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800440e:	d807      	bhi.n	8004420 <_printf_i+0x28>
 8004410:	2f62      	cmp	r7, #98	; 0x62
 8004412:	d80a      	bhi.n	800442a <_printf_i+0x32>
 8004414:	2f00      	cmp	r7, #0
 8004416:	f000 80d4 	beq.w	80045c2 <_printf_i+0x1ca>
 800441a:	2f58      	cmp	r7, #88	; 0x58
 800441c:	f000 80c0 	beq.w	80045a0 <_printf_i+0x1a8>
 8004420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004428:	e03a      	b.n	80044a0 <_printf_i+0xa8>
 800442a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800442e:	2b15      	cmp	r3, #21
 8004430:	d8f6      	bhi.n	8004420 <_printf_i+0x28>
 8004432:	a101      	add	r1, pc, #4	; (adr r1, 8004438 <_printf_i+0x40>)
 8004434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004438:	08004491 	.word	0x08004491
 800443c:	080044a5 	.word	0x080044a5
 8004440:	08004421 	.word	0x08004421
 8004444:	08004421 	.word	0x08004421
 8004448:	08004421 	.word	0x08004421
 800444c:	08004421 	.word	0x08004421
 8004450:	080044a5 	.word	0x080044a5
 8004454:	08004421 	.word	0x08004421
 8004458:	08004421 	.word	0x08004421
 800445c:	08004421 	.word	0x08004421
 8004460:	08004421 	.word	0x08004421
 8004464:	080045a9 	.word	0x080045a9
 8004468:	080044d1 	.word	0x080044d1
 800446c:	08004563 	.word	0x08004563
 8004470:	08004421 	.word	0x08004421
 8004474:	08004421 	.word	0x08004421
 8004478:	080045cb 	.word	0x080045cb
 800447c:	08004421 	.word	0x08004421
 8004480:	080044d1 	.word	0x080044d1
 8004484:	08004421 	.word	0x08004421
 8004488:	08004421 	.word	0x08004421
 800448c:	0800456b 	.word	0x0800456b
 8004490:	682b      	ldr	r3, [r5, #0]
 8004492:	1d1a      	adds	r2, r3, #4
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	602a      	str	r2, [r5, #0]
 8004498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800449c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044a0:	2301      	movs	r3, #1
 80044a2:	e09f      	b.n	80045e4 <_printf_i+0x1ec>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	682b      	ldr	r3, [r5, #0]
 80044a8:	0607      	lsls	r7, r0, #24
 80044aa:	f103 0104 	add.w	r1, r3, #4
 80044ae:	6029      	str	r1, [r5, #0]
 80044b0:	d501      	bpl.n	80044b6 <_printf_i+0xbe>
 80044b2:	681e      	ldr	r6, [r3, #0]
 80044b4:	e003      	b.n	80044be <_printf_i+0xc6>
 80044b6:	0646      	lsls	r6, r0, #25
 80044b8:	d5fb      	bpl.n	80044b2 <_printf_i+0xba>
 80044ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044be:	2e00      	cmp	r6, #0
 80044c0:	da03      	bge.n	80044ca <_printf_i+0xd2>
 80044c2:	232d      	movs	r3, #45	; 0x2d
 80044c4:	4276      	negs	r6, r6
 80044c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ca:	485a      	ldr	r0, [pc, #360]	; (8004634 <_printf_i+0x23c>)
 80044cc:	230a      	movs	r3, #10
 80044ce:	e012      	b.n	80044f6 <_printf_i+0xfe>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	6820      	ldr	r0, [r4, #0]
 80044d4:	1d19      	adds	r1, r3, #4
 80044d6:	6029      	str	r1, [r5, #0]
 80044d8:	0605      	lsls	r5, r0, #24
 80044da:	d501      	bpl.n	80044e0 <_printf_i+0xe8>
 80044dc:	681e      	ldr	r6, [r3, #0]
 80044de:	e002      	b.n	80044e6 <_printf_i+0xee>
 80044e0:	0641      	lsls	r1, r0, #25
 80044e2:	d5fb      	bpl.n	80044dc <_printf_i+0xe4>
 80044e4:	881e      	ldrh	r6, [r3, #0]
 80044e6:	4853      	ldr	r0, [pc, #332]	; (8004634 <_printf_i+0x23c>)
 80044e8:	2f6f      	cmp	r7, #111	; 0x6f
 80044ea:	bf0c      	ite	eq
 80044ec:	2308      	moveq	r3, #8
 80044ee:	230a      	movne	r3, #10
 80044f0:	2100      	movs	r1, #0
 80044f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044f6:	6865      	ldr	r5, [r4, #4]
 80044f8:	60a5      	str	r5, [r4, #8]
 80044fa:	2d00      	cmp	r5, #0
 80044fc:	bfa2      	ittt	ge
 80044fe:	6821      	ldrge	r1, [r4, #0]
 8004500:	f021 0104 	bicge.w	r1, r1, #4
 8004504:	6021      	strge	r1, [r4, #0]
 8004506:	b90e      	cbnz	r6, 800450c <_printf_i+0x114>
 8004508:	2d00      	cmp	r5, #0
 800450a:	d04b      	beq.n	80045a4 <_printf_i+0x1ac>
 800450c:	4615      	mov	r5, r2
 800450e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004512:	fb03 6711 	mls	r7, r3, r1, r6
 8004516:	5dc7      	ldrb	r7, [r0, r7]
 8004518:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800451c:	4637      	mov	r7, r6
 800451e:	42bb      	cmp	r3, r7
 8004520:	460e      	mov	r6, r1
 8004522:	d9f4      	bls.n	800450e <_printf_i+0x116>
 8004524:	2b08      	cmp	r3, #8
 8004526:	d10b      	bne.n	8004540 <_printf_i+0x148>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	07de      	lsls	r6, r3, #31
 800452c:	d508      	bpl.n	8004540 <_printf_i+0x148>
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	6861      	ldr	r1, [r4, #4]
 8004532:	4299      	cmp	r1, r3
 8004534:	bfde      	ittt	le
 8004536:	2330      	movle	r3, #48	; 0x30
 8004538:	f805 3c01 	strble.w	r3, [r5, #-1]
 800453c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004540:	1b52      	subs	r2, r2, r5
 8004542:	6122      	str	r2, [r4, #16]
 8004544:	f8cd a000 	str.w	sl, [sp]
 8004548:	464b      	mov	r3, r9
 800454a:	aa03      	add	r2, sp, #12
 800454c:	4621      	mov	r1, r4
 800454e:	4640      	mov	r0, r8
 8004550:	f7ff fee4 	bl	800431c <_printf_common>
 8004554:	3001      	adds	r0, #1
 8004556:	d14a      	bne.n	80045ee <_printf_i+0x1f6>
 8004558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800455c:	b004      	add	sp, #16
 800455e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	f043 0320 	orr.w	r3, r3, #32
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	4833      	ldr	r0, [pc, #204]	; (8004638 <_printf_i+0x240>)
 800456c:	2778      	movs	r7, #120	; 0x78
 800456e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	6829      	ldr	r1, [r5, #0]
 8004576:	061f      	lsls	r7, r3, #24
 8004578:	f851 6b04 	ldr.w	r6, [r1], #4
 800457c:	d402      	bmi.n	8004584 <_printf_i+0x18c>
 800457e:	065f      	lsls	r7, r3, #25
 8004580:	bf48      	it	mi
 8004582:	b2b6      	uxthmi	r6, r6
 8004584:	07df      	lsls	r7, r3, #31
 8004586:	bf48      	it	mi
 8004588:	f043 0320 	orrmi.w	r3, r3, #32
 800458c:	6029      	str	r1, [r5, #0]
 800458e:	bf48      	it	mi
 8004590:	6023      	strmi	r3, [r4, #0]
 8004592:	b91e      	cbnz	r6, 800459c <_printf_i+0x1a4>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	f023 0320 	bic.w	r3, r3, #32
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	2310      	movs	r3, #16
 800459e:	e7a7      	b.n	80044f0 <_printf_i+0xf8>
 80045a0:	4824      	ldr	r0, [pc, #144]	; (8004634 <_printf_i+0x23c>)
 80045a2:	e7e4      	b.n	800456e <_printf_i+0x176>
 80045a4:	4615      	mov	r5, r2
 80045a6:	e7bd      	b.n	8004524 <_printf_i+0x12c>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	6826      	ldr	r6, [r4, #0]
 80045ac:	6961      	ldr	r1, [r4, #20]
 80045ae:	1d18      	adds	r0, r3, #4
 80045b0:	6028      	str	r0, [r5, #0]
 80045b2:	0635      	lsls	r5, r6, #24
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	d501      	bpl.n	80045bc <_printf_i+0x1c4>
 80045b8:	6019      	str	r1, [r3, #0]
 80045ba:	e002      	b.n	80045c2 <_printf_i+0x1ca>
 80045bc:	0670      	lsls	r0, r6, #25
 80045be:	d5fb      	bpl.n	80045b8 <_printf_i+0x1c0>
 80045c0:	8019      	strh	r1, [r3, #0]
 80045c2:	2300      	movs	r3, #0
 80045c4:	6123      	str	r3, [r4, #16]
 80045c6:	4615      	mov	r5, r2
 80045c8:	e7bc      	b.n	8004544 <_printf_i+0x14c>
 80045ca:	682b      	ldr	r3, [r5, #0]
 80045cc:	1d1a      	adds	r2, r3, #4
 80045ce:	602a      	str	r2, [r5, #0]
 80045d0:	681d      	ldr	r5, [r3, #0]
 80045d2:	6862      	ldr	r2, [r4, #4]
 80045d4:	2100      	movs	r1, #0
 80045d6:	4628      	mov	r0, r5
 80045d8:	f7fb fe02 	bl	80001e0 <memchr>
 80045dc:	b108      	cbz	r0, 80045e2 <_printf_i+0x1ea>
 80045de:	1b40      	subs	r0, r0, r5
 80045e0:	6060      	str	r0, [r4, #4]
 80045e2:	6863      	ldr	r3, [r4, #4]
 80045e4:	6123      	str	r3, [r4, #16]
 80045e6:	2300      	movs	r3, #0
 80045e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ec:	e7aa      	b.n	8004544 <_printf_i+0x14c>
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	462a      	mov	r2, r5
 80045f2:	4649      	mov	r1, r9
 80045f4:	4640      	mov	r0, r8
 80045f6:	47d0      	blx	sl
 80045f8:	3001      	adds	r0, #1
 80045fa:	d0ad      	beq.n	8004558 <_printf_i+0x160>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	079b      	lsls	r3, r3, #30
 8004600:	d413      	bmi.n	800462a <_printf_i+0x232>
 8004602:	68e0      	ldr	r0, [r4, #12]
 8004604:	9b03      	ldr	r3, [sp, #12]
 8004606:	4298      	cmp	r0, r3
 8004608:	bfb8      	it	lt
 800460a:	4618      	movlt	r0, r3
 800460c:	e7a6      	b.n	800455c <_printf_i+0x164>
 800460e:	2301      	movs	r3, #1
 8004610:	4632      	mov	r2, r6
 8004612:	4649      	mov	r1, r9
 8004614:	4640      	mov	r0, r8
 8004616:	47d0      	blx	sl
 8004618:	3001      	adds	r0, #1
 800461a:	d09d      	beq.n	8004558 <_printf_i+0x160>
 800461c:	3501      	adds	r5, #1
 800461e:	68e3      	ldr	r3, [r4, #12]
 8004620:	9903      	ldr	r1, [sp, #12]
 8004622:	1a5b      	subs	r3, r3, r1
 8004624:	42ab      	cmp	r3, r5
 8004626:	dcf2      	bgt.n	800460e <_printf_i+0x216>
 8004628:	e7eb      	b.n	8004602 <_printf_i+0x20a>
 800462a:	2500      	movs	r5, #0
 800462c:	f104 0619 	add.w	r6, r4, #25
 8004630:	e7f5      	b.n	800461e <_printf_i+0x226>
 8004632:	bf00      	nop
 8004634:	08004ec5 	.word	0x08004ec5
 8004638:	08004ed6 	.word	0x08004ed6

0800463c <_sbrk_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4d06      	ldr	r5, [pc, #24]	; (8004658 <_sbrk_r+0x1c>)
 8004640:	2300      	movs	r3, #0
 8004642:	4604      	mov	r4, r0
 8004644:	4608      	mov	r0, r1
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	f7fc fc70 	bl	8000f2c <_sbrk>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d102      	bne.n	8004656 <_sbrk_r+0x1a>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	b103      	cbz	r3, 8004656 <_sbrk_r+0x1a>
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	20000508 	.word	0x20000508

0800465c <_realloc_r>:
 800465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004660:	4680      	mov	r8, r0
 8004662:	4614      	mov	r4, r2
 8004664:	460e      	mov	r6, r1
 8004666:	b921      	cbnz	r1, 8004672 <_realloc_r+0x16>
 8004668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800466c:	4611      	mov	r1, r2
 800466e:	f7ff bc71 	b.w	8003f54 <_malloc_r>
 8004672:	b92a      	cbnz	r2, 8004680 <_realloc_r+0x24>
 8004674:	f7ff fc02 	bl	8003e7c <_free_r>
 8004678:	4625      	mov	r5, r4
 800467a:	4628      	mov	r0, r5
 800467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004680:	f000 f81b 	bl	80046ba <_malloc_usable_size_r>
 8004684:	4284      	cmp	r4, r0
 8004686:	4607      	mov	r7, r0
 8004688:	d802      	bhi.n	8004690 <_realloc_r+0x34>
 800468a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800468e:	d812      	bhi.n	80046b6 <_realloc_r+0x5a>
 8004690:	4621      	mov	r1, r4
 8004692:	4640      	mov	r0, r8
 8004694:	f7ff fc5e 	bl	8003f54 <_malloc_r>
 8004698:	4605      	mov	r5, r0
 800469a:	2800      	cmp	r0, #0
 800469c:	d0ed      	beq.n	800467a <_realloc_r+0x1e>
 800469e:	42bc      	cmp	r4, r7
 80046a0:	4622      	mov	r2, r4
 80046a2:	4631      	mov	r1, r6
 80046a4:	bf28      	it	cs
 80046a6:	463a      	movcs	r2, r7
 80046a8:	f7ff fbda 	bl	8003e60 <memcpy>
 80046ac:	4631      	mov	r1, r6
 80046ae:	4640      	mov	r0, r8
 80046b0:	f7ff fbe4 	bl	8003e7c <_free_r>
 80046b4:	e7e1      	b.n	800467a <_realloc_r+0x1e>
 80046b6:	4635      	mov	r5, r6
 80046b8:	e7df      	b.n	800467a <_realloc_r+0x1e>

080046ba <_malloc_usable_size_r>:
 80046ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046be:	1f18      	subs	r0, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bfbc      	itt	lt
 80046c4:	580b      	ldrlt	r3, [r1, r0]
 80046c6:	18c0      	addlt	r0, r0, r3
 80046c8:	4770      	bx	lr
	...

080046cc <_init>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr

080046d8 <_fini>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

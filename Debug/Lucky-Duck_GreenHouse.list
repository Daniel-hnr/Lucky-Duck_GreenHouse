
Lucky-Duck_GreenHouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  080052b4  080052b4  000062b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad4  08005ad4  00007094  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad4  08005ad4  00006ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005adc  08005adc  00007094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005adc  08005adc  00006adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae0  08005ae0  00006ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005ae4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000094  08005b78  00007094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08005b78  00007540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b3c  00000000  00000000  000070c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5a  00000000  00000000  00018c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7f  00000000  00000000  0001c788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199df  00000000  00000000  0001d407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151fd  00000000  00000000  00036de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0305  00000000  00000000  0004bfe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec2e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  000ec32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f0b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800529c 	.word	0x0800529c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800529c 	.word	0x0800529c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f001 fb3f 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f899 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fa2b 	bl	80009d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000582:	f000 f901 	bl	8000788 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000586:	f000 f953 	bl	8000830 <MX_I2C1_Init>
  MX_TIM2_Init();
 800058a:	f000 f9d9 	bl	8000940 <MX_TIM2_Init>
  MX_RTC_Init();
 800058e:	f000 f97d 	bl	800088c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc1);
 8000592:	483d      	ldr	r0, [pc, #244]	@ (8000688 <main+0x118>)
 8000594:	f001 fc0a 	bl	8001dac <HAL_ADC_Start>
	ssd1306_Init();
 8000598:	f001 f930 	bl	80017fc <ssd1306_Init>
	init_dht11(&dht, &htim2, DHT11_GPIO_Port, DHT11_Pin);
 800059c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a0:	4a3a      	ldr	r2, [pc, #232]	@ (800068c <main+0x11c>)
 80005a2:	493b      	ldr	r1, [pc, #236]	@ (8000690 <main+0x120>)
 80005a4:	483b      	ldr	r0, [pc, #236]	@ (8000694 <main+0x124>)
 80005a6:	f000 ff26 	bl	80013f6 <init_dht11>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (state) {
 80005aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000698 <main+0x128>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <main+0x48>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d05d      	beq.n	8000672 <main+0x102>
 80005b6:	e063      	b.n	8000680 <main+0x110>
		case work_state:
			menu[0] = '\0';
 80005b8:	4b38      	ldr	r3, [pc, #224]	@ (800069c <main+0x12c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(0, 22);
 80005be:	2116      	movs	r1, #22
 80005c0:	2000      	movs	r0, #0
 80005c2:	f001 facf 	bl	8001b64 <ssd1306_SetCursor>
			RTC_TimeTypeDef sTime = {0} ;
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
			sTime = get_time();
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 feba 	bl	8001350 <get_time>
			sprintf(menu, "%2d:%2d:%2d", sTime.Hours,sTime.Minutes,sTime.Seconds);
 80005dc:	793b      	ldrb	r3, [r7, #4]
 80005de:	461a      	mov	r2, r3
 80005e0:	797b      	ldrb	r3, [r7, #5]
 80005e2:	4619      	mov	r1, r3
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	460b      	mov	r3, r1
 80005ea:	492d      	ldr	r1, [pc, #180]	@ (80006a0 <main+0x130>)
 80005ec:	482b      	ldr	r0, [pc, #172]	@ (800069c <main+0x12c>)
 80005ee:	f004 f9b5 	bl	800495c <siprintf>
			ssd1306_WriteString(menu, Font_7x10, White);
 80005f2:	4b2c      	ldr	r3, [pc, #176]	@ (80006a4 <main+0x134>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005fa:	4828      	ldr	r0, [pc, #160]	@ (800069c <main+0x12c>)
 80005fc:	f001 fa8c 	bl	8001b18 <ssd1306_WriteString>
			if (state == work_state && flag_t != 10) {
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <main+0x128>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10e      	bne.n	8000626 <main+0xb6>
 8000608:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <main+0x138>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b0a      	cmp	r3, #10
 800060e:	d00a      	beq.n	8000626 <main+0xb6>
				HAL_Delay(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000614:	f001 fb62 	bl	8001cdc <HAL_Delay>
				flag_t++;
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <main+0x138>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <main+0x138>)
 8000622:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, 1);
				} else if (dht.temperature < temp.set_val_min || dht.temperature == temp.set_val_min) {
					HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, 0);
				}
			}
			break;
 8000624:	e02b      	b.n	800067e <main+0x10e>
				flag_t = 0;
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <main+0x138>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
				main_show();
 800062c:	f000 fab2 	bl	8000b94 <main_show>
				if (dht.temperature > temp.set_val_max) {
 8000630:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <main+0x124>)
 8000632:	7b1b      	ldrb	r3, [r3, #12]
 8000634:	461a      	mov	r2, r3
 8000636:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <main+0x13c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	429a      	cmp	r2, r3
 800063c:	dd05      	ble.n	800064a <main+0xda>
					HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	2120      	movs	r1, #32
 8000642:	4812      	ldr	r0, [pc, #72]	@ (800068c <main+0x11c>)
 8000644:	f002 f940 	bl	80028c8 <HAL_GPIO_WritePin>
			break;
 8000648:	e019      	b.n	800067e <main+0x10e>
				} else if (dht.temperature < temp.set_val_min || dht.temperature == temp.set_val_min) {
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <main+0x124>)
 800064c:	7b1b      	ldrb	r3, [r3, #12]
 800064e:	461a      	mov	r2, r3
 8000650:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <main+0x13c>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	429a      	cmp	r2, r3
 8000656:	db06      	blt.n	8000666 <main+0xf6>
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <main+0x124>)
 800065a:	7b1b      	ldrb	r3, [r3, #12]
 800065c:	461a      	mov	r2, r3
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <main+0x13c>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	429a      	cmp	r2, r3
 8000664:	d10b      	bne.n	800067e <main+0x10e>
					HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4808      	ldr	r0, [pc, #32]	@ (800068c <main+0x11c>)
 800066c:	f002 f92c 	bl	80028c8 <HAL_GPIO_WritePin>
			break;
 8000670:	e005      	b.n	800067e <main+0x10e>
		case menu_state:
			menu_show();
 8000672:	f000 faff 	bl	8000c74 <menu_show>
			HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	@ 0x64
 8000678:	f001 fb30 	bl	8001cdc <HAL_Delay>
			break;
 800067c:	e000      	b.n	8000680 <main+0x110>
			break;
 800067e:	bf00      	nop
		}
		ssd1306_UpdateScreen();
 8000680:	f001 f93e 	bl	8001900 <ssd1306_UpdateScreen>
		switch (state) {
 8000684:	e791      	b.n	80005aa <main+0x3a>
 8000686:	bf00      	nop
 8000688:	200000b0 	.word	0x200000b0
 800068c:	40020000 	.word	0x40020000
 8000690:	2000016c 	.word	0x2000016c
 8000694:	200001d4 	.word	0x200001d4
 8000698:	200001e4 	.word	0x200001e4
 800069c:	200001b4 	.word	0x200001b4
 80006a0:	080052b4 	.word	0x080052b4
 80006a4:	08005a94 	.word	0x08005a94
 80006a8:	200001d2 	.word	0x200001d2
 80006ac:	20000000 	.word	0x20000000

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	@ 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 f986 	bl	80049d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	4a28      	ldr	r2, [pc, #160]	@ (8000780 <SystemClock_Config+0xd0>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e4:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemClock_Config+0xd4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006fc:	4a21      	ldr	r2, [pc, #132]	@ (8000784 <SystemClock_Config+0xd4>)
 80006fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000710:	2309      	movs	r3, #9
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000728:	2319      	movs	r3, #25
 800072a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800072c:	23a8      	movs	r3, #168	@ 0xa8
 800072e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fda3 	bl	8003288 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000748:	f000 fa1e 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2102      	movs	r1, #2
 8000768:	4618      	mov	r0, r3
 800076a:	f003 f805 	bl	8003778 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000774:	f000 fa08 	bl	8000b88 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3750      	adds	r7, #80	@ 0x50
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800079a:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <MX_ADC1_Init+0x9c>)
 800079c:	4a22      	ldr	r2, [pc, #136]	@ (8000828 <MX_ADC1_Init+0xa0>)
 800079e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a0:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80007ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007bc:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007cc:	4a17      	ldr	r2, [pc, #92]	@ (800082c <MX_ADC1_Init+0xa4>)
 80007ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007d6:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007d8:	2201      	movs	r2, #1
 80007da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ea:	480e      	ldr	r0, [pc, #56]	@ (8000824 <MX_ADC1_Init+0x9c>)
 80007ec:	f001 fa9a 	bl	8001d24 <HAL_ADC_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007f6:	f000 f9c7 	bl	8000b88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000802:	2303      	movs	r3, #3
 8000804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_ADC1_Init+0x9c>)
 800080c:	f001 fb90 	bl	8001f30 <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000816:	f000 f9b7 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000b0 	.word	0x200000b0
 8000828:	40012000 	.word	0x40012000
 800082c:	0f000001 	.word	0x0f000001

08000830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <MX_I2C1_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_I2C1_Init+0x50>)
 800083c:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x58>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_I2C1_Init+0x50>)
 800084e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_I2C1_Init+0x50>)
 800086e:	f002 f85d 	bl	800292c <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 f986 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000f8 	.word	0x200000f8
 8000884:	40005400 	.word	0x40005400
 8000888:	000186a0 	.word	0x000186a0

0800088c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <MX_RTC_Init+0xac>)
 80008a6:	4a25      	ldr	r2, [pc, #148]	@ (800093c <MX_RTC_Init+0xb0>)
 80008a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008aa:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <MX_RTC_Init+0xac>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008b0:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_RTC_Init+0xac>)
 80008b2:	227f      	movs	r2, #127	@ 0x7f
 80008b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_RTC_Init+0xac>)
 80008b8:	22ff      	movs	r2, #255	@ 0xff
 80008ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_RTC_Init+0xac>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_RTC_Init+0xac>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_RTC_Init+0xac>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ce:	481a      	ldr	r0, [pc, #104]	@ (8000938 <MX_RTC_Init+0xac>)
 80008d0:	f003 fa0c 	bl	8003cec <HAL_RTC_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f955 	bl	8000b88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 80008de:	230c      	movs	r3, #12
 80008e0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	480f      	ldr	r0, [pc, #60]	@ (8000938 <MX_RTC_Init+0xac>)
 80008fa:	f003 fa7a 	bl	8003df2 <HAL_RTC_SetTime>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000904:	f000 f940 	bl	8000b88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000908:	2301      	movs	r3, #1
 800090a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800090c:	2301      	movs	r3, #1
 800090e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MX_RTC_Init+0xac>)
 8000920:	f003 fb5f 	bl	8003fe2 <HAL_RTC_SetDate>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800092a:	f000 f92d 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000014c 	.word	0x2000014c
 800093c:	40002800 	.word	0x40002800

08000940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095c:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <MX_TIM2_Init+0x94>)
 800095e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000962:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_TIM2_Init+0x94>)
 8000966:	2253      	movs	r2, #83	@ 0x53
 8000968:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_TIM2_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff -1;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_TIM2_Init+0x94>)
 8000972:	f06f 0201 	mvn.w	r2, #1
 8000976:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_TIM2_Init+0x94>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_TIM2_Init+0x94>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000984:	4813      	ldr	r0, [pc, #76]	@ (80009d4 <MX_TIM2_Init+0x94>)
 8000986:	f003 fcbd 	bl	8004304 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000990:	f000 f8fa 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <MX_TIM2_Init+0x94>)
 80009a2:	f003 fd80 	bl	80044a6 <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009ac:	f000 f8ec 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_TIM2_Init+0x94>)
 80009be:	f003 ff5f 	bl	8004880 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f8de 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000016c 	.word	0x2000016c

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b44      	ldr	r3, [pc, #272]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a43      	ldr	r2, [pc, #268]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b41      	ldr	r3, [pc, #260]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a3c      	ldr	r2, [pc, #240]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b36      	ldr	r3, [pc, #216]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a35      	ldr	r2, [pc, #212]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b33      	ldr	r3, [pc, #204]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2120      	movs	r1, #32
 8000a62:	4829      	ldr	r0, [pc, #164]	@ (8000b08 <MX_GPIO_Init+0x130>)
 8000a64:	f001 ff30 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : fan_Pin */
  GPIO_InitStruct.Pin = fan_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(fan_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4822      	ldr	r0, [pc, #136]	@ (8000b08 <MX_GPIO_Init+0x130>)
 8000a80:	f001 fd86 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn1_Pin btn6_Pin */
  GPIO_InitStruct.Pin = btn1_Pin|btn6_Pin;
 8000a84:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	481b      	ldr	r0, [pc, #108]	@ (8000b08 <MX_GPIO_Init+0x130>)
 8000a9a:	f001 fd79 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn2_Pin */
  GPIO_InitStruct.Pin = btn2_Pin;
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn2_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4815      	ldr	r0, [pc, #84]	@ (8000b08 <MX_GPIO_Init+0x130>)
 8000ab4:	f001 fd6c 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn3_Pin btn5_Pin btn4_Pin */
  GPIO_InitStruct.Pin = btn3_Pin|btn5_Pin|btn4_Pin;
 8000ab8:	2331      	movs	r3, #49	@ 0x31
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4810      	ldr	r0, [pc, #64]	@ (8000b0c <MX_GPIO_Init+0x134>)
 8000acc:	f001 fd60 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4808      	ldr	r0, [pc, #32]	@ (8000b08 <MX_GPIO_Init+0x130>)
 8000ae6:	f001 fd53 	bl	8002590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	2017      	movs	r0, #23
 8000af0:	f001 fd17 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000af4:	2017      	movs	r0, #23
 8000af6:	f001 fd30 	bl	800255a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	@ 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400

08000b10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == btn2_Pin) {
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	2b80      	cmp	r3, #128	@ 0x80
 8000b1e:	d129      	bne.n	8000b74 <HAL_GPIO_EXTI_Callback+0x64>
        state = (state == work_state ? menu_state : work_state);
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b32:	701a      	strb	r2, [r3, #0]
        ssd1306_Fill(Black);    // Clear the screen
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 fecb 	bl	80018d0 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 8000b3a:	f000 fee1 	bl	8001900 <ssd1306_UpdateScreen>
        HAL_Delay(100);
 8000b3e:	2064      	movs	r0, #100	@ 0x64
 8000b40:	f001 f8cc 	bl	8001cdc <HAL_Delay>
        if (state == menu_state) {
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d102      	bne.n	8000b52 <HAL_GPIO_EXTI_Callback+0x42>
            menu_show();
 8000b4c:	f000 f892 	bl	8000c74 <menu_show>
 8000b50:	e008      	b.n	8000b64 <HAL_GPIO_EXTI_Callback+0x54>
        } else if (state == work_state) {
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d104      	bne.n	8000b64 <HAL_GPIO_EXTI_Callback+0x54>
            main_show();
 8000b5a:	f000 f81b 	bl	8000b94 <main_show>
            flag_t = 10;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <HAL_GPIO_EXTI_Callback+0x70>)
 8000b60:	220a      	movs	r2, #10
 8000b62:	701a      	strb	r2, [r3, #0]
        }
        HAL_Delay(100);
 8000b64:	2064      	movs	r0, #100	@ 0x64
 8000b66:	f001 f8b9 	bl	8001cdc <HAL_Delay>
        ssd1306_UpdateScreen();  // Update the screen once after drawing
 8000b6a:	f000 fec9 	bl	8001900 <ssd1306_UpdateScreen>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b6e:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	6153      	str	r3, [r2, #20]
    }
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200001e4 	.word	0x200001e4
 8000b80:	200001d2 	.word	0x200001d2
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <main_show>:
extern struct info light;
extern char state;


uint8_t page = 0;
void main_show() {
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b089      	sub	sp, #36	@ 0x24
 8000b98:	af02      	add	r7, sp, #8
	get_temp_humidity();
 8000b9a:	f000 fa47 	bl	800102c <get_temp_humidity>
	HAL_Delay(10);
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f001 f89c 	bl	8001cdc <HAL_Delay>
	ssd1306_SetCursor(0, 1);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 ffdc 	bl	8001b64 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f000 fe8f 	bl	80018d0 <ssd1306_Fill>
	menu[0] = '\0';
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <main_show+0xc8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
	sprintf(menu, "temp:%-3dlight:%-3d", dht.temperature, get_light());
 8000bb8:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <main_show+0xcc>)
 8000bba:	7b1b      	ldrb	r3, [r3, #12]
 8000bbc:	461c      	mov	r4, r3
 8000bbe:	f000 fa3f 	bl	8001040 <get_light>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4622      	mov	r2, r4
 8000bc6:	4927      	ldr	r1, [pc, #156]	@ (8000c64 <main_show+0xd0>)
 8000bc8:	4824      	ldr	r0, [pc, #144]	@ (8000c5c <main_show+0xc8>)
 8000bca:	f003 fec7 	bl	800495c <siprintf>
	ssd1306_WriteString(menu, Font_7x10, White);
 8000bce:	4b26      	ldr	r3, [pc, #152]	@ (8000c68 <main_show+0xd4>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	9200      	str	r2, [sp, #0]
 8000bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd6:	4821      	ldr	r0, [pc, #132]	@ (8000c5c <main_show+0xc8>)
 8000bd8:	f000 ff9e 	bl	8001b18 <ssd1306_WriteString>
	menu[0] = '\0';
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <main_show+0xc8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(0, 11);
 8000be2:	210b      	movs	r1, #11
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 ffbd 	bl	8001b64 <ssd1306_SetCursor>
	sprintf(menu, "humidity:%-3d", dht.humidty);
 8000bea:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <main_show+0xcc>)
 8000bec:	7b5b      	ldrb	r3, [r3, #13]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	491e      	ldr	r1, [pc, #120]	@ (8000c6c <main_show+0xd8>)
 8000bf2:	481a      	ldr	r0, [pc, #104]	@ (8000c5c <main_show+0xc8>)
 8000bf4:	f003 feb2 	bl	800495c <siprintf>
	ssd1306_WriteString(menu, Font_7x10, White);
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <main_show+0xd4>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	9200      	str	r2, [sp, #0]
 8000bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c00:	4816      	ldr	r0, [pc, #88]	@ (8000c5c <main_show+0xc8>)
 8000c02:	f000 ff89 	bl	8001b18 <ssd1306_WriteString>
	menu[0] = '\0';
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <main_show+0xc8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
	ssd1306_SetCursor(0, 22);
 8000c0c:	2116      	movs	r1, #22
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 ffa8 	bl	8001b64 <ssd1306_SetCursor>
	RTC_TimeTypeDef sTime = {0} ;
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
	sTime = get_time();
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fb93 	bl	8001350 <get_time>
	sprintf(menu, "%2d:%2d:%2d", sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000c2a:	793b      	ldrb	r3, [r7, #4]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	797b      	ldrb	r3, [r7, #5]
 8000c30:	4619      	mov	r1, r3
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	460b      	mov	r3, r1
 8000c38:	490d      	ldr	r1, [pc, #52]	@ (8000c70 <main_show+0xdc>)
 8000c3a:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <main_show+0xc8>)
 8000c3c:	f003 fe8e 	bl	800495c <siprintf>
	ssd1306_WriteString(menu, Font_7x10, White);
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <main_show+0xd4>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	9200      	str	r2, [sp, #0]
 8000c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <main_show+0xc8>)
 8000c4a:	f000 ff65 	bl	8001b18 <ssd1306_WriteString>
	HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f001 f844 	bl	8001cdc <HAL_Delay>
}
 8000c54:	bf00      	nop
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	200001b4 	.word	0x200001b4
 8000c60:	200001d4 	.word	0x200001d4
 8000c64:	080052c0 	.word	0x080052c0
 8000c68:	08005a94 	.word	0x08005a94
 8000c6c:	080052d4 	.word	0x080052d4
 8000c70:	080052e4 	.word	0x080052e4

08000c74 <menu_show>:
void menu_show() {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af02      	add	r7, sp, #8
	if (state == menu_state) {
 8000c7a:	4b90      	ldr	r3, [pc, #576]	@ (8000ebc <menu_show+0x248>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	f040 81c1 	bne.w	8001006 <menu_show+0x392>
		// menu
		switch (page) {
 8000c84:	4b8e      	ldr	r3, [pc, #568]	@ (8000ec0 <menu_show+0x24c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	f200 818d 	bhi.w	8000fa8 <menu_show+0x334>
 8000c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c94 <menu_show+0x20>)
 8000c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c94:	08000ca5 	.word	0x08000ca5
 8000c98:	08000d59 	.word	0x08000d59
 8000c9c:	08000e09 	.word	0x08000e09
 8000ca0:	08000eed 	.word	0x08000eed
		// temp min
		case 0:
			get_temp_humidity();
 8000ca4:	f000 f9c2 	bl	800102c <get_temp_humidity>
			ssd1306_Fill(Black);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 fe11 	bl	80018d0 <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 ff57 	bl	8001b64 <ssd1306_SetCursor>
			menu[0] = '\0';
 8000cb6:	4b83      	ldr	r3, [pc, #524]	@ (8000ec4 <menu_show+0x250>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
			sprintf(menu, "%s min", temp.infoName);
 8000cbc:	4a82      	ldr	r2, [pc, #520]	@ (8000ec8 <menu_show+0x254>)
 8000cbe:	4983      	ldr	r1, [pc, #524]	@ (8000ecc <menu_show+0x258>)
 8000cc0:	4880      	ldr	r0, [pc, #512]	@ (8000ec4 <menu_show+0x250>)
 8000cc2:	f003 fe4b 	bl	800495c <siprintf>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000cc6:	4b82      	ldr	r3, [pc, #520]	@ (8000ed0 <menu_show+0x25c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	9200      	str	r2, [sp, #0]
 8000ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cce:	487d      	ldr	r0, [pc, #500]	@ (8000ec4 <menu_show+0x250>)
 8000cd0:	f000 ff22 	bl	8001b18 <ssd1306_WriteString>
			menu[0] = '\0';
 8000cd4:	4b7b      	ldr	r3, [pc, #492]	@ (8000ec4 <menu_show+0x250>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
			sprintf(menu, "val:%-3d|v:%-3d", dht.temperature, temp.set_val_min);
 8000cda:	4b7e      	ldr	r3, [pc, #504]	@ (8000ed4 <menu_show+0x260>)
 8000cdc:	7b1b      	ldrb	r3, [r3, #12]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b79      	ldr	r3, [pc, #484]	@ (8000ec8 <menu_show+0x254>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	497c      	ldr	r1, [pc, #496]	@ (8000ed8 <menu_show+0x264>)
 8000ce6:	4877      	ldr	r0, [pc, #476]	@ (8000ec4 <menu_show+0x250>)
 8000ce8:	f003 fe38 	bl	800495c <siprintf>
			ssd1306_SetCursor(0, 14);
 8000cec:	210e      	movs	r1, #14
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 ff38 	bl	8001b64 <ssd1306_SetCursor>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000cf4:	4b76      	ldr	r3, [pc, #472]	@ (8000ed0 <menu_show+0x25c>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	9200      	str	r2, [sp, #0]
 8000cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cfc:	4871      	ldr	r0, [pc, #452]	@ (8000ec4 <menu_show+0x250>)
 8000cfe:	f000 ff0b 	bl	8001b18 <ssd1306_WriteString>

			if (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false) {
 8000d02:	2140      	movs	r1, #64	@ 0x40
 8000d04:	4875      	ldr	r0, [pc, #468]	@ (8000edc <menu_show+0x268>)
 8000d06:	f001 fdc7 	bl	8002898 <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10d      	bne.n	8000d2c <menu_show+0xb8>
				temp.set_val_min -= 1;
 8000d10:	4b6d      	ldr	r3, [pc, #436]	@ (8000ec8 <menu_show+0x254>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a6c      	ldr	r2, [pc, #432]	@ (8000ec8 <menu_show+0x254>)
 8000d18:	6153      	str	r3, [r2, #20]
				while (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false)
 8000d1a:	bf00      	nop
 8000d1c:	2140      	movs	r1, #64	@ 0x40
 8000d1e:	486f      	ldr	r0, [pc, #444]	@ (8000edc <menu_show+0x268>)
 8000d20:	f001 fdba 	bl	8002898 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f8      	beq.n	8000d1c <menu_show+0xa8>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
				temp.set_val_min += 1;
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
					;
			}
			break;
 8000d2a:	e136      	b.n	8000f9a <menu_show+0x326>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	486c      	ldr	r0, [pc, #432]	@ (8000ee0 <menu_show+0x26c>)
 8000d30:	f001 fdb2 	bl	8002898 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f040 812f 	bne.w	8000f9a <menu_show+0x326>
				temp.set_val_min += 1;
 8000d3c:	4b62      	ldr	r3, [pc, #392]	@ (8000ec8 <menu_show+0x254>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a61      	ldr	r2, [pc, #388]	@ (8000ec8 <menu_show+0x254>)
 8000d44:	6153      	str	r3, [r2, #20]
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
 8000d46:	bf00      	nop
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4865      	ldr	r0, [pc, #404]	@ (8000ee0 <menu_show+0x26c>)
 8000d4c:	f001 fda4 	bl	8002898 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f8      	beq.n	8000d48 <menu_show+0xd4>
			break;
 8000d56:	e120      	b.n	8000f9a <menu_show+0x326>
			// light min
		case 1:
			ssd1306_Fill(Black);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 fdb9 	bl	80018d0 <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 feff 	bl	8001b64 <ssd1306_SetCursor>
			menu[0] = '\0';
 8000d66:	4b57      	ldr	r3, [pc, #348]	@ (8000ec4 <menu_show+0x250>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
			sprintf(menu, "%s min", light.infoName);
 8000d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8000ee4 <menu_show+0x270>)
 8000d6e:	4957      	ldr	r1, [pc, #348]	@ (8000ecc <menu_show+0x258>)
 8000d70:	4854      	ldr	r0, [pc, #336]	@ (8000ec4 <menu_show+0x250>)
 8000d72:	f003 fdf3 	bl	800495c <siprintf>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000d76:	4b56      	ldr	r3, [pc, #344]	@ (8000ed0 <menu_show+0x25c>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	9200      	str	r2, [sp, #0]
 8000d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d7e:	4851      	ldr	r0, [pc, #324]	@ (8000ec4 <menu_show+0x250>)
 8000d80:	f000 feca 	bl	8001b18 <ssd1306_WriteString>
			menu[0] = '\0';
 8000d84:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <menu_show+0x250>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
			sprintf(menu, "val:%-3d|v:%-3d", get_light(), light.set_val_min);
 8000d8a:	f000 f959 	bl	8001040 <get_light>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	4b54      	ldr	r3, [pc, #336]	@ (8000ee4 <menu_show+0x270>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4950      	ldr	r1, [pc, #320]	@ (8000ed8 <menu_show+0x264>)
 8000d96:	484b      	ldr	r0, [pc, #300]	@ (8000ec4 <menu_show+0x250>)
 8000d98:	f003 fde0 	bl	800495c <siprintf>
			ssd1306_SetCursor(0, 14);
 8000d9c:	210e      	movs	r1, #14
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 fee0 	bl	8001b64 <ssd1306_SetCursor>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000da4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed0 <menu_show+0x25c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	9200      	str	r2, [sp, #0]
 8000daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dac:	4845      	ldr	r0, [pc, #276]	@ (8000ec4 <menu_show+0x250>)
 8000dae:	f000 feb3 	bl	8001b18 <ssd1306_WriteString>

			if (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false) {
 8000db2:	2140      	movs	r1, #64	@ 0x40
 8000db4:	4849      	ldr	r0, [pc, #292]	@ (8000edc <menu_show+0x268>)
 8000db6:	f001 fd6f 	bl	8002898 <HAL_GPIO_ReadPin>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10d      	bne.n	8000ddc <menu_show+0x168>
				light.set_val_min -= 1;
 8000dc0:	4b48      	ldr	r3, [pc, #288]	@ (8000ee4 <menu_show+0x270>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	4a47      	ldr	r2, [pc, #284]	@ (8000ee4 <menu_show+0x270>)
 8000dc8:	6153      	str	r3, [r2, #20]
				while (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false)
 8000dca:	bf00      	nop
 8000dcc:	2140      	movs	r1, #64	@ 0x40
 8000dce:	4843      	ldr	r0, [pc, #268]	@ (8000edc <menu_show+0x268>)
 8000dd0:	f001 fd62 	bl	8002898 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f8      	beq.n	8000dcc <menu_show+0x158>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
				light.set_val_min += 1;
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
					;
			}
			break;
 8000dda:	e0e0      	b.n	8000f9e <menu_show+0x32a>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4840      	ldr	r0, [pc, #256]	@ (8000ee0 <menu_show+0x26c>)
 8000de0:	f001 fd5a 	bl	8002898 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 80d9 	bne.w	8000f9e <menu_show+0x32a>
				light.set_val_min += 1;
 8000dec:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee4 <menu_show+0x270>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ee4 <menu_show+0x270>)
 8000df4:	6153      	str	r3, [r2, #20]
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
 8000df6:	bf00      	nop
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4839      	ldr	r0, [pc, #228]	@ (8000ee0 <menu_show+0x26c>)
 8000dfc:	f001 fd4c 	bl	8002898 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f8      	beq.n	8000df8 <menu_show+0x184>
			break;
 8000e06:	e0ca      	b.n	8000f9e <menu_show+0x32a>
			// temp max
		case 2:
			get_temp_humidity();
 8000e08:	f000 f910 	bl	800102c <get_temp_humidity>
			ssd1306_Fill(Black);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 fd5f 	bl	80018d0 <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 fea5 	bl	8001b64 <ssd1306_SetCursor>
			menu[0] = '\0';
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec4 <menu_show+0x250>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
			sprintf(menu, "%s max", temp.infoName);
 8000e20:	4a29      	ldr	r2, [pc, #164]	@ (8000ec8 <menu_show+0x254>)
 8000e22:	4931      	ldr	r1, [pc, #196]	@ (8000ee8 <menu_show+0x274>)
 8000e24:	4827      	ldr	r0, [pc, #156]	@ (8000ec4 <menu_show+0x250>)
 8000e26:	f003 fd99 	bl	800495c <siprintf>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000e2a:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <menu_show+0x25c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	9200      	str	r2, [sp, #0]
 8000e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e32:	4824      	ldr	r0, [pc, #144]	@ (8000ec4 <menu_show+0x250>)
 8000e34:	f000 fe70 	bl	8001b18 <ssd1306_WriteString>
			menu[0] = '\0';
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <menu_show+0x250>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
			sprintf(menu, "val:%-3d|v:%-3d", dht.temperature, temp.set_val_max);
 8000e3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ed4 <menu_show+0x260>)
 8000e40:	7b1b      	ldrb	r3, [r3, #12]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <menu_show+0x254>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4923      	ldr	r1, [pc, #140]	@ (8000ed8 <menu_show+0x264>)
 8000e4a:	481e      	ldr	r0, [pc, #120]	@ (8000ec4 <menu_show+0x250>)
 8000e4c:	f003 fd86 	bl	800495c <siprintf>
			ssd1306_SetCursor(0, 14);
 8000e50:	210e      	movs	r1, #14
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 fe86 	bl	8001b64 <ssd1306_SetCursor>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000e58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <menu_show+0x25c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	9200      	str	r2, [sp, #0]
 8000e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e60:	4818      	ldr	r0, [pc, #96]	@ (8000ec4 <menu_show+0x250>)
 8000e62:	f000 fe59 	bl	8001b18 <ssd1306_WriteString>

			if (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false) {
 8000e66:	2140      	movs	r1, #64	@ 0x40
 8000e68:	481c      	ldr	r0, [pc, #112]	@ (8000edc <menu_show+0x268>)
 8000e6a:	f001 fd15 	bl	8002898 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10d      	bne.n	8000e90 <menu_show+0x21c>
				temp.set_val_max -= 1;
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <menu_show+0x254>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <menu_show+0x254>)
 8000e7c:	6193      	str	r3, [r2, #24]
				while (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false)
 8000e7e:	bf00      	nop
 8000e80:	2140      	movs	r1, #64	@ 0x40
 8000e82:	4816      	ldr	r0, [pc, #88]	@ (8000edc <menu_show+0x268>)
 8000e84:	f001 fd08 	bl	8002898 <HAL_GPIO_ReadPin>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f8      	beq.n	8000e80 <menu_show+0x20c>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
				temp.set_val_max += 1;
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
					;
			}
			break;
 8000e8e:	e088      	b.n	8000fa2 <menu_show+0x32e>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
 8000e90:	2101      	movs	r1, #1
 8000e92:	4813      	ldr	r0, [pc, #76]	@ (8000ee0 <menu_show+0x26c>)
 8000e94:	f001 fd00 	bl	8002898 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f040 8081 	bne.w	8000fa2 <menu_show+0x32e>
				temp.set_val_max += 1;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <menu_show+0x254>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a08      	ldr	r2, [pc, #32]	@ (8000ec8 <menu_show+0x254>)
 8000ea8:	6193      	str	r3, [r2, #24]
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
 8000eaa:	bf00      	nop
 8000eac:	2101      	movs	r1, #1
 8000eae:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <menu_show+0x26c>)
 8000eb0:	f001 fcf2 	bl	8002898 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f8      	beq.n	8000eac <menu_show+0x238>
			break;
 8000eba:	e072      	b.n	8000fa2 <menu_show+0x32e>
 8000ebc:	200001e4 	.word	0x200001e4
 8000ec0:	200001e5 	.word	0x200001e5
 8000ec4:	200001b4 	.word	0x200001b4
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	080052f0 	.word	0x080052f0
 8000ed0:	08005a94 	.word	0x08005a94
 8000ed4:	200001d4 	.word	0x200001d4
 8000ed8:	080052f8 	.word	0x080052f8
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	2000001c 	.word	0x2000001c
 8000ee8:	08005308 	.word	0x08005308
			// light max
		case 3:
			ssd1306_Fill(Black);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 fcef 	bl	80018d0 <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 fe35 	bl	8001b64 <ssd1306_SetCursor>
			menu[0] = '\0';
 8000efa:	4b44      	ldr	r3, [pc, #272]	@ (800100c <menu_show+0x398>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
			sprintf(menu, "%s max", light.infoName);
 8000f00:	4a43      	ldr	r2, [pc, #268]	@ (8001010 <menu_show+0x39c>)
 8000f02:	4944      	ldr	r1, [pc, #272]	@ (8001014 <menu_show+0x3a0>)
 8000f04:	4841      	ldr	r0, [pc, #260]	@ (800100c <menu_show+0x398>)
 8000f06:	f003 fd29 	bl	800495c <siprintf>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000f0a:	4b43      	ldr	r3, [pc, #268]	@ (8001018 <menu_show+0x3a4>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	9200      	str	r2, [sp, #0]
 8000f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f12:	483e      	ldr	r0, [pc, #248]	@ (800100c <menu_show+0x398>)
 8000f14:	f000 fe00 	bl	8001b18 <ssd1306_WriteString>
			menu[0] = '\0';
 8000f18:	4b3c      	ldr	r3, [pc, #240]	@ (800100c <menu_show+0x398>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
			sprintf(menu, "val:%-3d|v:%-3d", get_light(), light.set_val_max);
 8000f1e:	f000 f88f 	bl	8001040 <get_light>
 8000f22:	4602      	mov	r2, r0
 8000f24:	4b3a      	ldr	r3, [pc, #232]	@ (8001010 <menu_show+0x39c>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	493c      	ldr	r1, [pc, #240]	@ (800101c <menu_show+0x3a8>)
 8000f2a:	4838      	ldr	r0, [pc, #224]	@ (800100c <menu_show+0x398>)
 8000f2c:	f003 fd16 	bl	800495c <siprintf>
			ssd1306_SetCursor(0, 14);
 8000f30:	210e      	movs	r1, #14
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 fe16 	bl	8001b64 <ssd1306_SetCursor>
			ssd1306_WriteString(menu, Font_7x10, White);
 8000f38:	4b37      	ldr	r3, [pc, #220]	@ (8001018 <menu_show+0x3a4>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	9200      	str	r2, [sp, #0]
 8000f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f40:	4832      	ldr	r0, [pc, #200]	@ (800100c <menu_show+0x398>)
 8000f42:	f000 fde9 	bl	8001b18 <ssd1306_WriteString>

			if (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false) {
 8000f46:	2140      	movs	r1, #64	@ 0x40
 8000f48:	4835      	ldr	r0, [pc, #212]	@ (8001020 <menu_show+0x3ac>)
 8000f4a:	f001 fca5 	bl	8002898 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10d      	bne.n	8000f70 <menu_show+0x2fc>
				light.set_val_max -= 1;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <menu_show+0x39c>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001010 <menu_show+0x39c>)
 8000f5c:	6193      	str	r3, [r2, #24]
				while (HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin) == false)
 8000f5e:	bf00      	nop
 8000f60:	2140      	movs	r1, #64	@ 0x40
 8000f62:	482f      	ldr	r0, [pc, #188]	@ (8001020 <menu_show+0x3ac>)
 8000f64:	f001 fc98 	bl	8002898 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f8      	beq.n	8000f60 <menu_show+0x2ec>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
				light.set_val_max += 1;
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
					;
			}
			break;
 8000f6e:	e01a      	b.n	8000fa6 <menu_show+0x332>
			} else if (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false) {
 8000f70:	2101      	movs	r1, #1
 8000f72:	482c      	ldr	r0, [pc, #176]	@ (8001024 <menu_show+0x3b0>)
 8000f74:	f001 fc90 	bl	8002898 <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d113      	bne.n	8000fa6 <menu_show+0x332>
				light.set_val_max += 1;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <menu_show+0x39c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a22      	ldr	r2, [pc, #136]	@ (8001010 <menu_show+0x39c>)
 8000f86:	6193      	str	r3, [r2, #24]
				while (HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin) == false)
 8000f88:	bf00      	nop
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4825      	ldr	r0, [pc, #148]	@ (8001024 <menu_show+0x3b0>)
 8000f8e:	f001 fc83 	bl	8002898 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f8      	beq.n	8000f8a <menu_show+0x316>
			break;
 8000f98:	e005      	b.n	8000fa6 <menu_show+0x332>
			break;
 8000f9a:	bf00      	nop
 8000f9c:	e004      	b.n	8000fa8 <menu_show+0x334>
			break;
 8000f9e:	bf00      	nop
 8000fa0:	e002      	b.n	8000fa8 <menu_show+0x334>
			break;
 8000fa2:	bf00      	nop
 8000fa4:	e000      	b.n	8000fa8 <menu_show+0x334>
			break;
 8000fa6:	bf00      	nop
		}

		// menu control
		if (HAL_GPIO_ReadPin(btn6_GPIO_Port, btn6_Pin) == false) {
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <menu_show+0x3ac>)
 8000fae:	f001 fc73 	bl	8002898 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10e      	bne.n	8000fd6 <menu_show+0x362>
			if (page != 3)
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <menu_show+0x3b4>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d006      	beq.n	8000fce <menu_show+0x35a>
				page++;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <menu_show+0x3b4>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <menu_show+0x3b4>)
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e018      	b.n	8001000 <menu_show+0x38c>
			else
				page = 0;
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <menu_show+0x3b4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e014      	b.n	8001000 <menu_show+0x38c>
		} else if (HAL_GPIO_ReadPin(btn4_GPIO_Port, btn4_Pin) == false) {
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	4812      	ldr	r0, [pc, #72]	@ (8001024 <menu_show+0x3b0>)
 8000fda:	f001 fc5d 	bl	8002898 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10d      	bne.n	8001000 <menu_show+0x38c>
			if (page != 0)
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <menu_show+0x3b4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <menu_show+0x386>
				page--;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <menu_show+0x3b4>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <menu_show+0x3b4>)
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e002      	b.n	8001000 <menu_show+0x38c>
			else
				page = 3;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <menu_show+0x3b4>)
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f000 fe6b 	bl	8001cdc <HAL_Delay>
	}

}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001b4 	.word	0x200001b4
 8001010:	2000001c 	.word	0x2000001c
 8001014:	08005308 	.word	0x08005308
 8001018:	08005a94 	.word	0x08005a94
 800101c:	080052f8 	.word	0x080052f8
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	200001e5 	.word	0x200001e5

0800102c <get_temp_humidity>:
#include "sensors.h"



void get_temp_humidity() {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	readDHT11(&dht);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <get_temp_humidity+0x10>)
 8001032:	f000 fa31 	bl	8001498 <readDHT11>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001d4 	.word	0x200001d4

08001040 <get_light>:

int get_light() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <get_light+0x10>)
 8001046:	f000 ff65 	bl	8001f14 <HAL_ADC_GetValue>
 800104a:	4603      	mov	r3, r0
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200000b0 	.word	0x200000b0

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a0f      	ldr	r2, [pc, #60]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	@ 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <HAL_ADC_MspInit+0x7c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d127      	bne.n	8001116 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_ADC_MspInit+0x80>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	4a15      	ldr	r2, [pc, #84]	@ (8001124 <HAL_ADC_MspInit+0x80>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <HAL_ADC_MspInit+0x80>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_ADC_MspInit+0x80>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <HAL_ADC_MspInit+0x80>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <HAL_ADC_MspInit+0x80>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010fe:	2302      	movs	r3, #2
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	2303      	movs	r3, #3
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <HAL_ADC_MspInit+0x84>)
 8001112:	f001 fa3d 	bl	8002590 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	@ 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40012000 	.word	0x40012000
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <HAL_I2C_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12b      	bne.n	80011a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116a:	23c0      	movs	r3, #192	@ 0xc0
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117a:	2304      	movs	r3, #4
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <HAL_I2C_MspInit+0x8c>)
 8001186:	f001 fa03 	bl	8002590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001194:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0c      	ldr	r2, [pc, #48]	@ (800120c <HAL_RTC_MspInit+0x50>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d111      	bne.n	8001202 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011de:	2302      	movs	r3, #2
 80011e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fc8f 	bl	8003b10 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80011f8:	f7ff fcc6 	bl	8000b88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <HAL_RTC_MspInit+0x54>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40002800 	.word	0x40002800
 8001210:	42470e3c 	.word	0x42470e3c

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001224:	d10d      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6413      	str	r3, [r2, #64]	@ 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <NMI_Handler+0x4>

0800125c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <MemManage_Handler+0x4>

0800126c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <UsageFault_Handler+0x4>

0800127c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012aa:	f000 fcf7 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn2_Pin);
 80012b6:	2080      	movs	r0, #128	@ 0x80
 80012b8:	f001 fb20 	bl	80028fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	@ (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f003 fb76 	bl	80049e0 <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20010000 	.word	0x20010000
 8001320:	00000400 	.word	0x00000400
 8001324:	200001e8 	.word	0x200001e8
 8001328:	20000540 	.word	0x20000540

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	@ (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <get_time>:
#include "time.h"

RTC_TimeTypeDef get_time() {
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef gDate = {0};
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	480a      	ldr	r0, [pc, #40]	@ (80013a0 <get_time+0x50>)
 8001376:	f002 fdd6 	bl	8003f26 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <get_time+0x50>)
 8001384:	f002 feb1 	bl	80040ea <HAL_RTC_GetDate>
	return gTime;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	461d      	mov	r5, r3
 800138c:	f107 040c 	add.w	r4, r7, #12
 8001390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	602b      	str	r3, [r5, #0]
}
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bdb0      	pop	{r4, r5, r7, pc}
 80013a0:	2000014c 	.word	0x2000014c

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013a8:	f7ff ffc0 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f003 fb0b 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff f8cb 	bl	8000570 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80013e8:	08005ae4 	.word	0x08005ae4
  ldr r2, =_sbss
 80013ec:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80013f0:	20000540 	.word	0x20000540

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>

080013f6 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	609a      	str	r2, [r3, #8]
	dht->port = port;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	809a      	strh	r2, [r3, #4]
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b088      	sub	sp, #32
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d111      	bne.n	8001468 <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	889b      	ldrh	r3, [r3, #4]
 8001448:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f001 f895 	bl	8002590 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8001466:	e013      	b.n	8001490 <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d110      	bne.n	8001490 <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f107 020c 	add.w	r2, r7, #12
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f001 f880 	bl	8002590 <HAL_GPIO_Init>
}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	@ 0x50
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80014a4:	2300      	movs	r3, #0
 80014a6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 80014c6:	2101      	movs	r1, #1
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ffaa 	bl	8001422 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	889b      	ldrh	r3, [r3, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	f001 f9f5 	bl	80028c8 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 80014de:	2012      	movs	r0, #18
 80014e0:	f000 fbfc 	bl	8001cdc <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 ff59 	bl	80043a4 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 80014f2:	2100      	movs	r1, #0
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff94 	bl	8001422 <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001504:	e00b      	b.n	800151e <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150e:	b29b      	uxth	r3, r3
 8001510:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001514:	d903      	bls.n	800151e <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 8001516:	b662      	cpsie	i
}
 8001518:	bf00      	nop
			__enable_irq();
			return 0;
 800151a:	2300      	movs	r3, #0
 800151c:	e130      	b.n	8001780 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	889b      	ldrh	r3, [r3, #4]
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f001 f9b5 	bl	8002898 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d0e8      	beq.n	8001506 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800153e:	e00b      	b.n	8001558 <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	b29b      	uxth	r3, r3
 800154a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800154e:	d903      	bls.n	8001558 <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001550:	b662      	cpsie	i
}
 8001552:	bf00      	nop
			__enable_irq();
			return 0;
 8001554:	2300      	movs	r3, #0
 8001556:	e113      	b.n	8001780 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	889b      	ldrh	r3, [r3, #4]
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f001 f998 	bl	8002898 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0e8      	beq.n	8001540 <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	86fb      	strh	r3, [r7, #54]	@ 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001582:	e00b      	b.n	800159c <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	b29b      	uxth	r3, r3
 800158e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001592:	d903      	bls.n	800159c <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 8001594:	b662      	cpsie	i
}
 8001596:	bf00      	nop
			__enable_irq();
			return 0;
 8001598:	2300      	movs	r3, #0
 800159a:	e0f1      	b.n	8001780 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f001 f976 	bl	8002898 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d0e8      	beq.n	8001584 <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	86bb      	strh	r3, [r7, #52]	@ 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 80015bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80015be:	2b4a      	cmp	r3, #74	@ 0x4a
 80015c0:	d80c      	bhi.n	80015dc <readDHT11+0x144>
 80015c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80015c4:	2b55      	cmp	r3, #85	@ 0x55
 80015c6:	d909      	bls.n	80015dc <readDHT11+0x144>
 80015c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80015ca:	2b4a      	cmp	r3, #74	@ 0x4a
 80015cc:	d806      	bhi.n	80015dc <readDHT11+0x144>
 80015ce:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80015d0:	2b55      	cmp	r3, #85	@ 0x55
 80015d2:	d903      	bls.n	80015dc <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 80015d4:	b662      	cpsie	i
}
 80015d6:	bf00      	nop
	{
		__enable_irq();
		return 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	e0d1      	b.n	8001780 <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 80015dc:	2300      	movs	r3, #0
 80015de:	647b      	str	r3, [r7, #68]	@ 0x44
 80015e0:	e05d      	b.n	800169e <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80015ec:	e00b      	b.n	8001606 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015fc:	d903      	bls.n	8001606 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 80015fe:	b662      	cpsie	i
}
 8001600:	bf00      	nop
				__enable_irq();
				return 0;
 8001602:	2300      	movs	r3, #0
 8001604:	e0bc      	b.n	8001780 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	889b      	ldrh	r3, [r3, #4]
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f001 f941 	bl	8002898 <HAL_GPIO_ReadPin>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0e8      	beq.n	80015ee <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001626:	e00b      	b.n	8001640 <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	b29b      	uxth	r3, r3
 8001632:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001636:	d903      	bls.n	8001640 <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 8001638:	b662      	cpsie	i
}
 800163a:	bf00      	nop
				__enable_irq();
				return 0;
 800163c:	2300      	movs	r3, #0
 800163e:	e09f      	b.n	8001780 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	889b      	ldrh	r3, [r3, #4]
 8001648:	4619      	mov	r1, r3
 800164a:	4610      	mov	r0, r2
 800164c:	f001 f924 	bl	8002898 <HAL_GPIO_ReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	2b01      	cmp	r3, #1
 8001654:	d0e8      	beq.n	8001628 <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	86fb      	strh	r3, [r7, #54]	@ 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 8001660:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001662:	2b14      	cmp	r3, #20
 8001664:	d906      	bls.n	8001674 <readDHT11+0x1dc>
 8001666:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001668:	2b1d      	cmp	r3, #29
 800166a:	d803      	bhi.n	8001674 <readDHT11+0x1dc>
		{
			mBit = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001672:	e008      	b.n	8001686 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8001674:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001676:	2b3c      	cmp	r3, #60	@ 0x3c
 8001678:	d905      	bls.n	8001686 <readDHT11+0x1ee>
 800167a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800167c:	2b4f      	cmp	r3, #79	@ 0x4f
 800167e:	d802      	bhi.n	8001686 <readDHT11+0x1ee>
		{
			 mBit = 1;
 8001680:	2301      	movs	r3, #1
 8001682:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8001686:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	f107 0208 	add.w	r2, r7, #8
 8001690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001692:	4413      	add	r3, r2
 8001694:	460a      	mov	r2, r1
 8001696:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8001698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800169a:	3301      	adds	r3, #1
 800169c:	647b      	str	r3, [r7, #68]	@ 0x44
 800169e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016a0:	2b27      	cmp	r3, #39	@ 0x27
 80016a2:	dd9e      	ble.n	80015e2 <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fed5 	bl	8004458 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 80016ae:	b662      	cpsie	i
}
 80016b0:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80016b6:	e011      	b.n	80016dc <readDHT11+0x244>
	{
		humVal += mData[i];
 80016b8:	f107 0208 	add.w	r2, r7, #8
 80016bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016be:	4413      	add	r3, r2
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016c6:	4413      	add	r3, r2
 80016c8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		humVal = humVal << 1;
 80016cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for(int i = 0; i < 8; i++)
 80016d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016d8:	3301      	adds	r3, #1
 80016da:	643b      	str	r3, [r7, #64]	@ 0x40
 80016dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016de:	2b07      	cmp	r3, #7
 80016e0:	ddea      	ble.n	80016b8 <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 80016e2:	2310      	movs	r3, #16
 80016e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016e6:	e011      	b.n	800170c <readDHT11+0x274>
	{
		tempVal += mData[i];
 80016e8:	f107 0208 	add.w	r2, r7, #8
 80016ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ee:	4413      	add	r3, r2
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80016f6:	4413      	add	r3, r2
 80016f8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		tempVal = tempVal << 1;
 80016fc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	for(int i = 16; i < 24; i++)
 8001706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001708:	3301      	adds	r3, #1
 800170a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800170c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800170e:	2b17      	cmp	r3, #23
 8001710:	ddea      	ble.n	80016e8 <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8001712:	2320      	movs	r3, #32
 8001714:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001716:	e011      	b.n	800173c <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 8001718:	f107 0208 	add.w	r2, r7, #8
 800171c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800171e:	4413      	add	r3, r2
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001726:	4413      	add	r3, r2
 8001728:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		parityVal = parityVal << 1;
 800172c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i = 32; i < 40; i++)
 8001736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001738:	3301      	adds	r3, #1
 800173a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800173c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800173e:	2b27      	cmp	r3, #39	@ 0x27
 8001740:	ddea      	ble.n	8001718 <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 8001742:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	humVal = humVal >> 1;
 800174c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	tempVal = tempVal >> 1;
 8001756:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	genParity = humVal + tempVal;
 8001760:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001764:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001768:	4413      	add	r3, r2
 800176a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001774:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800177c:	735a      	strb	r2, [r3, #13]


	return 1;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3750      	adds	r7, #80	@ 0x50
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af04      	add	r7, sp, #16
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	2301      	movs	r3, #1
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	1dfb      	adds	r3, r7, #7
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	2200      	movs	r2, #0
 80017b4:	2178      	movs	r1, #120	@ 0x78
 80017b6:	4803      	ldr	r0, [pc, #12]	@ (80017c4 <ssd1306_WriteCommand+0x2c>)
 80017b8:	f001 f9fc 	bl	8002bb4 <HAL_I2C_Mem_Write>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200000f8 	.word	0x200000f8

080017c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af04      	add	r7, sp, #16
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017da:	9202      	str	r2, [sp, #8]
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	2240      	movs	r2, #64	@ 0x40
 80017e6:	2178      	movs	r1, #120	@ 0x78
 80017e8:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <ssd1306_WriteData+0x30>)
 80017ea:	f001 f9e3 	bl	8002bb4 <HAL_I2C_Mem_Write>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200000f8 	.word	0x200000f8

080017fc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001800:	f7ff ffc2 	bl	8001788 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001804:	2064      	movs	r0, #100	@ 0x64
 8001806:	f000 fa69 	bl	8001cdc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800180a:	2000      	movs	r0, #0
 800180c:	f000 f9d6 	bl	8001bbc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001810:	2020      	movs	r0, #32
 8001812:	f7ff ffc1 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff ffbe 	bl	8001798 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800181c:	20b0      	movs	r0, #176	@ 0xb0
 800181e:	f7ff ffbb 	bl	8001798 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001822:	20c8      	movs	r0, #200	@ 0xc8
 8001824:	f7ff ffb8 	bl	8001798 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff ffb5 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800182e:	2010      	movs	r0, #16
 8001830:	f7ff ffb2 	bl	8001798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001834:	2040      	movs	r0, #64	@ 0x40
 8001836:	f7ff ffaf 	bl	8001798 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800183a:	20ff      	movs	r0, #255	@ 0xff
 800183c:	f000 f9aa 	bl	8001b94 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001840:	20a1      	movs	r0, #161	@ 0xa1
 8001842:	f7ff ffa9 	bl	8001798 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001846:	20a6      	movs	r0, #166	@ 0xa6
 8001848:	f7ff ffa6 	bl	8001798 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800184c:	20a8      	movs	r0, #168	@ 0xa8
 800184e:	f7ff ffa3 	bl	8001798 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001852:	201f      	movs	r0, #31
 8001854:	f7ff ffa0 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001858:	20a4      	movs	r0, #164	@ 0xa4
 800185a:	f7ff ff9d 	bl	8001798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800185e:	20d3      	movs	r0, #211	@ 0xd3
 8001860:	f7ff ff9a 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff ff97 	bl	8001798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800186a:	20d5      	movs	r0, #213	@ 0xd5
 800186c:	f7ff ff94 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001870:	20f0      	movs	r0, #240	@ 0xf0
 8001872:	f7ff ff91 	bl	8001798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001876:	20d9      	movs	r0, #217	@ 0xd9
 8001878:	f7ff ff8e 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800187c:	2022      	movs	r0, #34	@ 0x22
 800187e:	f7ff ff8b 	bl	8001798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001882:	20da      	movs	r0, #218	@ 0xda
 8001884:	f7ff ff88 	bl	8001798 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001888:	2002      	movs	r0, #2
 800188a:	f7ff ff85 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800188e:	20db      	movs	r0, #219	@ 0xdb
 8001890:	f7ff ff82 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001894:	2020      	movs	r0, #32
 8001896:	f7ff ff7f 	bl	8001798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800189a:	208d      	movs	r0, #141	@ 0x8d
 800189c:	f7ff ff7c 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80018a0:	2014      	movs	r0, #20
 80018a2:	f7ff ff79 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 f988 	bl	8001bbc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 f80f 	bl	80018d0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80018b2:	f000 f825 	bl	8001900 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <ssd1306_Init+0xd0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <ssd1306_Init+0xd0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80018c2:	4b02      	ldr	r3, [pc, #8]	@ (80018cc <ssd1306_Init+0xd0>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	711a      	strb	r2, [r3, #4]
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200003ec 	.word	0x200003ec

080018d0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <ssd1306_Fill+0x14>
 80018e0:	2300      	movs	r3, #0
 80018e2:	e000      	b.n	80018e6 <ssd1306_Fill+0x16>
 80018e4:	23ff      	movs	r3, #255	@ 0xff
 80018e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ea:	4619      	mov	r1, r3
 80018ec:	4803      	ldr	r0, [pc, #12]	@ (80018fc <ssd1306_Fill+0x2c>)
 80018ee:	f003 f86f 	bl	80049d0 <memset>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200001ec 	.word	0x200001ec

08001900 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001906:	2300      	movs	r3, #0
 8001908:	71fb      	strb	r3, [r7, #7]
 800190a:	e016      	b.n	800193a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	3b50      	subs	r3, #80	@ 0x50
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff40 	bl	8001798 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001918:	2000      	movs	r0, #0
 800191a:	f7ff ff3d 	bl	8001798 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800191e:	2010      	movs	r0, #16
 8001920:	f7ff ff3a 	bl	8001798 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	01db      	lsls	r3, r3, #7
 8001928:	4a08      	ldr	r2, [pc, #32]	@ (800194c <ssd1306_UpdateScreen+0x4c>)
 800192a:	4413      	add	r3, r2
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff4a 	bl	80017c8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	3301      	adds	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d9e5      	bls.n	800190c <ssd1306_UpdateScreen+0xc>
    }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200001ec 	.word	0x200001ec

08001950 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	460b      	mov	r3, r1
 800195c:	71bb      	strb	r3, [r7, #6]
 800195e:	4613      	mov	r3, r2
 8001960:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db3d      	blt.n	80019e6 <ssd1306_DrawPixel+0x96>
 800196a:	79bb      	ldrb	r3, [r7, #6]
 800196c:	2b1f      	cmp	r3, #31
 800196e:	d83a      	bhi.n	80019e6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001970:	797b      	ldrb	r3, [r7, #5]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d11a      	bne.n	80019ac <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	08db      	lsrs	r3, r3, #3
 800197c:	b2d8      	uxtb	r0, r3
 800197e:	4603      	mov	r3, r0
 8001980:	01db      	lsls	r3, r3, #7
 8001982:	4413      	add	r3, r2
 8001984:	4a1b      	ldr	r2, [pc, #108]	@ (80019f4 <ssd1306_DrawPixel+0xa4>)
 8001986:	5cd3      	ldrb	r3, [r2, r3]
 8001988:	b25a      	sxtb	r2, r3
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	b25b      	sxtb	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b259      	sxtb	r1, r3
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	4603      	mov	r3, r0
 80019a0:	01db      	lsls	r3, r3, #7
 80019a2:	4413      	add	r3, r2
 80019a4:	b2c9      	uxtb	r1, r1
 80019a6:	4a13      	ldr	r2, [pc, #76]	@ (80019f4 <ssd1306_DrawPixel+0xa4>)
 80019a8:	54d1      	strb	r1, [r2, r3]
 80019aa:	e01d      	b.n	80019e8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	b2d8      	uxtb	r0, r3
 80019b4:	4603      	mov	r3, r0
 80019b6:	01db      	lsls	r3, r3, #7
 80019b8:	4413      	add	r3, r2
 80019ba:	4a0e      	ldr	r2, [pc, #56]	@ (80019f4 <ssd1306_DrawPixel+0xa4>)
 80019bc:	5cd3      	ldrb	r3, [r2, r3]
 80019be:	b25a      	sxtb	r2, r3
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	2101      	movs	r1, #1
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	4013      	ands	r3, r2
 80019d4:	b259      	sxtb	r1, r3
 80019d6:	79fa      	ldrb	r2, [r7, #7]
 80019d8:	4603      	mov	r3, r0
 80019da:	01db      	lsls	r3, r3, #7
 80019dc:	4413      	add	r3, r2
 80019de:	b2c9      	uxtb	r1, r1
 80019e0:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <ssd1306_DrawPixel+0xa4>)
 80019e2:	54d1      	strb	r1, [r2, r3]
 80019e4:	e000      	b.n	80019e8 <ssd1306_DrawPixel+0x98>
        return;
 80019e6:	bf00      	nop
    }
}
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200001ec 	.word	0x200001ec

080019f8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4604      	mov	r4, r0
 8001a00:	4638      	mov	r0, r7
 8001a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001a06:	4623      	mov	r3, r4
 8001a08:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b1f      	cmp	r3, #31
 8001a0e:	d902      	bls.n	8001a16 <ssd1306_WriteChar+0x1e>
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a14:	d901      	bls.n	8001a1a <ssd1306_WriteChar+0x22>
        return 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e077      	b.n	8001b0a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b14 <ssd1306_WriteChar+0x11c>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	783b      	ldrb	r3, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	2b80      	cmp	r3, #128	@ 0x80
 8001a26:	dc06      	bgt.n	8001a36 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001a28:	4b3a      	ldr	r3, [pc, #232]	@ (8001b14 <ssd1306_WriteChar+0x11c>)
 8001a2a:	885b      	ldrh	r3, [r3, #2]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	787b      	ldrb	r3, [r7, #1]
 8001a30:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	dd01      	ble.n	8001a3a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e067      	b.n	8001b0a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e04e      	b.n	8001ade <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	3b20      	subs	r3, #32
 8001a46:	7879      	ldrb	r1, [r7, #1]
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	440b      	add	r3, r1
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	e036      	b.n	8001ace <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001a70:	4b28      	ldr	r3, [pc, #160]	@ (8001b14 <ssd1306_WriteChar+0x11c>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b2d8      	uxtb	r0, r3
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <ssd1306_WriteChar+0x11c>)
 8001a80:	885b      	ldrh	r3, [r3, #2]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff ff5d 	bl	8001950 <ssd1306_DrawPixel>
 8001a96:	e017      	b.n	8001ac8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a98:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <ssd1306_WriteChar+0x11c>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b2d8      	uxtb	r0, r3
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <ssd1306_WriteChar+0x11c>)
 8001aa8:	885b      	ldrh	r3, [r3, #2]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b2d9      	uxtb	r1, r3
 8001ab4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f7ff ff44 	bl	8001950 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	3301      	adds	r3, #1
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	783b      	ldrb	r3, [r7, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d3c3      	bcc.n	8001a60 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	3301      	adds	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	787b      	ldrb	r3, [r7, #1]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d3ab      	bcc.n	8001a40 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <ssd1306_WriteChar+0x11c>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	2a00      	cmp	r2, #0
 8001af0:	d005      	beq.n	8001afe <ssd1306_WriteChar+0x106>
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	3a20      	subs	r2, #32
 8001af8:	440a      	add	r2, r1
 8001afa:	7812      	ldrb	r2, [r2, #0]
 8001afc:	e000      	b.n	8001b00 <ssd1306_WriteChar+0x108>
 8001afe:	783a      	ldrb	r2, [r7, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <ssd1306_WriteChar+0x11c>)
 8001b06:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	@ 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200003ec 	.word	0x200003ec

08001b18 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	4638      	mov	r0, r7
 8001b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001b26:	e013      	b.n	8001b50 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	7818      	ldrb	r0, [r3, #0]
 8001b2c:	7e3b      	ldrb	r3, [r7, #24]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	463b      	mov	r3, r7
 8001b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b34:	f7ff ff60 	bl	80019f8 <ssd1306_WriteChar>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d002      	beq.n	8001b4a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	e008      	b.n	8001b5c <ssd1306_WriteString+0x44>
        }
        str++;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1e7      	bne.n	8001b28 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <ssd1306_SetCursor+0x2c>)
 8001b7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001b7c:	79bb      	ldrb	r3, [r7, #6]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <ssd1306_SetCursor+0x2c>)
 8001b82:	805a      	strh	r2, [r3, #2]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	200003ec 	.word	0x200003ec

08001b94 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b9e:	2381      	movs	r3, #129	@ 0x81
 8001ba0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fdf7 	bl	8001798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fdf3 	bl	8001798 <ssd1306_WriteCommand>
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001bcc:	23af      	movs	r3, #175	@ 0xaf
 8001bce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <ssd1306_SetDisplayOn+0x38>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	715a      	strb	r2, [r3, #5]
 8001bd6:	e004      	b.n	8001be2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001bd8:	23ae      	movs	r3, #174	@ 0xae
 8001bda:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <ssd1306_SetDisplayOn+0x38>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fdd7 	bl	8001798 <ssd1306_WriteCommand>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200003ec 	.word	0x200003ec

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <HAL_Init+0x40>)
 8001c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_Init+0x40>)
 8001c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_Init+0x40>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 fc73 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fa12 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fc8b 	bl	8002576 <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c78:	f000 fc53 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	@ (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000038 	.word	0x20000038
 8001c94:	20000040 	.word	0x20000040
 8001c98:	2000003c 	.word	0x2000003c

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000040 	.word	0x20000040
 8001cc0:	200003f4 	.word	0x200003f4

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	@ (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200003f4 	.word	0x200003f4

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000040 	.word	0x20000040

08001d24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e033      	b.n	8001da2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff f9ae 	bl	80010a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d6a:	f023 0302 	bic.w	r3, r3, #2
 8001d6e:	f043 0202 	orr.w	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f9fc 	bl	8002174 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d92:	e001      	b.n	8001d98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Start+0x1a>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e097      	b.n	8001ef6 <HAL_ADC_Start+0x14a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d018      	beq.n	8001e0e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dec:	4b45      	ldr	r3, [pc, #276]	@ (8001f04 <HAL_ADC_Start+0x158>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a45      	ldr	r2, [pc, #276]	@ (8001f08 <HAL_ADC_Start+0x15c>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0c9a      	lsrs	r2, r3, #18
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e00:	e002      	b.n	8001e08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f9      	bne.n	8001e02 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d15f      	bne.n	8001edc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e5a:	d106      	bne.n	8001e6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e60:	f023 0206 	bic.w	r2, r3, #6
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e68:	e002      	b.n	8001e70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e78:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_ADC_Start+0x160>)
 8001e7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e84:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10f      	bne.n	8001eb2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d129      	bne.n	8001ef4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	e020      	b.n	8001ef4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a16      	ldr	r2, [pc, #88]	@ (8001f10 <HAL_ADC_Start+0x164>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d11b      	bne.n	8001ef4 <HAL_ADC_Start+0x148>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d114      	bne.n	8001ef4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	e00b      	b.n	8001ef4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	f043 0210 	orr.w	r2, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000038 	.word	0x20000038
 8001f08:	431bde83 	.word	0x431bde83
 8001f0c:	40012300 	.word	0x40012300
 8001f10:	40012000 	.word	0x40012000

08001f14 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1c>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e105      	b.n	8002158 <HAL_ADC_ConfigChannel+0x228>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b09      	cmp	r3, #9
 8001f5a:	d925      	bls.n	8001fa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68d9      	ldr	r1, [r3, #12]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b1e      	subs	r3, #30
 8001f72:	2207      	movs	r2, #7
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	400a      	ands	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4403      	add	r3, r0
 8001f9a:	3b1e      	subs	r3, #30
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	e022      	b.n	8001fee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	400a      	ands	r2, r1
 8001fca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4403      	add	r3, r0
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d824      	bhi.n	8002040 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b05      	subs	r3, #5
 8002008:	221f      	movs	r2, #31
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4618      	mov	r0, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	3b05      	subs	r3, #5
 8002032:	fa00 f203 	lsl.w	r2, r0, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	635a      	str	r2, [r3, #52]	@ 0x34
 800203e:	e04c      	b.n	80020da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	d824      	bhi.n	8002092 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b23      	subs	r3, #35	@ 0x23
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43da      	mvns	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	400a      	ands	r2, r1
 8002068:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b23      	subs	r3, #35	@ 0x23
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002090:	e023      	b.n	80020da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b41      	subs	r3, #65	@ 0x41
 80020a4:	221f      	movs	r2, #31
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	3b41      	subs	r3, #65	@ 0x41
 80020ce:	fa00 f203 	lsl.w	r2, r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020da:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <HAL_ADC_ConfigChannel+0x234>)
 80020dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a21      	ldr	r2, [pc, #132]	@ (8002168 <HAL_ADC_ConfigChannel+0x238>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x1cc>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b12      	cmp	r3, #18
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a19      	ldr	r2, [pc, #100]	@ (8002168 <HAL_ADC_ConfigChannel+0x238>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d123      	bne.n	800214e <HAL_ADC_ConfigChannel+0x21e>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b10      	cmp	r3, #16
 800210c:	d003      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x1e6>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b11      	cmp	r3, #17
 8002114:	d11b      	bne.n	800214e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d111      	bne.n	800214e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_ADC_ConfigChannel+0x23c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a10      	ldr	r2, [pc, #64]	@ (8002170 <HAL_ADC_ConfigChannel+0x240>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	0c9a      	lsrs	r2, r3, #18
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002140:	e002      	b.n	8002148 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3b01      	subs	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f9      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40012300 	.word	0x40012300
 8002168:	40012000 	.word	0x40012000
 800216c:	20000038 	.word	0x20000038
 8002170:	431bde83 	.word	0x431bde83

08002174 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217c:	4b79      	ldr	r3, [pc, #484]	@ (8002364 <ADC_Init+0x1f0>)
 800217e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	431a      	orrs	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	021a      	lsls	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6899      	ldr	r1, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	4a58      	ldr	r2, [pc, #352]	@ (8002368 <ADC_Init+0x1f4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d022      	beq.n	8002252 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800221a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800223c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	e00f      	b.n	8002272 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002270:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0202 	bic.w	r2, r2, #2
 8002280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
 800228c:	005a      	lsls	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	3b01      	subs	r3, #1
 80022cc:	035a      	lsls	r2, r3, #13
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	e007      	b.n	80022e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	3b01      	subs	r3, #1
 8002304:	051a      	lsls	r2, r3, #20
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800231c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6899      	ldr	r1, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800232a:	025a      	lsls	r2, r3, #9
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6899      	ldr	r1, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	029a      	lsls	r2, r3, #10
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40012300 	.word	0x40012300
 8002368:	0f000001 	.word	0x0f000001

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4907      	ldr	r1, [pc, #28]	@ (8002408 <__NVIC_EnableIRQ+0x38>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	@ (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	@ (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	@ 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	@ 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff29 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff3e 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff31 	bl	80023d0 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa2 	bl	80024c8 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	@ 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	e159      	b.n	8002860 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025ac:	2201      	movs	r2, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f040 8148 	bne.w	800285a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d005      	beq.n	80025e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d130      	bne.n	8002644 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	2203      	movs	r2, #3
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002618:	2201      	movs	r2, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 0201 	and.w	r2, r3, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b03      	cmp	r3, #3
 800264e:	d017      	beq.n	8002680 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d123      	bne.n	80026d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	220f      	movs	r2, #15
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	08da      	lsrs	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3208      	adds	r2, #8
 80026ce:	69b9      	ldr	r1, [r7, #24]
 80026d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	2203      	movs	r2, #3
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0203 	and.w	r2, r3, #3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a2 	beq.w	800285a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b57      	ldr	r3, [pc, #348]	@ (8002878 <HAL_GPIO_Init+0x2e8>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	4a56      	ldr	r2, [pc, #344]	@ (8002878 <HAL_GPIO_Init+0x2e8>)
 8002720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002724:	6453      	str	r3, [r2, #68]	@ 0x44
 8002726:	4b54      	ldr	r3, [pc, #336]	@ (8002878 <HAL_GPIO_Init+0x2e8>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002732:	4a52      	ldr	r2, [pc, #328]	@ (800287c <HAL_GPIO_Init+0x2ec>)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	220f      	movs	r2, #15
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a49      	ldr	r2, [pc, #292]	@ (8002880 <HAL_GPIO_Init+0x2f0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d019      	beq.n	8002792 <HAL_GPIO_Init+0x202>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a48      	ldr	r2, [pc, #288]	@ (8002884 <HAL_GPIO_Init+0x2f4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0x1fe>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a47      	ldr	r2, [pc, #284]	@ (8002888 <HAL_GPIO_Init+0x2f8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_GPIO_Init+0x1fa>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a46      	ldr	r2, [pc, #280]	@ (800288c <HAL_GPIO_Init+0x2fc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x1f6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a45      	ldr	r2, [pc, #276]	@ (8002890 <HAL_GPIO_Init+0x300>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_GPIO_Init+0x1f2>
 800277e:	2304      	movs	r3, #4
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x204>
 8002782:	2307      	movs	r3, #7
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x204>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x204>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x204>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x204>
 8002792:	2300      	movs	r3, #0
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a4:	4935      	ldr	r1, [pc, #212]	@ (800287c <HAL_GPIO_Init+0x2ec>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b38      	ldr	r3, [pc, #224]	@ (8002894 <HAL_GPIO_Init+0x304>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002894 <HAL_GPIO_Init+0x304>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002894 <HAL_GPIO_Init+0x304>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a24      	ldr	r2, [pc, #144]	@ (8002894 <HAL_GPIO_Init+0x304>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002806:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <HAL_GPIO_Init+0x304>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282a:	4a1a      	ldr	r2, [pc, #104]	@ (8002894 <HAL_GPIO_Init+0x304>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <HAL_GPIO_Init+0x304>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002854:	4a0f      	ldr	r2, [pc, #60]	@ (8002894 <HAL_GPIO_Init+0x304>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	f67f aea2 	bls.w	80025ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40013800 	.word	0x40013800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40021000 	.word	0x40021000
 8002894:	40013c00 	.word	0x40013c00

08002898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e001      	b.n	80028ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002912:	4a05      	ldr	r2, [pc, #20]	@ (8002928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f8f8 	bl	8000b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40013c00 	.word	0x40013c00

0800292c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e12b      	b.n	8002b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fbea 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	@ 0x24
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800297e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800298e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002990:	f001 f8aa 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8002994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4a81      	ldr	r2, [pc, #516]	@ (8002ba0 <HAL_I2C_Init+0x274>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d807      	bhi.n	80029b0 <HAL_I2C_Init+0x84>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a80      	ldr	r2, [pc, #512]	@ (8002ba4 <HAL_I2C_Init+0x278>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bf94      	ite	ls
 80029a8:	2301      	movls	r3, #1
 80029aa:	2300      	movhi	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e006      	b.n	80029be <HAL_I2C_Init+0x92>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a7d      	ldr	r2, [pc, #500]	@ (8002ba8 <HAL_I2C_Init+0x27c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e0e7      	b.n	8002b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a78      	ldr	r2, [pc, #480]	@ (8002bac <HAL_I2C_Init+0x280>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0c9b      	lsrs	r3, r3, #18
 80029d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a6a      	ldr	r2, [pc, #424]	@ (8002ba0 <HAL_I2C_Init+0x274>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d802      	bhi.n	8002a00 <HAL_I2C_Init+0xd4>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3301      	adds	r3, #1
 80029fe:	e009      	b.n	8002a14 <HAL_I2C_Init+0xe8>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	4a69      	ldr	r2, [pc, #420]	@ (8002bb0 <HAL_I2C_Init+0x284>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	099b      	lsrs	r3, r3, #6
 8002a12:	3301      	adds	r3, #1
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	495c      	ldr	r1, [pc, #368]	@ (8002ba0 <HAL_I2C_Init+0x274>)
 8002a30:	428b      	cmp	r3, r1
 8002a32:	d819      	bhi.n	8002a68 <HAL_I2C_Init+0x13c>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e59      	subs	r1, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a42:	1c59      	adds	r1, r3, #1
 8002a44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a48:	400b      	ands	r3, r1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_I2C_Init+0x138>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1e59      	subs	r1, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a62:	e051      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002a64:	2304      	movs	r3, #4
 8002a66:	e04f      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d111      	bne.n	8002a94 <HAL_I2C_Init+0x168>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e58      	subs	r0, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e012      	b.n	8002aba <HAL_I2C_Init+0x18e>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	0099      	lsls	r1, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Init+0x196>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e022      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_I2C_Init+0x1bc>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1e58      	subs	r0, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	440b      	add	r3, r1
 8002ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ae6:	e00f      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	0099      	lsls	r1, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	6809      	ldr	r1, [r1, #0]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6911      	ldr	r1, [r2, #16]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68d2      	ldr	r2, [r2, #12]
 8002b42:	4311      	orrs	r1, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	000186a0 	.word	0x000186a0
 8002ba4:	001e847f 	.word	0x001e847f
 8002ba8:	003d08ff 	.word	0x003d08ff
 8002bac:	431bde83 	.word	0x431bde83
 8002bb0:	10624dd3 	.word	0x10624dd3

08002bb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bce:	f7ff f879 	bl	8001cc4 <HAL_GetTick>
 8002bd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	f040 80d9 	bne.w	8002d94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2319      	movs	r3, #25
 8002be8:	2201      	movs	r2, #1
 8002bea:	496d      	ldr	r1, [pc, #436]	@ (8002da0 <HAL_I2C_Mem_Write+0x1ec>)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f971 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e0cc      	b.n	8002d96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Mem_Write+0x56>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e0c5      	b.n	8002d96 <HAL_I2C_Mem_Write+0x1e2>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d007      	beq.n	8002c30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2221      	movs	r2, #33	@ 0x21
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2240      	movs	r2, #64	@ 0x40
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8002da4 <HAL_I2C_Mem_Write+0x1f0>)
 8002c70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c72:	88f8      	ldrh	r0, [r7, #6]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	8979      	ldrh	r1, [r7, #10]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4603      	mov	r3, r0
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f890 	bl	8002da8 <I2C_RequestMemoryWrite>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d052      	beq.n	8002d34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e081      	b.n	8002d96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fa36 	bl	8003108 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d107      	bne.n	8002cba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e06b      	b.n	8002d96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d11b      	bne.n	8002d34 <HAL_I2C_Mem_Write+0x180>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d017      	beq.n	8002d34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1aa      	bne.n	8002c92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fa29 	bl	8003198 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00d      	beq.n	8002d68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d107      	bne.n	8002d64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e016      	b.n	8002d96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	00100002 	.word	0x00100002
 8002da4:	ffff0000 	.word	0xffff0000

08002da8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	817b      	strh	r3, [r7, #10]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	813b      	strh	r3, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f878 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df8:	d103      	bne.n	8002e02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e05f      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	492d      	ldr	r1, [pc, #180]	@ (8002ed0 <I2C_RequestMemoryWrite+0x128>)
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f8d3 	bl	8002fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e04c      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f95e 	bl	8003108 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d107      	bne.n	8002e6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e02b      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e74:	893b      	ldrh	r3, [r7, #8]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	e021      	b.n	8002ec4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e90:	6a39      	ldr	r1, [r7, #32]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f938 	bl	8003108 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d107      	bne.n	8002eb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e005      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eba:	893b      	ldrh	r3, [r7, #8]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	00010002 	.word	0x00010002

08002ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee4:	e048      	b.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eec:	d044      	beq.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7fe fee9 	bl	8001cc4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d139      	bne.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	0c1b      	lsrs	r3, r3, #16
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10d      	bne.n	8002f2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	43da      	mvns	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	e00c      	b.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	43da      	mvns	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d116      	bne.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e023      	b.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	0c1b      	lsrs	r3, r3, #16
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d10d      	bne.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	e00c      	b.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d093      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd6:	e071      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d123      	bne.n	8003030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003000:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e067      	b.n	8003100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003036:	d041      	beq.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003038:	f7fe fe44 	bl	8001cc4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d302      	bcc.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d136      	bne.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d10c      	bne.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4013      	ands	r3, r2
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	e00b      	b.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	43da      	mvns	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4013      	ands	r3, r2
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e021      	b.n	8003100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d10c      	bne.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	43da      	mvns	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4013      	ands	r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e00b      	b.n	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f47f af6d 	bne.w	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003114:	e034      	b.n	8003180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f886 	bl	8003228 <I2C_IsAcknowledgeFailed>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e034      	b.n	8003190 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800312c:	d028      	beq.n	8003180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7fe fdc9 	bl	8001cc4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11d      	bne.n	8003180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314e:	2b80      	cmp	r3, #128	@ 0x80
 8003150:	d016      	beq.n	8003180 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318a:	2b80      	cmp	r3, #128	@ 0x80
 800318c:	d1c3      	bne.n	8003116 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a4:	e034      	b.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f83e 	bl	8003228 <I2C_IsAcknowledgeFailed>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e034      	b.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031bc:	d028      	beq.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	f7fe fd81 	bl	8001cc4 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d302      	bcc.n	80031d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11d      	bne.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d016      	beq.n	8003210 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e007      	b.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b04      	cmp	r3, #4
 800321c:	d1c3      	bne.n	80031a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323e:	d11b      	bne.n	8003278 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003248:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	f043 0204 	orr.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e267      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d075      	beq.n	8003392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032a6:	4b88      	ldr	r3, [pc, #544]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d00c      	beq.n	80032cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b2:	4b85      	ldr	r3, [pc, #532]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d112      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032be:	4b82      	ldr	r3, [pc, #520]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ca:	d10b      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	4b7e      	ldr	r3, [pc, #504]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d05b      	beq.n	8003390 <HAL_RCC_OscConfig+0x108>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d157      	bne.n	8003390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e242      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ec:	d106      	bne.n	80032fc <HAL_RCC_OscConfig+0x74>
 80032ee:	4b76      	ldr	r3, [pc, #472]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a75      	ldr	r2, [pc, #468]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e01d      	b.n	8003338 <HAL_RCC_OscConfig+0xb0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0x98>
 8003306:	4b70      	ldr	r3, [pc, #448]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a6f      	ldr	r2, [pc, #444]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b6d      	ldr	r3, [pc, #436]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a6c      	ldr	r2, [pc, #432]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xb0>
 8003320:	4b69      	ldr	r3, [pc, #420]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a68      	ldr	r2, [pc, #416]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b66      	ldr	r3, [pc, #408]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a65      	ldr	r2, [pc, #404]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe fcc0 	bl	8001cc4 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe fcbc 	bl	8001cc4 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	@ 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e207      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b5b      	ldr	r3, [pc, #364]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0xc0>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fcac 	bl	8001cc4 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe fca8 	bl	8001cc4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	@ 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1f3      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	4b51      	ldr	r3, [pc, #324]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0xe8>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d063      	beq.n	8003466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800339e:	4b4a      	ldr	r3, [pc, #296]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033aa:	4b47      	ldr	r3, [pc, #284]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d11c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b6:	4b44      	ldr	r3, [pc, #272]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d116      	bne.n	80033f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	4b41      	ldr	r3, [pc, #260]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_RCC_OscConfig+0x152>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1c7      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033da:	4b3b      	ldr	r3, [pc, #236]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4937      	ldr	r1, [pc, #220]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	e03a      	b.n	8003466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f8:	4b34      	ldr	r3, [pc, #208]	@ (80034cc <HAL_RCC_OscConfig+0x244>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fe fc61 	bl	8001cc4 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003406:	f7fe fc5d 	bl	8001cc4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1a8      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	4b2b      	ldr	r3, [pc, #172]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003424:	4b28      	ldr	r3, [pc, #160]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4925      	ldr	r1, [pc, #148]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343a:	4b24      	ldr	r3, [pc, #144]	@ (80034cc <HAL_RCC_OscConfig+0x244>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fc40 	bl	8001cc4 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003448:	f7fe fc3c 	bl	8001cc4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e187      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d036      	beq.n	80034e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <HAL_RCC_OscConfig+0x248>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7fe fc20 	bl	8001cc4 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003488:	f7fe fc1c 	bl	8001cc4 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e167      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <HAL_RCC_OscConfig+0x240>)
 800349c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x200>
 80034a6:	e01b      	b.n	80034e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a8:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_RCC_OscConfig+0x248>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fc09 	bl	8001cc4 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b4:	e00e      	b.n	80034d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b6:	f7fe fc05 	bl	8001cc4 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d907      	bls.n	80034d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e150      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
 80034c8:	40023800 	.word	0x40023800
 80034cc:	42470000 	.word	0x42470000
 80034d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	4b88      	ldr	r3, [pc, #544]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 80034d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ea      	bne.n	80034b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8097 	beq.w	800361c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f2:	4b81      	ldr	r3, [pc, #516]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	4b7d      	ldr	r3, [pc, #500]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	4a7c      	ldr	r2, [pc, #496]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800350c:	6413      	str	r3, [r2, #64]	@ 0x40
 800350e:	4b7a      	ldr	r3, [pc, #488]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	4b77      	ldr	r3, [pc, #476]	@ (80036fc <HAL_RCC_OscConfig+0x474>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d118      	bne.n	800355c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352a:	4b74      	ldr	r3, [pc, #464]	@ (80036fc <HAL_RCC_OscConfig+0x474>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a73      	ldr	r2, [pc, #460]	@ (80036fc <HAL_RCC_OscConfig+0x474>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003536:	f7fe fbc5 	bl	8001cc4 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353e:	f7fe fbc1 	bl	8001cc4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e10c      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	4b6a      	ldr	r3, [pc, #424]	@ (80036fc <HAL_RCC_OscConfig+0x474>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x2ea>
 8003564:	4b64      	ldr	r3, [pc, #400]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003568:	4a63      	ldr	r2, [pc, #396]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003570:	e01c      	b.n	80035ac <HAL_RCC_OscConfig+0x324>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b05      	cmp	r3, #5
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0x30c>
 800357a:	4b5f      	ldr	r3, [pc, #380]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	4a5e      	ldr	r2, [pc, #376]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	6713      	str	r3, [r2, #112]	@ 0x70
 8003586:	4b5c      	ldr	r3, [pc, #368]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358a:	4a5b      	ldr	r2, [pc, #364]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6713      	str	r3, [r2, #112]	@ 0x70
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0x324>
 8003594:	4b58      	ldr	r3, [pc, #352]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003598:	4a57      	ldr	r2, [pc, #348]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a0:	4b55      	ldr	r3, [pc, #340]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a4:	4a54      	ldr	r2, [pc, #336]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 80035a6:	f023 0304 	bic.w	r3, r3, #4
 80035aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d015      	beq.n	80035e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fe fb86 	bl	8001cc4 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fe fb82 	bl	8001cc4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e0cb      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	4b49      	ldr	r3, [pc, #292]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0ee      	beq.n	80035bc <HAL_RCC_OscConfig+0x334>
 80035de:	e014      	b.n	800360a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e0:	f7fe fb70 	bl	8001cc4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fe fb6c 	bl	8001cc4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0b5      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fe:	4b3e      	ldr	r3, [pc, #248]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ee      	bne.n	80035e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003610:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	4a38      	ldr	r2, [pc, #224]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800361a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a1 	beq.w	8003768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003626:	4b34      	ldr	r3, [pc, #208]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b08      	cmp	r3, #8
 8003630:	d05c      	beq.n	80036ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d141      	bne.n	80036be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <HAL_RCC_OscConfig+0x478>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe fb40 	bl	8001cc4 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe fb3c 	bl	8001cc4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e087      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	3b01      	subs	r3, #1
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	491b      	ldr	r1, [pc, #108]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003690:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_RCC_OscConfig+0x478>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe fb15 	bl	8001cc4 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369e:	f7fe fb11 	bl	8001cc4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e05c      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b0:	4b11      	ldr	r3, [pc, #68]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x416>
 80036bc:	e054      	b.n	8003768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <HAL_RCC_OscConfig+0x478>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fafe 	bl	8001cc4 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe fafa 	bl	8001cc4 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e045      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_RCC_OscConfig+0x470>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x444>
 80036ea:	e03d      	b.n	8003768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e038      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40007000 	.word	0x40007000
 8003700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003704:	4b1b      	ldr	r3, [pc, #108]	@ (8003774 <HAL_RCC_OscConfig+0x4ec>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d028      	beq.n	8003764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d121      	bne.n	8003764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d11a      	bne.n	8003764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800373a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	3b01      	subs	r3, #1
 800374e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d107      	bne.n	8003764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0cc      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800378c:	4b68      	ldr	r3, [pc, #416]	@ (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d90c      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b65      	ldr	r3, [pc, #404]	@ (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b63      	ldr	r3, [pc, #396]	@ (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0b8      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037cc:	4b59      	ldr	r3, [pc, #356]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a58      	ldr	r2, [pc, #352]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e4:	4b53      	ldr	r3, [pc, #332]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a52      	ldr	r2, [pc, #328]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b50      	ldr	r3, [pc, #320]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	494d      	ldr	r1, [pc, #308]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d044      	beq.n	8003898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	4b47      	ldr	r3, [pc, #284]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d119      	bne.n	8003856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e07f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d003      	beq.n	8003836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003832:	2b03      	cmp	r3, #3
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003836:	4b3f      	ldr	r3, [pc, #252]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003846:	4b3b      	ldr	r3, [pc, #236]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e067      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003856:	4b37      	ldr	r3, [pc, #220]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 0203 	bic.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4934      	ldr	r1, [pc, #208]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003868:	f7fe fa2c 	bl	8001cc4 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	e00a      	b.n	8003886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003870:	f7fe fa28 	bl	8001cc4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e04f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	4b2b      	ldr	r3, [pc, #172]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 020c 	and.w	r2, r3, #12
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	429a      	cmp	r2, r3
 8003896:	d1eb      	bne.n	8003870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003898:	4b25      	ldr	r3, [pc, #148]	@ (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d20c      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b22      	ldr	r3, [pc, #136]	@ (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b20      	ldr	r3, [pc, #128]	@ (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e032      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4b19      	ldr	r3, [pc, #100]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4916      	ldr	r1, [pc, #88]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ea:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	490e      	ldr	r1, [pc, #56]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038fe:	f000 f821 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 8003902:	4602      	mov	r2, r0
 8003904:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	490a      	ldr	r1, [pc, #40]	@ (8003938 <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	5ccb      	ldrb	r3, [r1, r3]
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	4a09      	ldr	r2, [pc, #36]	@ (800393c <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe f98c 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023c00 	.word	0x40023c00
 8003934:	40023800 	.word	0x40023800
 8003938:	08005310 	.word	0x08005310
 800393c:	20000038 	.word	0x20000038
 8003940:	2000003c 	.word	0x2000003c

08003944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b090      	sub	sp, #64	@ 0x40
 800394a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003950:	2300      	movs	r3, #0
 8003952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003954:	2300      	movs	r3, #0
 8003956:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800395c:	4b59      	ldr	r3, [pc, #356]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b08      	cmp	r3, #8
 8003966:	d00d      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x40>
 8003968:	2b08      	cmp	r3, #8
 800396a:	f200 80a1 	bhi.w	8003ab0 <HAL_RCC_GetSysClockFreq+0x16c>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x34>
 8003972:	2b04      	cmp	r3, #4
 8003974:	d003      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x3a>
 8003976:	e09b      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003978:	4b53      	ldr	r3, [pc, #332]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800397c:	e09b      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397e:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x188>)
 8003980:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003982:	e098      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003984:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800398c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800398e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d028      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	099b      	lsrs	r3, r3, #6
 80039a0:	2200      	movs	r2, #0
 80039a2:	623b      	str	r3, [r7, #32]
 80039a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039ac:	2100      	movs	r1, #0
 80039ae:	4b47      	ldr	r3, [pc, #284]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x188>)
 80039b0:	fb03 f201 	mul.w	r2, r3, r1
 80039b4:	2300      	movs	r3, #0
 80039b6:	fb00 f303 	mul.w	r3, r0, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	4a43      	ldr	r2, [pc, #268]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x188>)
 80039be:	fba0 1202 	umull	r1, r2, r0, r2
 80039c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039c4:	460a      	mov	r2, r1
 80039c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ca:	4413      	add	r3, r2
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d0:	2200      	movs	r2, #0
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	61fa      	str	r2, [r7, #28]
 80039d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039de:	f7fc fc4f 	bl	8000280 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4613      	mov	r3, r2
 80039e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ea:	e053      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ec:	4b35      	ldr	r3, [pc, #212]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	099b      	lsrs	r3, r3, #6
 80039f2:	2200      	movs	r2, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	617a      	str	r2, [r7, #20]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039fe:	f04f 0b00 	mov.w	fp, #0
 8003a02:	4652      	mov	r2, sl
 8003a04:	465b      	mov	r3, fp
 8003a06:	f04f 0000 	mov.w	r0, #0
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	0159      	lsls	r1, r3, #5
 8003a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a14:	0150      	lsls	r0, r2, #5
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	ebb2 080a 	subs.w	r8, r2, sl
 8003a1e:	eb63 090b 	sbc.w	r9, r3, fp
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a36:	ebb2 0408 	subs.w	r4, r2, r8
 8003a3a:	eb63 0509 	sbc.w	r5, r3, r9
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	00eb      	lsls	r3, r5, #3
 8003a48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4c:	00e2      	lsls	r2, r4, #3
 8003a4e:	4614      	mov	r4, r2
 8003a50:	461d      	mov	r5, r3
 8003a52:	eb14 030a 	adds.w	r3, r4, sl
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	eb45 030b 	adc.w	r3, r5, fp
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	028b      	lsls	r3, r1, #10
 8003a6e:	4621      	mov	r1, r4
 8003a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a74:	4621      	mov	r1, r4
 8003a76:	028a      	lsls	r2, r1, #10
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	60fa      	str	r2, [r7, #12]
 8003a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a88:	f7fc fbfa 	bl	8000280 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aae:	e002      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab0:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3740      	adds	r7, #64	@ 0x40
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	017d7840 	.word	0x017d7840

08003ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	@ (8003ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000038 	.word	0x20000038

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aec:	f7ff fff0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0a9b      	lsrs	r3, r3, #10
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	@ (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	08005320 	.word	0x08005320

08003b10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d035      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b38:	4b67      	ldr	r3, [pc, #412]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b3e:	f7fe f8c1 	bl	8001cc4 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b46:	f7fe f8bd 	bl	8001cc4 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0ba      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b58:	4b60      	ldr	r3, [pc, #384]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	019a      	lsls	r2, r3, #6
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	071b      	lsls	r3, r3, #28
 8003b70:	495a      	ldr	r1, [pc, #360]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b78:	4b57      	ldr	r3, [pc, #348]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b7e:	f7fe f8a1 	bl	8001cc4 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b86:	f7fe f89d 	bl	8001cc4 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e09a      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b98:	4b50      	ldr	r3, [pc, #320]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8083 	beq.w	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b49      	ldr	r3, [pc, #292]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	4a48      	ldr	r2, [pc, #288]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bc2:	4b46      	ldr	r3, [pc, #280]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bce:	4b44      	ldr	r3, [pc, #272]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a43      	ldr	r2, [pc, #268]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bda:	f7fe f873 	bl	8001cc4 <HAL_GetTick>
 8003bde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7fe f86f 	bl	8001cc4 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e06c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c00:	4b36      	ldr	r3, [pc, #216]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d02f      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c34:	4a29      	ldr	r2, [pc, #164]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c3a:	4b28      	ldr	r3, [pc, #160]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d114      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fe f83d 	bl	8001cc4 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fe f839 	bl	8001cc4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e034      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ee      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c7c:	d10d      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c7e:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c92:	4912      	ldr	r1, [pc, #72]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	608b      	str	r3, [r1, #8]
 8003c98:	e005      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c9a:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ca0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ca4:	6093      	str	r3, [r2, #8]
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ca8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb2:	490a      	ldr	r1, [pc, #40]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7c1a      	ldrb	r2, [r3, #16]
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cca:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	42470068 	.word	0x42470068
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	42470e40 	.word	0x42470e40
 8003ce8:	424711e0 	.word	0x424711e0

08003cec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e073      	b.n	8003dea <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7f5b      	ldrb	r3, [r3, #29]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd fa52 	bl	80011bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d055      	beq.n	8003dd8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	22ca      	movs	r2, #202	@ 0xca
 8003d32:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2253      	movs	r2, #83	@ 0x53
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fa49 	bl	80041d4 <RTC_EnterInitMode>
 8003d42:	4603      	mov	r3, r0
 8003d44:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d12c      	bne.n	8003da6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d5e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6899      	ldr	r1, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68d2      	ldr	r2, [r2, #12]
 8003d86:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6919      	ldr	r1, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	041a      	lsls	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fa50 	bl	8004242 <RTC_ExitInitMode>
 8003da2:	4603      	mov	r3, r0
 8003da4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d110      	bne.n	8003dce <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	22ff      	movs	r2, #255	@ 0xff
 8003dd4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dd6:	e001      	b.n	8003ddc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003df2:	b590      	push	{r4, r7, lr}
 8003df4:	b087      	sub	sp, #28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	7f1b      	ldrb	r3, [r3, #28]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_RTC_SetTime+0x1c>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e087      	b.n	8003f1e <HAL_RTC_SetTime+0x12c>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2202      	movs	r2, #2
 8003e18:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d126      	bne.n	8003e6e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2200      	movs	r2, #0
 8003e32:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fa27 	bl	800428c <RTC_ByteToBcd2>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fa20 	bl	800428c <RTC_ByteToBcd2>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e50:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	789b      	ldrb	r3, [r3, #2]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fa18 	bl	800428c <RTC_ByteToBcd2>
 8003e5c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003e5e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	78db      	ldrb	r3, [r3, #3]
 8003e66:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e018      	b.n	8003ea0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003e8e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003e94:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	78db      	ldrb	r3, [r3, #3]
 8003e9a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	22ca      	movs	r2, #202	@ 0xca
 8003ea6:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2253      	movs	r2, #83	@ 0x53
 8003eae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f98f 	bl	80041d4 <RTC_EnterInitMode>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d120      	bne.n	8003f02 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003eca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003ece:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ede:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f9a2 	bl	8004242 <RTC_ExitInitMode>
 8003efe:	4603      	mov	r3, r0
 8003f00:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	22ff      	movs	r2, #255	@ 0xff
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]

  return status;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd90      	pop	{r4, r7, pc}

08003f26 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003f58:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	0d9b      	lsrs	r3, r3, #22
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f98e 	bl	80042c8 <RTC_Bcd2ToByte>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	785b      	ldrb	r3, [r3, #1]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f985 	bl	80042c8 <RTC_Bcd2ToByte>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	789b      	ldrb	r3, [r3, #2]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f97c 	bl	80042c8 <RTC_Bcd2ToByte>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003fe2:	b590      	push	{r4, r7, lr}
 8003fe4:	b087      	sub	sp, #28
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	7f1b      	ldrb	r3, [r3, #28]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_RTC_SetDate+0x1c>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e071      	b.n	80040e2 <HAL_RTC_SetDate+0x100>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2202      	movs	r2, #2
 8004008:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10e      	bne.n	800402e <HAL_RTC_SetDate+0x4c>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	f023 0310 	bic.w	r3, r3, #16
 8004024:	b2db      	uxtb	r3, r3
 8004026:	330a      	adds	r3, #10
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11c      	bne.n	800406e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	78db      	ldrb	r3, [r3, #3]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f927 	bl	800428c <RTC_ByteToBcd2>
 800403e:	4603      	mov	r3, r0
 8004040:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f920 	bl	800428c <RTC_ByteToBcd2>
 800404c:	4603      	mov	r3, r0
 800404e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004050:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	789b      	ldrb	r3, [r3, #2]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f918 	bl	800428c <RTC_ByteToBcd2>
 800405c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800405e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	e00e      	b.n	800408c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	78db      	ldrb	r3, [r3, #3]
 8004072:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800407a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004080:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	22ca      	movs	r2, #202	@ 0xca
 8004092:	625a      	str	r2, [r3, #36]	@ 0x24
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2253      	movs	r2, #83	@ 0x53
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f899 	bl	80041d4 <RTC_EnterInitMode>
 80040a2:	4603      	mov	r3, r0
 80040a4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10c      	bne.n	80040c6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80040ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f8c0 	bl	8004242 <RTC_ExitInitMode>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	22ff      	movs	r2, #255	@ 0xff
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]

  return status;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd90      	pop	{r4, r7, pc}

080040ea <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b086      	sub	sp, #24
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004104:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004108:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800412c:	b2da      	uxtb	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	0b5b      	lsrs	r3, r3, #13
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11a      	bne.n	800417e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	78db      	ldrb	r3, [r3, #3]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 f8bb 	bl	80042c8 <RTC_Bcd2ToByte>
 8004152:	4603      	mov	r3, r0
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f8b2 	bl	80042c8 <RTC_Bcd2ToByte>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	789b      	ldrb	r3, [r3, #2]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f8a9 	bl	80042c8 <RTC_Bcd2ToByte>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a0d      	ldr	r2, [pc, #52]	@ (80041d0 <HAL_RTC_WaitForSynchro+0x48>)
 800419a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800419c:	f7fd fd92 	bl	8001cc4 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041a2:	e009      	b.n	80041b8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041a4:	f7fd fd8e 	bl	8001cc4 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041b2:	d901      	bls.n	80041b8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e007      	b.n	80041c8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ee      	beq.n	80041a4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	00013f5f 	.word	0x00013f5f

080041d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d122      	bne.n	8004238 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004200:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004202:	f7fd fd5f 	bl	8001cc4 <HAL_GetTick>
 8004206:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004208:	e00c      	b.n	8004224 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800420a:	f7fd fd5b 	bl	8001cc4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004218:	d904      	bls.n	8004224 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2204      	movs	r2, #4
 800421e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <RTC_EnterInitMode+0x64>
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d1e8      	bne.n	800420a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800425c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff8b 	bl	8004188 <HAL_RTC_WaitForSynchro>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2204      	movs	r2, #4
 800427c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800429a:	e005      	b.n	80042a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3301      	adds	r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	3b0a      	subs	r3, #10
 80042a6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	2b09      	cmp	r3, #9
 80042ac:	d8f6      	bhi.n	800429c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	b2db      	uxtb	r3, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	b2db      	uxtb	r3, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e041      	b.n	800439a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc ff72 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f000 f976 	bl	8004634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d001      	beq.n	80043bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e03c      	b.n	8004436 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004444 <HAL_TIM_Base_Start+0xa0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_TIM_Base_Start+0x5c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d6:	d013      	beq.n	8004400 <HAL_TIM_Base_Start+0x5c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004448 <HAL_TIM_Base_Start+0xa4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_TIM_Base_Start+0x5c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a19      	ldr	r2, [pc, #100]	@ (800444c <HAL_TIM_Base_Start+0xa8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_TIM_Base_Start+0x5c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a17      	ldr	r2, [pc, #92]	@ (8004450 <HAL_TIM_Base_Start+0xac>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIM_Base_Start+0x5c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a16      	ldr	r2, [pc, #88]	@ (8004454 <HAL_TIM_Base_Start+0xb0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d111      	bne.n	8004424 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b06      	cmp	r3, #6
 8004410:	d010      	beq.n	8004434 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004422:	e007      	b.n	8004434 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40010000 	.word	0x40010000
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40014000 	.word	0x40014000

08004458 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	f241 1311 	movw	r3, #4369	@ 0x1111
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <HAL_TIM_Base_Stop+0x38>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	f240 4344 	movw	r3, #1092	@ 0x444
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_TIM_Base_Stop+0x38>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_ConfigClockSource+0x1c>
 80044be:	2302      	movs	r3, #2
 80044c0:	e0b4      	b.n	800462c <HAL_TIM_ConfigClockSource+0x186>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044e8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044fa:	d03e      	beq.n	800457a <HAL_TIM_ConfigClockSource+0xd4>
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004500:	f200 8087 	bhi.w	8004612 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004508:	f000 8086 	beq.w	8004618 <HAL_TIM_ConfigClockSource+0x172>
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004510:	d87f      	bhi.n	8004612 <HAL_TIM_ConfigClockSource+0x16c>
 8004512:	2b70      	cmp	r3, #112	@ 0x70
 8004514:	d01a      	beq.n	800454c <HAL_TIM_ConfigClockSource+0xa6>
 8004516:	2b70      	cmp	r3, #112	@ 0x70
 8004518:	d87b      	bhi.n	8004612 <HAL_TIM_ConfigClockSource+0x16c>
 800451a:	2b60      	cmp	r3, #96	@ 0x60
 800451c:	d050      	beq.n	80045c0 <HAL_TIM_ConfigClockSource+0x11a>
 800451e:	2b60      	cmp	r3, #96	@ 0x60
 8004520:	d877      	bhi.n	8004612 <HAL_TIM_ConfigClockSource+0x16c>
 8004522:	2b50      	cmp	r3, #80	@ 0x50
 8004524:	d03c      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0xfa>
 8004526:	2b50      	cmp	r3, #80	@ 0x50
 8004528:	d873      	bhi.n	8004612 <HAL_TIM_ConfigClockSource+0x16c>
 800452a:	2b40      	cmp	r3, #64	@ 0x40
 800452c:	d058      	beq.n	80045e0 <HAL_TIM_ConfigClockSource+0x13a>
 800452e:	2b40      	cmp	r3, #64	@ 0x40
 8004530:	d86f      	bhi.n	8004612 <HAL_TIM_ConfigClockSource+0x16c>
 8004532:	2b30      	cmp	r3, #48	@ 0x30
 8004534:	d064      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0x15a>
 8004536:	2b30      	cmp	r3, #48	@ 0x30
 8004538:	d86b      	bhi.n	8004612 <HAL_TIM_ConfigClockSource+0x16c>
 800453a:	2b20      	cmp	r3, #32
 800453c:	d060      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0x15a>
 800453e:	2b20      	cmp	r3, #32
 8004540:	d867      	bhi.n	8004612 <HAL_TIM_ConfigClockSource+0x16c>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d05c      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0x15a>
 8004546:	2b10      	cmp	r3, #16
 8004548:	d05a      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0x15a>
 800454a:	e062      	b.n	8004612 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800455c:	f000 f970 	bl	8004840 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800456e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]
      break;
 8004578:	e04f      	b.n	800461a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800458a:	f000 f959 	bl	8004840 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800459c:	609a      	str	r2, [r3, #8]
      break;
 800459e:	e03c      	b.n	800461a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ac:	461a      	mov	r2, r3
 80045ae:	f000 f8cd 	bl	800474c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2150      	movs	r1, #80	@ 0x50
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f926 	bl	800480a <TIM_ITRx_SetConfig>
      break;
 80045be:	e02c      	b.n	800461a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045cc:	461a      	mov	r2, r3
 80045ce:	f000 f8ec 	bl	80047aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2160      	movs	r1, #96	@ 0x60
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f916 	bl	800480a <TIM_ITRx_SetConfig>
      break;
 80045de:	e01c      	b.n	800461a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ec:	461a      	mov	r2, r3
 80045ee:	f000 f8ad 	bl	800474c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2140      	movs	r1, #64	@ 0x40
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f906 	bl	800480a <TIM_ITRx_SetConfig>
      break;
 80045fe:	e00c      	b.n	800461a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f000 f8fd 	bl	800480a <TIM_ITRx_SetConfig>
      break;
 8004610:	e003      	b.n	800461a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      break;
 8004616:	e000      	b.n	800461a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004618:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800462a:	7bfb      	ldrb	r3, [r7, #15]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a3a      	ldr	r2, [pc, #232]	@ (8004730 <TIM_Base_SetConfig+0xfc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00f      	beq.n	800466c <TIM_Base_SetConfig+0x38>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004652:	d00b      	beq.n	800466c <TIM_Base_SetConfig+0x38>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a37      	ldr	r2, [pc, #220]	@ (8004734 <TIM_Base_SetConfig+0x100>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d007      	beq.n	800466c <TIM_Base_SetConfig+0x38>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a36      	ldr	r2, [pc, #216]	@ (8004738 <TIM_Base_SetConfig+0x104>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_Base_SetConfig+0x38>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a35      	ldr	r2, [pc, #212]	@ (800473c <TIM_Base_SetConfig+0x108>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d108      	bne.n	800467e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a2b      	ldr	r2, [pc, #172]	@ (8004730 <TIM_Base_SetConfig+0xfc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01b      	beq.n	80046be <TIM_Base_SetConfig+0x8a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468c:	d017      	beq.n	80046be <TIM_Base_SetConfig+0x8a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a28      	ldr	r2, [pc, #160]	@ (8004734 <TIM_Base_SetConfig+0x100>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <TIM_Base_SetConfig+0x8a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a27      	ldr	r2, [pc, #156]	@ (8004738 <TIM_Base_SetConfig+0x104>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00f      	beq.n	80046be <TIM_Base_SetConfig+0x8a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a26      	ldr	r2, [pc, #152]	@ (800473c <TIM_Base_SetConfig+0x108>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00b      	beq.n	80046be <TIM_Base_SetConfig+0x8a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a25      	ldr	r2, [pc, #148]	@ (8004740 <TIM_Base_SetConfig+0x10c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_Base_SetConfig+0x8a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a24      	ldr	r2, [pc, #144]	@ (8004744 <TIM_Base_SetConfig+0x110>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_Base_SetConfig+0x8a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a23      	ldr	r2, [pc, #140]	@ (8004748 <TIM_Base_SetConfig+0x114>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d108      	bne.n	80046d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004730 <TIM_Base_SetConfig+0xfc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d105      	bne.n	8004722 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	611a      	str	r2, [r3, #16]
  }
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010000 	.word	0x40010000
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40014000 	.word	0x40014000
 8004744:	40014400 	.word	0x40014400
 8004748:	40014800 	.word	0x40014800

0800474c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0201 	bic.w	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 030a 	bic.w	r3, r3, #10
 8004788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b087      	sub	sp, #28
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f023 0210 	bic.w	r2, r3, #16
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	031b      	lsls	r3, r3, #12
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	f043 0307 	orr.w	r3, r3, #7
 800482c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800485a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	021a      	lsls	r2, r3, #8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	431a      	orrs	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	609a      	str	r2, [r3, #8]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004894:	2302      	movs	r3, #2
 8004896:	e050      	b.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d018      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e4:	d013      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a18      	ldr	r2, [pc, #96]	@ (800494c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d009      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a15      	ldr	r2, [pc, #84]	@ (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a13      	ldr	r2, [pc, #76]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d10c      	bne.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	4313      	orrs	r3, r2
 800491e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40014000 	.word	0x40014000

0800495c <siprintf>:
 800495c:	b40e      	push	{r1, r2, r3}
 800495e:	b500      	push	{lr}
 8004960:	b09c      	sub	sp, #112	@ 0x70
 8004962:	ab1d      	add	r3, sp, #116	@ 0x74
 8004964:	9002      	str	r0, [sp, #8]
 8004966:	9006      	str	r0, [sp, #24]
 8004968:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800496c:	4809      	ldr	r0, [pc, #36]	@ (8004994 <siprintf+0x38>)
 800496e:	9107      	str	r1, [sp, #28]
 8004970:	9104      	str	r1, [sp, #16]
 8004972:	4909      	ldr	r1, [pc, #36]	@ (8004998 <siprintf+0x3c>)
 8004974:	f853 2b04 	ldr.w	r2, [r3], #4
 8004978:	9105      	str	r1, [sp, #20]
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	a902      	add	r1, sp, #8
 8004980:	f000 f9bc 	bl	8004cfc <_svfiprintf_r>
 8004984:	9b02      	ldr	r3, [sp, #8]
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	b01c      	add	sp, #112	@ 0x70
 800498c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004990:	b003      	add	sp, #12
 8004992:	4770      	bx	lr
 8004994:	20000044 	.word	0x20000044
 8004998:	ffff0208 	.word	0xffff0208

0800499c <memmove>:
 800499c:	4288      	cmp	r0, r1
 800499e:	b510      	push	{r4, lr}
 80049a0:	eb01 0402 	add.w	r4, r1, r2
 80049a4:	d902      	bls.n	80049ac <memmove+0x10>
 80049a6:	4284      	cmp	r4, r0
 80049a8:	4623      	mov	r3, r4
 80049aa:	d807      	bhi.n	80049bc <memmove+0x20>
 80049ac:	1e43      	subs	r3, r0, #1
 80049ae:	42a1      	cmp	r1, r4
 80049b0:	d008      	beq.n	80049c4 <memmove+0x28>
 80049b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ba:	e7f8      	b.n	80049ae <memmove+0x12>
 80049bc:	4402      	add	r2, r0
 80049be:	4601      	mov	r1, r0
 80049c0:	428a      	cmp	r2, r1
 80049c2:	d100      	bne.n	80049c6 <memmove+0x2a>
 80049c4:	bd10      	pop	{r4, pc}
 80049c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049ce:	e7f7      	b.n	80049c0 <memmove+0x24>

080049d0 <memset>:
 80049d0:	4402      	add	r2, r0
 80049d2:	4603      	mov	r3, r0
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d100      	bne.n	80049da <memset+0xa>
 80049d8:	4770      	bx	lr
 80049da:	f803 1b01 	strb.w	r1, [r3], #1
 80049de:	e7f9      	b.n	80049d4 <memset+0x4>

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	@ (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000044 	.word	0x20000044

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	@ (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 fc4c 	bl	800529c <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08005adc 	.word	0x08005adc
 8004a28:	08005adc 	.word	0x08005adc
 8004a2c:	08005adc 	.word	0x08005adc
 8004a30:	08005ae0 	.word	0x08005ae0

08004a34 <__retarget_lock_acquire_recursive>:
 8004a34:	4770      	bx	lr

08004a36 <__retarget_lock_release_recursive>:
 8004a36:	4770      	bx	lr

08004a38 <memcpy>:
 8004a38:	440a      	add	r2, r1
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004a40:	d100      	bne.n	8004a44 <memcpy+0xc>
 8004a42:	4770      	bx	lr
 8004a44:	b510      	push	{r4, lr}
 8004a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a4e:	4291      	cmp	r1, r2
 8004a50:	d1f9      	bne.n	8004a46 <memcpy+0xe>
 8004a52:	bd10      	pop	{r4, pc}

08004a54 <_free_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4605      	mov	r5, r0
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	d041      	beq.n	8004ae0 <_free_r+0x8c>
 8004a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a60:	1f0c      	subs	r4, r1, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bfb8      	it	lt
 8004a66:	18e4      	addlt	r4, r4, r3
 8004a68:	f000 f8e0 	bl	8004c2c <__malloc_lock>
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae4 <_free_r+0x90>)
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	b933      	cbnz	r3, 8004a80 <_free_r+0x2c>
 8004a72:	6063      	str	r3, [r4, #4]
 8004a74:	6014      	str	r4, [r2, #0]
 8004a76:	4628      	mov	r0, r5
 8004a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a7c:	f000 b8dc 	b.w	8004c38 <__malloc_unlock>
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d908      	bls.n	8004a96 <_free_r+0x42>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	1821      	adds	r1, r4, r0
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	bf01      	itttt	eq
 8004a8c:	6819      	ldreq	r1, [r3, #0]
 8004a8e:	685b      	ldreq	r3, [r3, #4]
 8004a90:	1809      	addeq	r1, r1, r0
 8004a92:	6021      	streq	r1, [r4, #0]
 8004a94:	e7ed      	b.n	8004a72 <_free_r+0x1e>
 8004a96:	461a      	mov	r2, r3
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b10b      	cbz	r3, 8004aa0 <_free_r+0x4c>
 8004a9c:	42a3      	cmp	r3, r4
 8004a9e:	d9fa      	bls.n	8004a96 <_free_r+0x42>
 8004aa0:	6811      	ldr	r1, [r2, #0]
 8004aa2:	1850      	adds	r0, r2, r1
 8004aa4:	42a0      	cmp	r0, r4
 8004aa6:	d10b      	bne.n	8004ac0 <_free_r+0x6c>
 8004aa8:	6820      	ldr	r0, [r4, #0]
 8004aaa:	4401      	add	r1, r0
 8004aac:	1850      	adds	r0, r2, r1
 8004aae:	4283      	cmp	r3, r0
 8004ab0:	6011      	str	r1, [r2, #0]
 8004ab2:	d1e0      	bne.n	8004a76 <_free_r+0x22>
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	6053      	str	r3, [r2, #4]
 8004aba:	4408      	add	r0, r1
 8004abc:	6010      	str	r0, [r2, #0]
 8004abe:	e7da      	b.n	8004a76 <_free_r+0x22>
 8004ac0:	d902      	bls.n	8004ac8 <_free_r+0x74>
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	e7d6      	b.n	8004a76 <_free_r+0x22>
 8004ac8:	6820      	ldr	r0, [r4, #0]
 8004aca:	1821      	adds	r1, r4, r0
 8004acc:	428b      	cmp	r3, r1
 8004ace:	bf04      	itt	eq
 8004ad0:	6819      	ldreq	r1, [r3, #0]
 8004ad2:	685b      	ldreq	r3, [r3, #4]
 8004ad4:	6063      	str	r3, [r4, #4]
 8004ad6:	bf04      	itt	eq
 8004ad8:	1809      	addeq	r1, r1, r0
 8004ada:	6021      	streq	r1, [r4, #0]
 8004adc:	6054      	str	r4, [r2, #4]
 8004ade:	e7ca      	b.n	8004a76 <_free_r+0x22>
 8004ae0:	bd38      	pop	{r3, r4, r5, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000053c 	.word	0x2000053c

08004ae8 <sbrk_aligned>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	4e0f      	ldr	r6, [pc, #60]	@ (8004b28 <sbrk_aligned+0x40>)
 8004aec:	460c      	mov	r4, r1
 8004aee:	6831      	ldr	r1, [r6, #0]
 8004af0:	4605      	mov	r5, r0
 8004af2:	b911      	cbnz	r1, 8004afa <sbrk_aligned+0x12>
 8004af4:	f000 fb8c 	bl	8005210 <_sbrk_r>
 8004af8:	6030      	str	r0, [r6, #0]
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 fb87 	bl	8005210 <_sbrk_r>
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	d103      	bne.n	8004b0e <sbrk_aligned+0x26>
 8004b06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
 8004b0e:	1cc4      	adds	r4, r0, #3
 8004b10:	f024 0403 	bic.w	r4, r4, #3
 8004b14:	42a0      	cmp	r0, r4
 8004b16:	d0f8      	beq.n	8004b0a <sbrk_aligned+0x22>
 8004b18:	1a21      	subs	r1, r4, r0
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f000 fb78 	bl	8005210 <_sbrk_r>
 8004b20:	3001      	adds	r0, #1
 8004b22:	d1f2      	bne.n	8004b0a <sbrk_aligned+0x22>
 8004b24:	e7ef      	b.n	8004b06 <sbrk_aligned+0x1e>
 8004b26:	bf00      	nop
 8004b28:	20000538 	.word	0x20000538

08004b2c <_malloc_r>:
 8004b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b30:	1ccd      	adds	r5, r1, #3
 8004b32:	f025 0503 	bic.w	r5, r5, #3
 8004b36:	3508      	adds	r5, #8
 8004b38:	2d0c      	cmp	r5, #12
 8004b3a:	bf38      	it	cc
 8004b3c:	250c      	movcc	r5, #12
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	4606      	mov	r6, r0
 8004b42:	db01      	blt.n	8004b48 <_malloc_r+0x1c>
 8004b44:	42a9      	cmp	r1, r5
 8004b46:	d904      	bls.n	8004b52 <_malloc_r+0x26>
 8004b48:	230c      	movs	r3, #12
 8004b4a:	6033      	str	r3, [r6, #0]
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c28 <_malloc_r+0xfc>
 8004b56:	f000 f869 	bl	8004c2c <__malloc_lock>
 8004b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b5e:	461c      	mov	r4, r3
 8004b60:	bb44      	cbnz	r4, 8004bb4 <_malloc_r+0x88>
 8004b62:	4629      	mov	r1, r5
 8004b64:	4630      	mov	r0, r6
 8004b66:	f7ff ffbf 	bl	8004ae8 <sbrk_aligned>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	d158      	bne.n	8004c22 <_malloc_r+0xf6>
 8004b70:	f8d8 4000 	ldr.w	r4, [r8]
 8004b74:	4627      	mov	r7, r4
 8004b76:	2f00      	cmp	r7, #0
 8004b78:	d143      	bne.n	8004c02 <_malloc_r+0xd6>
 8004b7a:	2c00      	cmp	r4, #0
 8004b7c:	d04b      	beq.n	8004c16 <_malloc_r+0xea>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	4639      	mov	r1, r7
 8004b82:	4630      	mov	r0, r6
 8004b84:	eb04 0903 	add.w	r9, r4, r3
 8004b88:	f000 fb42 	bl	8005210 <_sbrk_r>
 8004b8c:	4581      	cmp	r9, r0
 8004b8e:	d142      	bne.n	8004c16 <_malloc_r+0xea>
 8004b90:	6821      	ldr	r1, [r4, #0]
 8004b92:	1a6d      	subs	r5, r5, r1
 8004b94:	4629      	mov	r1, r5
 8004b96:	4630      	mov	r0, r6
 8004b98:	f7ff ffa6 	bl	8004ae8 <sbrk_aligned>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d03a      	beq.n	8004c16 <_malloc_r+0xea>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	442b      	add	r3, r5
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	bb62      	cbnz	r2, 8004c08 <_malloc_r+0xdc>
 8004bae:	f8c8 7000 	str.w	r7, [r8]
 8004bb2:	e00f      	b.n	8004bd4 <_malloc_r+0xa8>
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	1b52      	subs	r2, r2, r5
 8004bb8:	d420      	bmi.n	8004bfc <_malloc_r+0xd0>
 8004bba:	2a0b      	cmp	r2, #11
 8004bbc:	d917      	bls.n	8004bee <_malloc_r+0xc2>
 8004bbe:	1961      	adds	r1, r4, r5
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	6025      	str	r5, [r4, #0]
 8004bc4:	bf18      	it	ne
 8004bc6:	6059      	strne	r1, [r3, #4]
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	bf08      	it	eq
 8004bcc:	f8c8 1000 	streq.w	r1, [r8]
 8004bd0:	5162      	str	r2, [r4, r5]
 8004bd2:	604b      	str	r3, [r1, #4]
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f000 f82f 	bl	8004c38 <__malloc_unlock>
 8004bda:	f104 000b 	add.w	r0, r4, #11
 8004bde:	1d23      	adds	r3, r4, #4
 8004be0:	f020 0007 	bic.w	r0, r0, #7
 8004be4:	1ac2      	subs	r2, r0, r3
 8004be6:	bf1c      	itt	ne
 8004be8:	1a1b      	subne	r3, r3, r0
 8004bea:	50a3      	strne	r3, [r4, r2]
 8004bec:	e7af      	b.n	8004b4e <_malloc_r+0x22>
 8004bee:	6862      	ldr	r2, [r4, #4]
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	bf0c      	ite	eq
 8004bf4:	f8c8 2000 	streq.w	r2, [r8]
 8004bf8:	605a      	strne	r2, [r3, #4]
 8004bfa:	e7eb      	b.n	8004bd4 <_malloc_r+0xa8>
 8004bfc:	4623      	mov	r3, r4
 8004bfe:	6864      	ldr	r4, [r4, #4]
 8004c00:	e7ae      	b.n	8004b60 <_malloc_r+0x34>
 8004c02:	463c      	mov	r4, r7
 8004c04:	687f      	ldr	r7, [r7, #4]
 8004c06:	e7b6      	b.n	8004b76 <_malloc_r+0x4a>
 8004c08:	461a      	mov	r2, r3
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	42a3      	cmp	r3, r4
 8004c0e:	d1fb      	bne.n	8004c08 <_malloc_r+0xdc>
 8004c10:	2300      	movs	r3, #0
 8004c12:	6053      	str	r3, [r2, #4]
 8004c14:	e7de      	b.n	8004bd4 <_malloc_r+0xa8>
 8004c16:	230c      	movs	r3, #12
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f000 f80c 	bl	8004c38 <__malloc_unlock>
 8004c20:	e794      	b.n	8004b4c <_malloc_r+0x20>
 8004c22:	6005      	str	r5, [r0, #0]
 8004c24:	e7d6      	b.n	8004bd4 <_malloc_r+0xa8>
 8004c26:	bf00      	nop
 8004c28:	2000053c 	.word	0x2000053c

08004c2c <__malloc_lock>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	@ (8004c34 <__malloc_lock+0x8>)
 8004c2e:	f7ff bf01 	b.w	8004a34 <__retarget_lock_acquire_recursive>
 8004c32:	bf00      	nop
 8004c34:	20000534 	.word	0x20000534

08004c38 <__malloc_unlock>:
 8004c38:	4801      	ldr	r0, [pc, #4]	@ (8004c40 <__malloc_unlock+0x8>)
 8004c3a:	f7ff befc 	b.w	8004a36 <__retarget_lock_release_recursive>
 8004c3e:	bf00      	nop
 8004c40:	20000534 	.word	0x20000534

08004c44 <__ssputs_r>:
 8004c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c48:	688e      	ldr	r6, [r1, #8]
 8004c4a:	461f      	mov	r7, r3
 8004c4c:	42be      	cmp	r6, r7
 8004c4e:	680b      	ldr	r3, [r1, #0]
 8004c50:	4682      	mov	sl, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	4690      	mov	r8, r2
 8004c56:	d82d      	bhi.n	8004cb4 <__ssputs_r+0x70>
 8004c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c60:	d026      	beq.n	8004cb0 <__ssputs_r+0x6c>
 8004c62:	6965      	ldr	r5, [r4, #20]
 8004c64:	6909      	ldr	r1, [r1, #16]
 8004c66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c6a:	eba3 0901 	sub.w	r9, r3, r1
 8004c6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c72:	1c7b      	adds	r3, r7, #1
 8004c74:	444b      	add	r3, r9
 8004c76:	106d      	asrs	r5, r5, #1
 8004c78:	429d      	cmp	r5, r3
 8004c7a:	bf38      	it	cc
 8004c7c:	461d      	movcc	r5, r3
 8004c7e:	0553      	lsls	r3, r2, #21
 8004c80:	d527      	bpl.n	8004cd2 <__ssputs_r+0x8e>
 8004c82:	4629      	mov	r1, r5
 8004c84:	f7ff ff52 	bl	8004b2c <_malloc_r>
 8004c88:	4606      	mov	r6, r0
 8004c8a:	b360      	cbz	r0, 8004ce6 <__ssputs_r+0xa2>
 8004c8c:	6921      	ldr	r1, [r4, #16]
 8004c8e:	464a      	mov	r2, r9
 8004c90:	f7ff fed2 	bl	8004a38 <memcpy>
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	6126      	str	r6, [r4, #16]
 8004ca2:	6165      	str	r5, [r4, #20]
 8004ca4:	444e      	add	r6, r9
 8004ca6:	eba5 0509 	sub.w	r5, r5, r9
 8004caa:	6026      	str	r6, [r4, #0]
 8004cac:	60a5      	str	r5, [r4, #8]
 8004cae:	463e      	mov	r6, r7
 8004cb0:	42be      	cmp	r6, r7
 8004cb2:	d900      	bls.n	8004cb6 <__ssputs_r+0x72>
 8004cb4:	463e      	mov	r6, r7
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	4632      	mov	r2, r6
 8004cba:	4641      	mov	r1, r8
 8004cbc:	f7ff fe6e 	bl	800499c <memmove>
 8004cc0:	68a3      	ldr	r3, [r4, #8]
 8004cc2:	1b9b      	subs	r3, r3, r6
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	4433      	add	r3, r6
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	f000 faac 	bl	8005230 <_realloc_r>
 8004cd8:	4606      	mov	r6, r0
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d1e0      	bne.n	8004ca0 <__ssputs_r+0x5c>
 8004cde:	6921      	ldr	r1, [r4, #16]
 8004ce0:	4650      	mov	r0, sl
 8004ce2:	f7ff feb7 	bl	8004a54 <_free_r>
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	f8ca 3000 	str.w	r3, [sl]
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cf8:	e7e9      	b.n	8004cce <__ssputs_r+0x8a>
	...

08004cfc <_svfiprintf_r>:
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	4698      	mov	r8, r3
 8004d02:	898b      	ldrh	r3, [r1, #12]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	b09d      	sub	sp, #116	@ 0x74
 8004d08:	4607      	mov	r7, r0
 8004d0a:	460d      	mov	r5, r1
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	d510      	bpl.n	8004d32 <_svfiprintf_r+0x36>
 8004d10:	690b      	ldr	r3, [r1, #16]
 8004d12:	b973      	cbnz	r3, 8004d32 <_svfiprintf_r+0x36>
 8004d14:	2140      	movs	r1, #64	@ 0x40
 8004d16:	f7ff ff09 	bl	8004b2c <_malloc_r>
 8004d1a:	6028      	str	r0, [r5, #0]
 8004d1c:	6128      	str	r0, [r5, #16]
 8004d1e:	b930      	cbnz	r0, 8004d2e <_svfiprintf_r+0x32>
 8004d20:	230c      	movs	r3, #12
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d28:	b01d      	add	sp, #116	@ 0x74
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	2340      	movs	r3, #64	@ 0x40
 8004d30:	616b      	str	r3, [r5, #20]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d36:	2320      	movs	r3, #32
 8004d38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d40:	2330      	movs	r3, #48	@ 0x30
 8004d42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ee0 <_svfiprintf_r+0x1e4>
 8004d46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d4a:	f04f 0901 	mov.w	r9, #1
 8004d4e:	4623      	mov	r3, r4
 8004d50:	469a      	mov	sl, r3
 8004d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d56:	b10a      	cbz	r2, 8004d5c <_svfiprintf_r+0x60>
 8004d58:	2a25      	cmp	r2, #37	@ 0x25
 8004d5a:	d1f9      	bne.n	8004d50 <_svfiprintf_r+0x54>
 8004d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d60:	d00b      	beq.n	8004d7a <_svfiprintf_r+0x7e>
 8004d62:	465b      	mov	r3, fp
 8004d64:	4622      	mov	r2, r4
 8004d66:	4629      	mov	r1, r5
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f7ff ff6b 	bl	8004c44 <__ssputs_r>
 8004d6e:	3001      	adds	r0, #1
 8004d70:	f000 80a7 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d76:	445a      	add	r2, fp
 8004d78:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 809f 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d84:	2300      	movs	r3, #0
 8004d86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d8e:	f10a 0a01 	add.w	sl, sl, #1
 8004d92:	9304      	str	r3, [sp, #16]
 8004d94:	9307      	str	r3, [sp, #28]
 8004d96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d9c:	4654      	mov	r4, sl
 8004d9e:	2205      	movs	r2, #5
 8004da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da4:	484e      	ldr	r0, [pc, #312]	@ (8004ee0 <_svfiprintf_r+0x1e4>)
 8004da6:	f7fb fa1b 	bl	80001e0 <memchr>
 8004daa:	9a04      	ldr	r2, [sp, #16]
 8004dac:	b9d8      	cbnz	r0, 8004de6 <_svfiprintf_r+0xea>
 8004dae:	06d0      	lsls	r0, r2, #27
 8004db0:	bf44      	itt	mi
 8004db2:	2320      	movmi	r3, #32
 8004db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004db8:	0711      	lsls	r1, r2, #28
 8004dba:	bf44      	itt	mi
 8004dbc:	232b      	movmi	r3, #43	@ 0x2b
 8004dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc8:	d015      	beq.n	8004df6 <_svfiprintf_r+0xfa>
 8004dca:	9a07      	ldr	r2, [sp, #28]
 8004dcc:	4654      	mov	r4, sl
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f04f 0c0a 	mov.w	ip, #10
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dda:	3b30      	subs	r3, #48	@ 0x30
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d94b      	bls.n	8004e78 <_svfiprintf_r+0x17c>
 8004de0:	b1b0      	cbz	r0, 8004e10 <_svfiprintf_r+0x114>
 8004de2:	9207      	str	r2, [sp, #28]
 8004de4:	e014      	b.n	8004e10 <_svfiprintf_r+0x114>
 8004de6:	eba0 0308 	sub.w	r3, r0, r8
 8004dea:	fa09 f303 	lsl.w	r3, r9, r3
 8004dee:	4313      	orrs	r3, r2
 8004df0:	9304      	str	r3, [sp, #16]
 8004df2:	46a2      	mov	sl, r4
 8004df4:	e7d2      	b.n	8004d9c <_svfiprintf_r+0xa0>
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	1d19      	adds	r1, r3, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	9103      	str	r1, [sp, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfbb      	ittet	lt
 8004e02:	425b      	neglt	r3, r3
 8004e04:	f042 0202 	orrlt.w	r2, r2, #2
 8004e08:	9307      	strge	r3, [sp, #28]
 8004e0a:	9307      	strlt	r3, [sp, #28]
 8004e0c:	bfb8      	it	lt
 8004e0e:	9204      	strlt	r2, [sp, #16]
 8004e10:	7823      	ldrb	r3, [r4, #0]
 8004e12:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e14:	d10a      	bne.n	8004e2c <_svfiprintf_r+0x130>
 8004e16:	7863      	ldrb	r3, [r4, #1]
 8004e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e1a:	d132      	bne.n	8004e82 <_svfiprintf_r+0x186>
 8004e1c:	9b03      	ldr	r3, [sp, #12]
 8004e1e:	1d1a      	adds	r2, r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	9203      	str	r2, [sp, #12]
 8004e24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e28:	3402      	adds	r4, #2
 8004e2a:	9305      	str	r3, [sp, #20]
 8004e2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ef0 <_svfiprintf_r+0x1f4>
 8004e30:	7821      	ldrb	r1, [r4, #0]
 8004e32:	2203      	movs	r2, #3
 8004e34:	4650      	mov	r0, sl
 8004e36:	f7fb f9d3 	bl	80001e0 <memchr>
 8004e3a:	b138      	cbz	r0, 8004e4c <_svfiprintf_r+0x150>
 8004e3c:	9b04      	ldr	r3, [sp, #16]
 8004e3e:	eba0 000a 	sub.w	r0, r0, sl
 8004e42:	2240      	movs	r2, #64	@ 0x40
 8004e44:	4082      	lsls	r2, r0
 8004e46:	4313      	orrs	r3, r2
 8004e48:	3401      	adds	r4, #1
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e50:	4824      	ldr	r0, [pc, #144]	@ (8004ee4 <_svfiprintf_r+0x1e8>)
 8004e52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e56:	2206      	movs	r2, #6
 8004e58:	f7fb f9c2 	bl	80001e0 <memchr>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d036      	beq.n	8004ece <_svfiprintf_r+0x1d2>
 8004e60:	4b21      	ldr	r3, [pc, #132]	@ (8004ee8 <_svfiprintf_r+0x1ec>)
 8004e62:	bb1b      	cbnz	r3, 8004eac <_svfiprintf_r+0x1b0>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	3307      	adds	r3, #7
 8004e68:	f023 0307 	bic.w	r3, r3, #7
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	9303      	str	r3, [sp, #12]
 8004e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e72:	4433      	add	r3, r6
 8004e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e76:	e76a      	b.n	8004d4e <_svfiprintf_r+0x52>
 8004e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	2001      	movs	r0, #1
 8004e80:	e7a8      	b.n	8004dd4 <_svfiprintf_r+0xd8>
 8004e82:	2300      	movs	r3, #0
 8004e84:	3401      	adds	r4, #1
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f04f 0c0a 	mov.w	ip, #10
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e94:	3a30      	subs	r2, #48	@ 0x30
 8004e96:	2a09      	cmp	r2, #9
 8004e98:	d903      	bls.n	8004ea2 <_svfiprintf_r+0x1a6>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0c6      	beq.n	8004e2c <_svfiprintf_r+0x130>
 8004e9e:	9105      	str	r1, [sp, #20]
 8004ea0:	e7c4      	b.n	8004e2c <_svfiprintf_r+0x130>
 8004ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e7f0      	b.n	8004e8e <_svfiprintf_r+0x192>
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004eec <_svfiprintf_r+0x1f0>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f3af 8000 	nop.w
 8004ebc:	1c42      	adds	r2, r0, #1
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	d1d6      	bne.n	8004e70 <_svfiprintf_r+0x174>
 8004ec2:	89ab      	ldrh	r3, [r5, #12]
 8004ec4:	065b      	lsls	r3, r3, #25
 8004ec6:	f53f af2d 	bmi.w	8004d24 <_svfiprintf_r+0x28>
 8004eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ecc:	e72c      	b.n	8004d28 <_svfiprintf_r+0x2c>
 8004ece:	ab03      	add	r3, sp, #12
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	462a      	mov	r2, r5
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <_svfiprintf_r+0x1f0>)
 8004ed6:	a904      	add	r1, sp, #16
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f000 f879 	bl	8004fd0 <_printf_i>
 8004ede:	e7ed      	b.n	8004ebc <_svfiprintf_r+0x1c0>
 8004ee0:	08005aa0 	.word	0x08005aa0
 8004ee4:	08005aaa 	.word	0x08005aaa
 8004ee8:	00000000 	.word	0x00000000
 8004eec:	08004c45 	.word	0x08004c45
 8004ef0:	08005aa6 	.word	0x08005aa6

08004ef4 <_printf_common>:
 8004ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	4616      	mov	r6, r2
 8004efa:	4698      	mov	r8, r3
 8004efc:	688a      	ldr	r2, [r1, #8]
 8004efe:	690b      	ldr	r3, [r1, #16]
 8004f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	bfb8      	it	lt
 8004f08:	4613      	movlt	r3, r2
 8004f0a:	6033      	str	r3, [r6, #0]
 8004f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f10:	4607      	mov	r7, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	b10a      	cbz	r2, 8004f1a <_printf_common+0x26>
 8004f16:	3301      	adds	r3, #1
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	0699      	lsls	r1, r3, #26
 8004f1e:	bf42      	ittt	mi
 8004f20:	6833      	ldrmi	r3, [r6, #0]
 8004f22:	3302      	addmi	r3, #2
 8004f24:	6033      	strmi	r3, [r6, #0]
 8004f26:	6825      	ldr	r5, [r4, #0]
 8004f28:	f015 0506 	ands.w	r5, r5, #6
 8004f2c:	d106      	bne.n	8004f3c <_printf_common+0x48>
 8004f2e:	f104 0a19 	add.w	sl, r4, #25
 8004f32:	68e3      	ldr	r3, [r4, #12]
 8004f34:	6832      	ldr	r2, [r6, #0]
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	42ab      	cmp	r3, r5
 8004f3a:	dc26      	bgt.n	8004f8a <_printf_common+0x96>
 8004f3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	3b00      	subs	r3, #0
 8004f44:	bf18      	it	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	0692      	lsls	r2, r2, #26
 8004f4a:	d42b      	bmi.n	8004fa4 <_printf_common+0xb0>
 8004f4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f50:	4641      	mov	r1, r8
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c8      	blx	r9
 8004f56:	3001      	adds	r0, #1
 8004f58:	d01e      	beq.n	8004f98 <_printf_common+0xa4>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	6922      	ldr	r2, [r4, #16]
 8004f5e:	f003 0306 	and.w	r3, r3, #6
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	bf02      	ittt	eq
 8004f66:	68e5      	ldreq	r5, [r4, #12]
 8004f68:	6833      	ldreq	r3, [r6, #0]
 8004f6a:	1aed      	subeq	r5, r5, r3
 8004f6c:	68a3      	ldr	r3, [r4, #8]
 8004f6e:	bf0c      	ite	eq
 8004f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f74:	2500      	movne	r5, #0
 8004f76:	4293      	cmp	r3, r2
 8004f78:	bfc4      	itt	gt
 8004f7a:	1a9b      	subgt	r3, r3, r2
 8004f7c:	18ed      	addgt	r5, r5, r3
 8004f7e:	2600      	movs	r6, #0
 8004f80:	341a      	adds	r4, #26
 8004f82:	42b5      	cmp	r5, r6
 8004f84:	d11a      	bne.n	8004fbc <_printf_common+0xc8>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e008      	b.n	8004f9c <_printf_common+0xa8>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4652      	mov	r2, sl
 8004f8e:	4641      	mov	r1, r8
 8004f90:	4638      	mov	r0, r7
 8004f92:	47c8      	blx	r9
 8004f94:	3001      	adds	r0, #1
 8004f96:	d103      	bne.n	8004fa0 <_printf_common+0xac>
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa0:	3501      	adds	r5, #1
 8004fa2:	e7c6      	b.n	8004f32 <_printf_common+0x3e>
 8004fa4:	18e1      	adds	r1, r4, r3
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	2030      	movs	r0, #48	@ 0x30
 8004faa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fae:	4422      	add	r2, r4
 8004fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fb8:	3302      	adds	r3, #2
 8004fba:	e7c7      	b.n	8004f4c <_printf_common+0x58>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c8      	blx	r9
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d0e6      	beq.n	8004f98 <_printf_common+0xa4>
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7d9      	b.n	8004f82 <_printf_common+0x8e>
	...

08004fd0 <_printf_i>:
 8004fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	7e0f      	ldrb	r7, [r1, #24]
 8004fd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fd8:	2f78      	cmp	r7, #120	@ 0x78
 8004fda:	4691      	mov	r9, r2
 8004fdc:	4680      	mov	r8, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	469a      	mov	sl, r3
 8004fe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fe6:	d807      	bhi.n	8004ff8 <_printf_i+0x28>
 8004fe8:	2f62      	cmp	r7, #98	@ 0x62
 8004fea:	d80a      	bhi.n	8005002 <_printf_i+0x32>
 8004fec:	2f00      	cmp	r7, #0
 8004fee:	f000 80d2 	beq.w	8005196 <_printf_i+0x1c6>
 8004ff2:	2f58      	cmp	r7, #88	@ 0x58
 8004ff4:	f000 80b9 	beq.w	800516a <_printf_i+0x19a>
 8004ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005000:	e03a      	b.n	8005078 <_printf_i+0xa8>
 8005002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005006:	2b15      	cmp	r3, #21
 8005008:	d8f6      	bhi.n	8004ff8 <_printf_i+0x28>
 800500a:	a101      	add	r1, pc, #4	@ (adr r1, 8005010 <_printf_i+0x40>)
 800500c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005010:	08005069 	.word	0x08005069
 8005014:	0800507d 	.word	0x0800507d
 8005018:	08004ff9 	.word	0x08004ff9
 800501c:	08004ff9 	.word	0x08004ff9
 8005020:	08004ff9 	.word	0x08004ff9
 8005024:	08004ff9 	.word	0x08004ff9
 8005028:	0800507d 	.word	0x0800507d
 800502c:	08004ff9 	.word	0x08004ff9
 8005030:	08004ff9 	.word	0x08004ff9
 8005034:	08004ff9 	.word	0x08004ff9
 8005038:	08004ff9 	.word	0x08004ff9
 800503c:	0800517d 	.word	0x0800517d
 8005040:	080050a7 	.word	0x080050a7
 8005044:	08005137 	.word	0x08005137
 8005048:	08004ff9 	.word	0x08004ff9
 800504c:	08004ff9 	.word	0x08004ff9
 8005050:	0800519f 	.word	0x0800519f
 8005054:	08004ff9 	.word	0x08004ff9
 8005058:	080050a7 	.word	0x080050a7
 800505c:	08004ff9 	.word	0x08004ff9
 8005060:	08004ff9 	.word	0x08004ff9
 8005064:	0800513f 	.word	0x0800513f
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	1d1a      	adds	r2, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6032      	str	r2, [r6, #0]
 8005070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005078:	2301      	movs	r3, #1
 800507a:	e09d      	b.n	80051b8 <_printf_i+0x1e8>
 800507c:	6833      	ldr	r3, [r6, #0]
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	1d19      	adds	r1, r3, #4
 8005082:	6031      	str	r1, [r6, #0]
 8005084:	0606      	lsls	r6, r0, #24
 8005086:	d501      	bpl.n	800508c <_printf_i+0xbc>
 8005088:	681d      	ldr	r5, [r3, #0]
 800508a:	e003      	b.n	8005094 <_printf_i+0xc4>
 800508c:	0645      	lsls	r5, r0, #25
 800508e:	d5fb      	bpl.n	8005088 <_printf_i+0xb8>
 8005090:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005094:	2d00      	cmp	r5, #0
 8005096:	da03      	bge.n	80050a0 <_printf_i+0xd0>
 8005098:	232d      	movs	r3, #45	@ 0x2d
 800509a:	426d      	negs	r5, r5
 800509c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a0:	4859      	ldr	r0, [pc, #356]	@ (8005208 <_printf_i+0x238>)
 80050a2:	230a      	movs	r3, #10
 80050a4:	e011      	b.n	80050ca <_printf_i+0xfa>
 80050a6:	6821      	ldr	r1, [r4, #0]
 80050a8:	6833      	ldr	r3, [r6, #0]
 80050aa:	0608      	lsls	r0, r1, #24
 80050ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80050b0:	d402      	bmi.n	80050b8 <_printf_i+0xe8>
 80050b2:	0649      	lsls	r1, r1, #25
 80050b4:	bf48      	it	mi
 80050b6:	b2ad      	uxthmi	r5, r5
 80050b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050ba:	4853      	ldr	r0, [pc, #332]	@ (8005208 <_printf_i+0x238>)
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	bf14      	ite	ne
 80050c0:	230a      	movne	r3, #10
 80050c2:	2308      	moveq	r3, #8
 80050c4:	2100      	movs	r1, #0
 80050c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ca:	6866      	ldr	r6, [r4, #4]
 80050cc:	60a6      	str	r6, [r4, #8]
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	bfa2      	ittt	ge
 80050d2:	6821      	ldrge	r1, [r4, #0]
 80050d4:	f021 0104 	bicge.w	r1, r1, #4
 80050d8:	6021      	strge	r1, [r4, #0]
 80050da:	b90d      	cbnz	r5, 80050e0 <_printf_i+0x110>
 80050dc:	2e00      	cmp	r6, #0
 80050de:	d04b      	beq.n	8005178 <_printf_i+0x1a8>
 80050e0:	4616      	mov	r6, r2
 80050e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050e6:	fb03 5711 	mls	r7, r3, r1, r5
 80050ea:	5dc7      	ldrb	r7, [r0, r7]
 80050ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050f0:	462f      	mov	r7, r5
 80050f2:	42bb      	cmp	r3, r7
 80050f4:	460d      	mov	r5, r1
 80050f6:	d9f4      	bls.n	80050e2 <_printf_i+0x112>
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d10b      	bne.n	8005114 <_printf_i+0x144>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07df      	lsls	r7, r3, #31
 8005100:	d508      	bpl.n	8005114 <_printf_i+0x144>
 8005102:	6923      	ldr	r3, [r4, #16]
 8005104:	6861      	ldr	r1, [r4, #4]
 8005106:	4299      	cmp	r1, r3
 8005108:	bfde      	ittt	le
 800510a:	2330      	movle	r3, #48	@ 0x30
 800510c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005110:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005114:	1b92      	subs	r2, r2, r6
 8005116:	6122      	str	r2, [r4, #16]
 8005118:	f8cd a000 	str.w	sl, [sp]
 800511c:	464b      	mov	r3, r9
 800511e:	aa03      	add	r2, sp, #12
 8005120:	4621      	mov	r1, r4
 8005122:	4640      	mov	r0, r8
 8005124:	f7ff fee6 	bl	8004ef4 <_printf_common>
 8005128:	3001      	adds	r0, #1
 800512a:	d14a      	bne.n	80051c2 <_printf_i+0x1f2>
 800512c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005130:	b004      	add	sp, #16
 8005132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	f043 0320 	orr.w	r3, r3, #32
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	4833      	ldr	r0, [pc, #204]	@ (800520c <_printf_i+0x23c>)
 8005140:	2778      	movs	r7, #120	@ 0x78
 8005142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	6831      	ldr	r1, [r6, #0]
 800514a:	061f      	lsls	r7, r3, #24
 800514c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005150:	d402      	bmi.n	8005158 <_printf_i+0x188>
 8005152:	065f      	lsls	r7, r3, #25
 8005154:	bf48      	it	mi
 8005156:	b2ad      	uxthmi	r5, r5
 8005158:	6031      	str	r1, [r6, #0]
 800515a:	07d9      	lsls	r1, r3, #31
 800515c:	bf44      	itt	mi
 800515e:	f043 0320 	orrmi.w	r3, r3, #32
 8005162:	6023      	strmi	r3, [r4, #0]
 8005164:	b11d      	cbz	r5, 800516e <_printf_i+0x19e>
 8005166:	2310      	movs	r3, #16
 8005168:	e7ac      	b.n	80050c4 <_printf_i+0xf4>
 800516a:	4827      	ldr	r0, [pc, #156]	@ (8005208 <_printf_i+0x238>)
 800516c:	e7e9      	b.n	8005142 <_printf_i+0x172>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	f023 0320 	bic.w	r3, r3, #32
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	e7f6      	b.n	8005166 <_printf_i+0x196>
 8005178:	4616      	mov	r6, r2
 800517a:	e7bd      	b.n	80050f8 <_printf_i+0x128>
 800517c:	6833      	ldr	r3, [r6, #0]
 800517e:	6825      	ldr	r5, [r4, #0]
 8005180:	6961      	ldr	r1, [r4, #20]
 8005182:	1d18      	adds	r0, r3, #4
 8005184:	6030      	str	r0, [r6, #0]
 8005186:	062e      	lsls	r6, r5, #24
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	d501      	bpl.n	8005190 <_printf_i+0x1c0>
 800518c:	6019      	str	r1, [r3, #0]
 800518e:	e002      	b.n	8005196 <_printf_i+0x1c6>
 8005190:	0668      	lsls	r0, r5, #25
 8005192:	d5fb      	bpl.n	800518c <_printf_i+0x1bc>
 8005194:	8019      	strh	r1, [r3, #0]
 8005196:	2300      	movs	r3, #0
 8005198:	6123      	str	r3, [r4, #16]
 800519a:	4616      	mov	r6, r2
 800519c:	e7bc      	b.n	8005118 <_printf_i+0x148>
 800519e:	6833      	ldr	r3, [r6, #0]
 80051a0:	1d1a      	adds	r2, r3, #4
 80051a2:	6032      	str	r2, [r6, #0]
 80051a4:	681e      	ldr	r6, [r3, #0]
 80051a6:	6862      	ldr	r2, [r4, #4]
 80051a8:	2100      	movs	r1, #0
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7fb f818 	bl	80001e0 <memchr>
 80051b0:	b108      	cbz	r0, 80051b6 <_printf_i+0x1e6>
 80051b2:	1b80      	subs	r0, r0, r6
 80051b4:	6060      	str	r0, [r4, #4]
 80051b6:	6863      	ldr	r3, [r4, #4]
 80051b8:	6123      	str	r3, [r4, #16]
 80051ba:	2300      	movs	r3, #0
 80051bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c0:	e7aa      	b.n	8005118 <_printf_i+0x148>
 80051c2:	6923      	ldr	r3, [r4, #16]
 80051c4:	4632      	mov	r2, r6
 80051c6:	4649      	mov	r1, r9
 80051c8:	4640      	mov	r0, r8
 80051ca:	47d0      	blx	sl
 80051cc:	3001      	adds	r0, #1
 80051ce:	d0ad      	beq.n	800512c <_printf_i+0x15c>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	079b      	lsls	r3, r3, #30
 80051d4:	d413      	bmi.n	80051fe <_printf_i+0x22e>
 80051d6:	68e0      	ldr	r0, [r4, #12]
 80051d8:	9b03      	ldr	r3, [sp, #12]
 80051da:	4298      	cmp	r0, r3
 80051dc:	bfb8      	it	lt
 80051de:	4618      	movlt	r0, r3
 80051e0:	e7a6      	b.n	8005130 <_printf_i+0x160>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4632      	mov	r2, r6
 80051e6:	4649      	mov	r1, r9
 80051e8:	4640      	mov	r0, r8
 80051ea:	47d0      	blx	sl
 80051ec:	3001      	adds	r0, #1
 80051ee:	d09d      	beq.n	800512c <_printf_i+0x15c>
 80051f0:	3501      	adds	r5, #1
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	9903      	ldr	r1, [sp, #12]
 80051f6:	1a5b      	subs	r3, r3, r1
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	dcf2      	bgt.n	80051e2 <_printf_i+0x212>
 80051fc:	e7eb      	b.n	80051d6 <_printf_i+0x206>
 80051fe:	2500      	movs	r5, #0
 8005200:	f104 0619 	add.w	r6, r4, #25
 8005204:	e7f5      	b.n	80051f2 <_printf_i+0x222>
 8005206:	bf00      	nop
 8005208:	08005ab1 	.word	0x08005ab1
 800520c:	08005ac2 	.word	0x08005ac2

08005210 <_sbrk_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4d06      	ldr	r5, [pc, #24]	@ (800522c <_sbrk_r+0x1c>)
 8005214:	2300      	movs	r3, #0
 8005216:	4604      	mov	r4, r0
 8005218:	4608      	mov	r0, r1
 800521a:	602b      	str	r3, [r5, #0]
 800521c:	f7fc f850 	bl	80012c0 <_sbrk>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_sbrk_r+0x1a>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_sbrk_r+0x1a>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	20000530 	.word	0x20000530

08005230 <_realloc_r>:
 8005230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005234:	4680      	mov	r8, r0
 8005236:	4615      	mov	r5, r2
 8005238:	460c      	mov	r4, r1
 800523a:	b921      	cbnz	r1, 8005246 <_realloc_r+0x16>
 800523c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	4611      	mov	r1, r2
 8005242:	f7ff bc73 	b.w	8004b2c <_malloc_r>
 8005246:	b92a      	cbnz	r2, 8005254 <_realloc_r+0x24>
 8005248:	f7ff fc04 	bl	8004a54 <_free_r>
 800524c:	2400      	movs	r4, #0
 800524e:	4620      	mov	r0, r4
 8005250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005254:	f000 f81a 	bl	800528c <_malloc_usable_size_r>
 8005258:	4285      	cmp	r5, r0
 800525a:	4606      	mov	r6, r0
 800525c:	d802      	bhi.n	8005264 <_realloc_r+0x34>
 800525e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005262:	d8f4      	bhi.n	800524e <_realloc_r+0x1e>
 8005264:	4629      	mov	r1, r5
 8005266:	4640      	mov	r0, r8
 8005268:	f7ff fc60 	bl	8004b2c <_malloc_r>
 800526c:	4607      	mov	r7, r0
 800526e:	2800      	cmp	r0, #0
 8005270:	d0ec      	beq.n	800524c <_realloc_r+0x1c>
 8005272:	42b5      	cmp	r5, r6
 8005274:	462a      	mov	r2, r5
 8005276:	4621      	mov	r1, r4
 8005278:	bf28      	it	cs
 800527a:	4632      	movcs	r2, r6
 800527c:	f7ff fbdc 	bl	8004a38 <memcpy>
 8005280:	4621      	mov	r1, r4
 8005282:	4640      	mov	r0, r8
 8005284:	f7ff fbe6 	bl	8004a54 <_free_r>
 8005288:	463c      	mov	r4, r7
 800528a:	e7e0      	b.n	800524e <_realloc_r+0x1e>

0800528c <_malloc_usable_size_r>:
 800528c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005290:	1f18      	subs	r0, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfbc      	itt	lt
 8005296:	580b      	ldrlt	r3, [r1, r0]
 8005298:	18c0      	addlt	r0, r0, r3
 800529a:	4770      	bx	lr

0800529c <_init>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr

080052a8 <_fini>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr
